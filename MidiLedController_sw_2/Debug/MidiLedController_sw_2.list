
MidiLedController_sw_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005268  08005268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005320  08005320  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005320  08005320  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005320  08005320  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005324  08005324  00015324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000007c  080053a4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080053a4  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1fa  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cfc  00000000  00000000  0002a29e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad0  00000000  00000000  0002bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b8  00000000  00000000  0002ca70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f19e  00000000  00000000  0002d428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d50  00000000  00000000  0003c5c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000561a0  00000000  00000000  00046316  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009c4b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002818  00000000  00000000  0009c534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005250 	.word	0x08005250

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08005250 	.word	0x08005250

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 ff0f 	bl	8001054 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fe67 	bl	8000f14 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 ff01 	bl	8001054 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fef7 	bl	8001054 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fe89 	bl	8000f8c <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fe7f 	bl	8000f8c <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_d2uiz>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	2200      	movs	r2, #0
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <__aeabi_d2uiz+0x38>)
 80002a2:	0004      	movs	r4, r0
 80002a4:	000d      	movs	r5, r1
 80002a6:	f7ff ffef 	bl	8000288 <__aeabi_dcmpge>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d104      	bne.n	80002b8 <__aeabi_d2uiz+0x1c>
 80002ae:	0020      	movs	r0, r4
 80002b0:	0029      	movs	r1, r5
 80002b2:	f001 fd0d 	bl	8001cd0 <__aeabi_d2iz>
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <__aeabi_d2uiz+0x38>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	0020      	movs	r0, r4
 80002be:	0029      	movs	r1, r5
 80002c0:	f001 f9a2 	bl	8001608 <__aeabi_dsub>
 80002c4:	f001 fd04 	bl	8001cd0 <__aeabi_d2iz>
 80002c8:	2380      	movs	r3, #128	; 0x80
 80002ca:	061b      	lsls	r3, r3, #24
 80002cc:	469c      	mov	ip, r3
 80002ce:	4460      	add	r0, ip
 80002d0:	e7f1      	b.n	80002b6 <__aeabi_d2uiz+0x1a>
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	41e00000 	.word	0x41e00000

080002d8 <__aeabi_dadd>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	464f      	mov	r7, r9
 80002dc:	4646      	mov	r6, r8
 80002de:	46d6      	mov	lr, sl
 80002e0:	000c      	movs	r4, r1
 80002e2:	0309      	lsls	r1, r1, #12
 80002e4:	b5c0      	push	{r6, r7, lr}
 80002e6:	0a49      	lsrs	r1, r1, #9
 80002e8:	0f47      	lsrs	r7, r0, #29
 80002ea:	005e      	lsls	r6, r3, #1
 80002ec:	4339      	orrs	r1, r7
 80002ee:	031f      	lsls	r7, r3, #12
 80002f0:	0fdb      	lsrs	r3, r3, #31
 80002f2:	469c      	mov	ip, r3
 80002f4:	0065      	lsls	r5, r4, #1
 80002f6:	0a7b      	lsrs	r3, r7, #9
 80002f8:	0f57      	lsrs	r7, r2, #29
 80002fa:	431f      	orrs	r7, r3
 80002fc:	0d6d      	lsrs	r5, r5, #21
 80002fe:	0fe4      	lsrs	r4, r4, #31
 8000300:	0d76      	lsrs	r6, r6, #21
 8000302:	46a1      	mov	r9, r4
 8000304:	00c0      	lsls	r0, r0, #3
 8000306:	46b8      	mov	r8, r7
 8000308:	00d2      	lsls	r2, r2, #3
 800030a:	1bab      	subs	r3, r5, r6
 800030c:	4564      	cmp	r4, ip
 800030e:	d07b      	beq.n	8000408 <__aeabi_dadd+0x130>
 8000310:	2b00      	cmp	r3, #0
 8000312:	dd5f      	ble.n	80003d4 <__aeabi_dadd+0xfc>
 8000314:	2e00      	cmp	r6, #0
 8000316:	d000      	beq.n	800031a <__aeabi_dadd+0x42>
 8000318:	e0a4      	b.n	8000464 <__aeabi_dadd+0x18c>
 800031a:	003e      	movs	r6, r7
 800031c:	4316      	orrs	r6, r2
 800031e:	d100      	bne.n	8000322 <__aeabi_dadd+0x4a>
 8000320:	e112      	b.n	8000548 <__aeabi_dadd+0x270>
 8000322:	1e5e      	subs	r6, r3, #1
 8000324:	2e00      	cmp	r6, #0
 8000326:	d000      	beq.n	800032a <__aeabi_dadd+0x52>
 8000328:	e19e      	b.n	8000668 <__aeabi_dadd+0x390>
 800032a:	1a87      	subs	r7, r0, r2
 800032c:	4643      	mov	r3, r8
 800032e:	42b8      	cmp	r0, r7
 8000330:	4180      	sbcs	r0, r0
 8000332:	2501      	movs	r5, #1
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	4240      	negs	r0, r0
 8000338:	1a09      	subs	r1, r1, r0
 800033a:	020b      	lsls	r3, r1, #8
 800033c:	d400      	bmi.n	8000340 <__aeabi_dadd+0x68>
 800033e:	e131      	b.n	80005a4 <__aeabi_dadd+0x2cc>
 8000340:	0249      	lsls	r1, r1, #9
 8000342:	0a4e      	lsrs	r6, r1, #9
 8000344:	2e00      	cmp	r6, #0
 8000346:	d100      	bne.n	800034a <__aeabi_dadd+0x72>
 8000348:	e16e      	b.n	8000628 <__aeabi_dadd+0x350>
 800034a:	0030      	movs	r0, r6
 800034c:	f001 fd28 	bl	8001da0 <__clzsi2>
 8000350:	0003      	movs	r3, r0
 8000352:	3b08      	subs	r3, #8
 8000354:	2b1f      	cmp	r3, #31
 8000356:	dd00      	ble.n	800035a <__aeabi_dadd+0x82>
 8000358:	e161      	b.n	800061e <__aeabi_dadd+0x346>
 800035a:	2220      	movs	r2, #32
 800035c:	0039      	movs	r1, r7
 800035e:	1ad2      	subs	r2, r2, r3
 8000360:	409e      	lsls	r6, r3
 8000362:	40d1      	lsrs	r1, r2
 8000364:	409f      	lsls	r7, r3
 8000366:	430e      	orrs	r6, r1
 8000368:	429d      	cmp	r5, r3
 800036a:	dd00      	ble.n	800036e <__aeabi_dadd+0x96>
 800036c:	e151      	b.n	8000612 <__aeabi_dadd+0x33a>
 800036e:	1b5d      	subs	r5, r3, r5
 8000370:	1c6b      	adds	r3, r5, #1
 8000372:	2b1f      	cmp	r3, #31
 8000374:	dd00      	ble.n	8000378 <__aeabi_dadd+0xa0>
 8000376:	e17c      	b.n	8000672 <__aeabi_dadd+0x39a>
 8000378:	2120      	movs	r1, #32
 800037a:	1ac9      	subs	r1, r1, r3
 800037c:	003d      	movs	r5, r7
 800037e:	0030      	movs	r0, r6
 8000380:	408f      	lsls	r7, r1
 8000382:	4088      	lsls	r0, r1
 8000384:	40dd      	lsrs	r5, r3
 8000386:	1e79      	subs	r1, r7, #1
 8000388:	418f      	sbcs	r7, r1
 800038a:	0031      	movs	r1, r6
 800038c:	2207      	movs	r2, #7
 800038e:	4328      	orrs	r0, r5
 8000390:	40d9      	lsrs	r1, r3
 8000392:	2500      	movs	r5, #0
 8000394:	4307      	orrs	r7, r0
 8000396:	403a      	ands	r2, r7
 8000398:	2a00      	cmp	r2, #0
 800039a:	d009      	beq.n	80003b0 <__aeabi_dadd+0xd8>
 800039c:	230f      	movs	r3, #15
 800039e:	403b      	ands	r3, r7
 80003a0:	2b04      	cmp	r3, #4
 80003a2:	d005      	beq.n	80003b0 <__aeabi_dadd+0xd8>
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	42bb      	cmp	r3, r7
 80003a8:	41bf      	sbcs	r7, r7
 80003aa:	427f      	negs	r7, r7
 80003ac:	19c9      	adds	r1, r1, r7
 80003ae:	001f      	movs	r7, r3
 80003b0:	020b      	lsls	r3, r1, #8
 80003b2:	d400      	bmi.n	80003b6 <__aeabi_dadd+0xde>
 80003b4:	e226      	b.n	8000804 <__aeabi_dadd+0x52c>
 80003b6:	1c6a      	adds	r2, r5, #1
 80003b8:	4bc6      	ldr	r3, [pc, #792]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80003ba:	0555      	lsls	r5, r2, #21
 80003bc:	0d6d      	lsrs	r5, r5, #21
 80003be:	429a      	cmp	r2, r3
 80003c0:	d100      	bne.n	80003c4 <__aeabi_dadd+0xec>
 80003c2:	e106      	b.n	80005d2 <__aeabi_dadd+0x2fa>
 80003c4:	4ac4      	ldr	r2, [pc, #784]	; (80006d8 <__aeabi_dadd+0x400>)
 80003c6:	08ff      	lsrs	r7, r7, #3
 80003c8:	400a      	ands	r2, r1
 80003ca:	0753      	lsls	r3, r2, #29
 80003cc:	0252      	lsls	r2, r2, #9
 80003ce:	433b      	orrs	r3, r7
 80003d0:	0b12      	lsrs	r2, r2, #12
 80003d2:	e08e      	b.n	80004f2 <__aeabi_dadd+0x21a>
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d000      	beq.n	80003da <__aeabi_dadd+0x102>
 80003d8:	e0b8      	b.n	800054c <__aeabi_dadd+0x274>
 80003da:	1c6b      	adds	r3, r5, #1
 80003dc:	055b      	lsls	r3, r3, #21
 80003de:	0d5b      	lsrs	r3, r3, #21
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	dc00      	bgt.n	80003e6 <__aeabi_dadd+0x10e>
 80003e4:	e130      	b.n	8000648 <__aeabi_dadd+0x370>
 80003e6:	1a87      	subs	r7, r0, r2
 80003e8:	4643      	mov	r3, r8
 80003ea:	42b8      	cmp	r0, r7
 80003ec:	41b6      	sbcs	r6, r6
 80003ee:	1acb      	subs	r3, r1, r3
 80003f0:	4276      	negs	r6, r6
 80003f2:	1b9e      	subs	r6, r3, r6
 80003f4:	0233      	lsls	r3, r6, #8
 80003f6:	d500      	bpl.n	80003fa <__aeabi_dadd+0x122>
 80003f8:	e14c      	b.n	8000694 <__aeabi_dadd+0x3bc>
 80003fa:	003b      	movs	r3, r7
 80003fc:	4333      	orrs	r3, r6
 80003fe:	d1a1      	bne.n	8000344 <__aeabi_dadd+0x6c>
 8000400:	2200      	movs	r2, #0
 8000402:	2400      	movs	r4, #0
 8000404:	2500      	movs	r5, #0
 8000406:	e070      	b.n	80004ea <__aeabi_dadd+0x212>
 8000408:	2b00      	cmp	r3, #0
 800040a:	dc00      	bgt.n	800040e <__aeabi_dadd+0x136>
 800040c:	e0e5      	b.n	80005da <__aeabi_dadd+0x302>
 800040e:	2e00      	cmp	r6, #0
 8000410:	d100      	bne.n	8000414 <__aeabi_dadd+0x13c>
 8000412:	e083      	b.n	800051c <__aeabi_dadd+0x244>
 8000414:	4eaf      	ldr	r6, [pc, #700]	; (80006d4 <__aeabi_dadd+0x3fc>)
 8000416:	42b5      	cmp	r5, r6
 8000418:	d060      	beq.n	80004dc <__aeabi_dadd+0x204>
 800041a:	2680      	movs	r6, #128	; 0x80
 800041c:	0436      	lsls	r6, r6, #16
 800041e:	4337      	orrs	r7, r6
 8000420:	46b8      	mov	r8, r7
 8000422:	2b38      	cmp	r3, #56	; 0x38
 8000424:	dc00      	bgt.n	8000428 <__aeabi_dadd+0x150>
 8000426:	e13e      	b.n	80006a6 <__aeabi_dadd+0x3ce>
 8000428:	4643      	mov	r3, r8
 800042a:	4313      	orrs	r3, r2
 800042c:	001f      	movs	r7, r3
 800042e:	1e7a      	subs	r2, r7, #1
 8000430:	4197      	sbcs	r7, r2
 8000432:	183f      	adds	r7, r7, r0
 8000434:	4287      	cmp	r7, r0
 8000436:	4180      	sbcs	r0, r0
 8000438:	4240      	negs	r0, r0
 800043a:	1809      	adds	r1, r1, r0
 800043c:	020b      	lsls	r3, r1, #8
 800043e:	d400      	bmi.n	8000442 <__aeabi_dadd+0x16a>
 8000440:	e0b0      	b.n	80005a4 <__aeabi_dadd+0x2cc>
 8000442:	4ba4      	ldr	r3, [pc, #656]	; (80006d4 <__aeabi_dadd+0x3fc>)
 8000444:	3501      	adds	r5, #1
 8000446:	429d      	cmp	r5, r3
 8000448:	d100      	bne.n	800044c <__aeabi_dadd+0x174>
 800044a:	e0c3      	b.n	80005d4 <__aeabi_dadd+0x2fc>
 800044c:	4aa2      	ldr	r2, [pc, #648]	; (80006d8 <__aeabi_dadd+0x400>)
 800044e:	087b      	lsrs	r3, r7, #1
 8000450:	400a      	ands	r2, r1
 8000452:	2101      	movs	r1, #1
 8000454:	400f      	ands	r7, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	0851      	lsrs	r1, r2, #1
 800045a:	07d3      	lsls	r3, r2, #31
 800045c:	2207      	movs	r2, #7
 800045e:	431f      	orrs	r7, r3
 8000460:	403a      	ands	r2, r7
 8000462:	e799      	b.n	8000398 <__aeabi_dadd+0xc0>
 8000464:	4e9b      	ldr	r6, [pc, #620]	; (80006d4 <__aeabi_dadd+0x3fc>)
 8000466:	42b5      	cmp	r5, r6
 8000468:	d038      	beq.n	80004dc <__aeabi_dadd+0x204>
 800046a:	2680      	movs	r6, #128	; 0x80
 800046c:	0436      	lsls	r6, r6, #16
 800046e:	4337      	orrs	r7, r6
 8000470:	46b8      	mov	r8, r7
 8000472:	2b38      	cmp	r3, #56	; 0x38
 8000474:	dd00      	ble.n	8000478 <__aeabi_dadd+0x1a0>
 8000476:	e0dc      	b.n	8000632 <__aeabi_dadd+0x35a>
 8000478:	2b1f      	cmp	r3, #31
 800047a:	dc00      	bgt.n	800047e <__aeabi_dadd+0x1a6>
 800047c:	e130      	b.n	80006e0 <__aeabi_dadd+0x408>
 800047e:	001e      	movs	r6, r3
 8000480:	4647      	mov	r7, r8
 8000482:	3e20      	subs	r6, #32
 8000484:	40f7      	lsrs	r7, r6
 8000486:	46bc      	mov	ip, r7
 8000488:	2b20      	cmp	r3, #32
 800048a:	d004      	beq.n	8000496 <__aeabi_dadd+0x1be>
 800048c:	2640      	movs	r6, #64	; 0x40
 800048e:	1af3      	subs	r3, r6, r3
 8000490:	4646      	mov	r6, r8
 8000492:	409e      	lsls	r6, r3
 8000494:	4332      	orrs	r2, r6
 8000496:	0017      	movs	r7, r2
 8000498:	4663      	mov	r3, ip
 800049a:	1e7a      	subs	r2, r7, #1
 800049c:	4197      	sbcs	r7, r2
 800049e:	431f      	orrs	r7, r3
 80004a0:	e0cc      	b.n	800063c <__aeabi_dadd+0x364>
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dadd+0x1d0>
 80004a6:	e204      	b.n	80008b2 <__aeabi_dadd+0x5da>
 80004a8:	4643      	mov	r3, r8
 80004aa:	4313      	orrs	r3, r2
 80004ac:	d100      	bne.n	80004b0 <__aeabi_dadd+0x1d8>
 80004ae:	e159      	b.n	8000764 <__aeabi_dadd+0x48c>
 80004b0:	074b      	lsls	r3, r1, #29
 80004b2:	08c0      	lsrs	r0, r0, #3
 80004b4:	4318      	orrs	r0, r3
 80004b6:	2380      	movs	r3, #128	; 0x80
 80004b8:	08c9      	lsrs	r1, r1, #3
 80004ba:	031b      	lsls	r3, r3, #12
 80004bc:	4219      	tst	r1, r3
 80004be:	d008      	beq.n	80004d2 <__aeabi_dadd+0x1fa>
 80004c0:	4645      	mov	r5, r8
 80004c2:	08ed      	lsrs	r5, r5, #3
 80004c4:	421d      	tst	r5, r3
 80004c6:	d104      	bne.n	80004d2 <__aeabi_dadd+0x1fa>
 80004c8:	4643      	mov	r3, r8
 80004ca:	08d0      	lsrs	r0, r2, #3
 80004cc:	0759      	lsls	r1, r3, #29
 80004ce:	4308      	orrs	r0, r1
 80004d0:	0029      	movs	r1, r5
 80004d2:	0f42      	lsrs	r2, r0, #29
 80004d4:	00c9      	lsls	r1, r1, #3
 80004d6:	4d7f      	ldr	r5, [pc, #508]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80004d8:	4311      	orrs	r1, r2
 80004da:	00c0      	lsls	r0, r0, #3
 80004dc:	074b      	lsls	r3, r1, #29
 80004de:	08ca      	lsrs	r2, r1, #3
 80004e0:	497c      	ldr	r1, [pc, #496]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80004e2:	08c0      	lsrs	r0, r0, #3
 80004e4:	4303      	orrs	r3, r0
 80004e6:	428d      	cmp	r5, r1
 80004e8:	d068      	beq.n	80005bc <__aeabi_dadd+0x2e4>
 80004ea:	0312      	lsls	r2, r2, #12
 80004ec:	056d      	lsls	r5, r5, #21
 80004ee:	0b12      	lsrs	r2, r2, #12
 80004f0:	0d6d      	lsrs	r5, r5, #21
 80004f2:	2100      	movs	r1, #0
 80004f4:	0312      	lsls	r2, r2, #12
 80004f6:	0018      	movs	r0, r3
 80004f8:	0b13      	lsrs	r3, r2, #12
 80004fa:	0d0a      	lsrs	r2, r1, #20
 80004fc:	0512      	lsls	r2, r2, #20
 80004fe:	431a      	orrs	r2, r3
 8000500:	4b76      	ldr	r3, [pc, #472]	; (80006dc <__aeabi_dadd+0x404>)
 8000502:	052d      	lsls	r5, r5, #20
 8000504:	4013      	ands	r3, r2
 8000506:	432b      	orrs	r3, r5
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	07e4      	lsls	r4, r4, #31
 800050c:	085b      	lsrs	r3, r3, #1
 800050e:	4323      	orrs	r3, r4
 8000510:	0019      	movs	r1, r3
 8000512:	bc1c      	pop	{r2, r3, r4}
 8000514:	4690      	mov	r8, r2
 8000516:	4699      	mov	r9, r3
 8000518:	46a2      	mov	sl, r4
 800051a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051c:	003e      	movs	r6, r7
 800051e:	4316      	orrs	r6, r2
 8000520:	d012      	beq.n	8000548 <__aeabi_dadd+0x270>
 8000522:	1e5e      	subs	r6, r3, #1
 8000524:	2e00      	cmp	r6, #0
 8000526:	d000      	beq.n	800052a <__aeabi_dadd+0x252>
 8000528:	e100      	b.n	800072c <__aeabi_dadd+0x454>
 800052a:	1887      	adds	r7, r0, r2
 800052c:	4287      	cmp	r7, r0
 800052e:	4180      	sbcs	r0, r0
 8000530:	4441      	add	r1, r8
 8000532:	4240      	negs	r0, r0
 8000534:	1809      	adds	r1, r1, r0
 8000536:	2501      	movs	r5, #1
 8000538:	020b      	lsls	r3, r1, #8
 800053a:	d533      	bpl.n	80005a4 <__aeabi_dadd+0x2cc>
 800053c:	2502      	movs	r5, #2
 800053e:	e785      	b.n	800044c <__aeabi_dadd+0x174>
 8000540:	4664      	mov	r4, ip
 8000542:	0033      	movs	r3, r6
 8000544:	4641      	mov	r1, r8
 8000546:	0010      	movs	r0, r2
 8000548:	001d      	movs	r5, r3
 800054a:	e7c7      	b.n	80004dc <__aeabi_dadd+0x204>
 800054c:	2d00      	cmp	r5, #0
 800054e:	d000      	beq.n	8000552 <__aeabi_dadd+0x27a>
 8000550:	e0da      	b.n	8000708 <__aeabi_dadd+0x430>
 8000552:	000c      	movs	r4, r1
 8000554:	4304      	orrs	r4, r0
 8000556:	d0f3      	beq.n	8000540 <__aeabi_dadd+0x268>
 8000558:	1c5c      	adds	r4, r3, #1
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0x286>
 800055c:	e19f      	b.n	800089e <__aeabi_dadd+0x5c6>
 800055e:	4c5d      	ldr	r4, [pc, #372]	; (80006d4 <__aeabi_dadd+0x3fc>)
 8000560:	42a6      	cmp	r6, r4
 8000562:	d100      	bne.n	8000566 <__aeabi_dadd+0x28e>
 8000564:	e12f      	b.n	80007c6 <__aeabi_dadd+0x4ee>
 8000566:	43db      	mvns	r3, r3
 8000568:	2b38      	cmp	r3, #56	; 0x38
 800056a:	dd00      	ble.n	800056e <__aeabi_dadd+0x296>
 800056c:	e166      	b.n	800083c <__aeabi_dadd+0x564>
 800056e:	2b1f      	cmp	r3, #31
 8000570:	dd00      	ble.n	8000574 <__aeabi_dadd+0x29c>
 8000572:	e183      	b.n	800087c <__aeabi_dadd+0x5a4>
 8000574:	2420      	movs	r4, #32
 8000576:	0005      	movs	r5, r0
 8000578:	1ae4      	subs	r4, r4, r3
 800057a:	000f      	movs	r7, r1
 800057c:	40dd      	lsrs	r5, r3
 800057e:	40d9      	lsrs	r1, r3
 8000580:	40a0      	lsls	r0, r4
 8000582:	4643      	mov	r3, r8
 8000584:	40a7      	lsls	r7, r4
 8000586:	1a5b      	subs	r3, r3, r1
 8000588:	1e44      	subs	r4, r0, #1
 800058a:	41a0      	sbcs	r0, r4
 800058c:	4698      	mov	r8, r3
 800058e:	432f      	orrs	r7, r5
 8000590:	4338      	orrs	r0, r7
 8000592:	1a17      	subs	r7, r2, r0
 8000594:	42ba      	cmp	r2, r7
 8000596:	4192      	sbcs	r2, r2
 8000598:	4643      	mov	r3, r8
 800059a:	4252      	negs	r2, r2
 800059c:	1a99      	subs	r1, r3, r2
 800059e:	4664      	mov	r4, ip
 80005a0:	0035      	movs	r5, r6
 80005a2:	e6ca      	b.n	800033a <__aeabi_dadd+0x62>
 80005a4:	2207      	movs	r2, #7
 80005a6:	403a      	ands	r2, r7
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_dadd+0x2d6>
 80005ac:	e6f6      	b.n	800039c <__aeabi_dadd+0xc4>
 80005ae:	074b      	lsls	r3, r1, #29
 80005b0:	08ca      	lsrs	r2, r1, #3
 80005b2:	4948      	ldr	r1, [pc, #288]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80005b4:	08ff      	lsrs	r7, r7, #3
 80005b6:	433b      	orrs	r3, r7
 80005b8:	428d      	cmp	r5, r1
 80005ba:	d196      	bne.n	80004ea <__aeabi_dadd+0x212>
 80005bc:	0019      	movs	r1, r3
 80005be:	4311      	orrs	r1, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x2ec>
 80005c2:	e19e      	b.n	8000902 <__aeabi_dadd+0x62a>
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0309      	lsls	r1, r1, #12
 80005c8:	430a      	orrs	r2, r1
 80005ca:	0312      	lsls	r2, r2, #12
 80005cc:	0b12      	lsrs	r2, r2, #12
 80005ce:	4d41      	ldr	r5, [pc, #260]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80005d0:	e78f      	b.n	80004f2 <__aeabi_dadd+0x21a>
 80005d2:	0015      	movs	r5, r2
 80005d4:	2200      	movs	r2, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	e78b      	b.n	80004f2 <__aeabi_dadd+0x21a>
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d000      	beq.n	80005e0 <__aeabi_dadd+0x308>
 80005de:	e0c7      	b.n	8000770 <__aeabi_dadd+0x498>
 80005e0:	1c6b      	adds	r3, r5, #1
 80005e2:	055f      	lsls	r7, r3, #21
 80005e4:	0d7f      	lsrs	r7, r7, #21
 80005e6:	2f01      	cmp	r7, #1
 80005e8:	dc00      	bgt.n	80005ec <__aeabi_dadd+0x314>
 80005ea:	e0f1      	b.n	80007d0 <__aeabi_dadd+0x4f8>
 80005ec:	4d39      	ldr	r5, [pc, #228]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80005ee:	42ab      	cmp	r3, r5
 80005f0:	d100      	bne.n	80005f4 <__aeabi_dadd+0x31c>
 80005f2:	e0b9      	b.n	8000768 <__aeabi_dadd+0x490>
 80005f4:	1885      	adds	r5, r0, r2
 80005f6:	000a      	movs	r2, r1
 80005f8:	4285      	cmp	r5, r0
 80005fa:	4189      	sbcs	r1, r1
 80005fc:	4442      	add	r2, r8
 80005fe:	4249      	negs	r1, r1
 8000600:	1851      	adds	r1, r2, r1
 8000602:	2207      	movs	r2, #7
 8000604:	07cf      	lsls	r7, r1, #31
 8000606:	086d      	lsrs	r5, r5, #1
 8000608:	432f      	orrs	r7, r5
 800060a:	0849      	lsrs	r1, r1, #1
 800060c:	403a      	ands	r2, r7
 800060e:	001d      	movs	r5, r3
 8000610:	e6c2      	b.n	8000398 <__aeabi_dadd+0xc0>
 8000612:	2207      	movs	r2, #7
 8000614:	4930      	ldr	r1, [pc, #192]	; (80006d8 <__aeabi_dadd+0x400>)
 8000616:	1aed      	subs	r5, r5, r3
 8000618:	4031      	ands	r1, r6
 800061a:	403a      	ands	r2, r7
 800061c:	e6bc      	b.n	8000398 <__aeabi_dadd+0xc0>
 800061e:	003e      	movs	r6, r7
 8000620:	3828      	subs	r0, #40	; 0x28
 8000622:	4086      	lsls	r6, r0
 8000624:	2700      	movs	r7, #0
 8000626:	e69f      	b.n	8000368 <__aeabi_dadd+0x90>
 8000628:	0038      	movs	r0, r7
 800062a:	f001 fbb9 	bl	8001da0 <__clzsi2>
 800062e:	3020      	adds	r0, #32
 8000630:	e68e      	b.n	8000350 <__aeabi_dadd+0x78>
 8000632:	4643      	mov	r3, r8
 8000634:	4313      	orrs	r3, r2
 8000636:	001f      	movs	r7, r3
 8000638:	1e7a      	subs	r2, r7, #1
 800063a:	4197      	sbcs	r7, r2
 800063c:	1bc7      	subs	r7, r0, r7
 800063e:	42b8      	cmp	r0, r7
 8000640:	4180      	sbcs	r0, r0
 8000642:	4240      	negs	r0, r0
 8000644:	1a09      	subs	r1, r1, r0
 8000646:	e678      	b.n	800033a <__aeabi_dadd+0x62>
 8000648:	000e      	movs	r6, r1
 800064a:	003b      	movs	r3, r7
 800064c:	4306      	orrs	r6, r0
 800064e:	4313      	orrs	r3, r2
 8000650:	2d00      	cmp	r5, #0
 8000652:	d161      	bne.n	8000718 <__aeabi_dadd+0x440>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d000      	beq.n	800065a <__aeabi_dadd+0x382>
 8000658:	e0f4      	b.n	8000844 <__aeabi_dadd+0x56c>
 800065a:	2b00      	cmp	r3, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_dadd+0x388>
 800065e:	e11b      	b.n	8000898 <__aeabi_dadd+0x5c0>
 8000660:	4664      	mov	r4, ip
 8000662:	0039      	movs	r1, r7
 8000664:	0010      	movs	r0, r2
 8000666:	e739      	b.n	80004dc <__aeabi_dadd+0x204>
 8000668:	4f1a      	ldr	r7, [pc, #104]	; (80006d4 <__aeabi_dadd+0x3fc>)
 800066a:	42bb      	cmp	r3, r7
 800066c:	d07a      	beq.n	8000764 <__aeabi_dadd+0x48c>
 800066e:	0033      	movs	r3, r6
 8000670:	e6ff      	b.n	8000472 <__aeabi_dadd+0x19a>
 8000672:	0030      	movs	r0, r6
 8000674:	3d1f      	subs	r5, #31
 8000676:	40e8      	lsrs	r0, r5
 8000678:	2b20      	cmp	r3, #32
 800067a:	d003      	beq.n	8000684 <__aeabi_dadd+0x3ac>
 800067c:	2140      	movs	r1, #64	; 0x40
 800067e:	1acb      	subs	r3, r1, r3
 8000680:	409e      	lsls	r6, r3
 8000682:	4337      	orrs	r7, r6
 8000684:	1e7b      	subs	r3, r7, #1
 8000686:	419f      	sbcs	r7, r3
 8000688:	2207      	movs	r2, #7
 800068a:	4307      	orrs	r7, r0
 800068c:	403a      	ands	r2, r7
 800068e:	2100      	movs	r1, #0
 8000690:	2500      	movs	r5, #0
 8000692:	e789      	b.n	80005a8 <__aeabi_dadd+0x2d0>
 8000694:	1a17      	subs	r7, r2, r0
 8000696:	4643      	mov	r3, r8
 8000698:	42ba      	cmp	r2, r7
 800069a:	41b6      	sbcs	r6, r6
 800069c:	1a59      	subs	r1, r3, r1
 800069e:	4276      	negs	r6, r6
 80006a0:	1b8e      	subs	r6, r1, r6
 80006a2:	4664      	mov	r4, ip
 80006a4:	e64e      	b.n	8000344 <__aeabi_dadd+0x6c>
 80006a6:	2b1f      	cmp	r3, #31
 80006a8:	dd00      	ble.n	80006ac <__aeabi_dadd+0x3d4>
 80006aa:	e0ad      	b.n	8000808 <__aeabi_dadd+0x530>
 80006ac:	2620      	movs	r6, #32
 80006ae:	4647      	mov	r7, r8
 80006b0:	1af6      	subs	r6, r6, r3
 80006b2:	40b7      	lsls	r7, r6
 80006b4:	46b9      	mov	r9, r7
 80006b6:	0017      	movs	r7, r2
 80006b8:	46b2      	mov	sl, r6
 80006ba:	40df      	lsrs	r7, r3
 80006bc:	464e      	mov	r6, r9
 80006be:	433e      	orrs	r6, r7
 80006c0:	0037      	movs	r7, r6
 80006c2:	4656      	mov	r6, sl
 80006c4:	40b2      	lsls	r2, r6
 80006c6:	1e56      	subs	r6, r2, #1
 80006c8:	41b2      	sbcs	r2, r6
 80006ca:	4317      	orrs	r7, r2
 80006cc:	4642      	mov	r2, r8
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	1889      	adds	r1, r1, r2
 80006d2:	e6ae      	b.n	8000432 <__aeabi_dadd+0x15a>
 80006d4:	000007ff 	.word	0x000007ff
 80006d8:	ff7fffff 	.word	0xff7fffff
 80006dc:	800fffff 	.word	0x800fffff
 80006e0:	2620      	movs	r6, #32
 80006e2:	4647      	mov	r7, r8
 80006e4:	1af6      	subs	r6, r6, r3
 80006e6:	40b7      	lsls	r7, r6
 80006e8:	46b9      	mov	r9, r7
 80006ea:	0017      	movs	r7, r2
 80006ec:	46b2      	mov	sl, r6
 80006ee:	40df      	lsrs	r7, r3
 80006f0:	464e      	mov	r6, r9
 80006f2:	433e      	orrs	r6, r7
 80006f4:	0037      	movs	r7, r6
 80006f6:	4656      	mov	r6, sl
 80006f8:	40b2      	lsls	r2, r6
 80006fa:	1e56      	subs	r6, r2, #1
 80006fc:	41b2      	sbcs	r2, r6
 80006fe:	4317      	orrs	r7, r2
 8000700:	4642      	mov	r2, r8
 8000702:	40da      	lsrs	r2, r3
 8000704:	1a89      	subs	r1, r1, r2
 8000706:	e799      	b.n	800063c <__aeabi_dadd+0x364>
 8000708:	4c7f      	ldr	r4, [pc, #508]	; (8000908 <__aeabi_dadd+0x630>)
 800070a:	42a6      	cmp	r6, r4
 800070c:	d05b      	beq.n	80007c6 <__aeabi_dadd+0x4ee>
 800070e:	2480      	movs	r4, #128	; 0x80
 8000710:	0424      	lsls	r4, r4, #16
 8000712:	425b      	negs	r3, r3
 8000714:	4321      	orrs	r1, r4
 8000716:	e727      	b.n	8000568 <__aeabi_dadd+0x290>
 8000718:	2e00      	cmp	r6, #0
 800071a:	d10c      	bne.n	8000736 <__aeabi_dadd+0x45e>
 800071c:	2b00      	cmp	r3, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x44a>
 8000720:	e0cb      	b.n	80008ba <__aeabi_dadd+0x5e2>
 8000722:	4664      	mov	r4, ip
 8000724:	0039      	movs	r1, r7
 8000726:	0010      	movs	r0, r2
 8000728:	4d77      	ldr	r5, [pc, #476]	; (8000908 <__aeabi_dadd+0x630>)
 800072a:	e6d7      	b.n	80004dc <__aeabi_dadd+0x204>
 800072c:	4f76      	ldr	r7, [pc, #472]	; (8000908 <__aeabi_dadd+0x630>)
 800072e:	42bb      	cmp	r3, r7
 8000730:	d018      	beq.n	8000764 <__aeabi_dadd+0x48c>
 8000732:	0033      	movs	r3, r6
 8000734:	e675      	b.n	8000422 <__aeabi_dadd+0x14a>
 8000736:	2b00      	cmp	r3, #0
 8000738:	d014      	beq.n	8000764 <__aeabi_dadd+0x48c>
 800073a:	074b      	lsls	r3, r1, #29
 800073c:	08c0      	lsrs	r0, r0, #3
 800073e:	4318      	orrs	r0, r3
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	08c9      	lsrs	r1, r1, #3
 8000744:	031b      	lsls	r3, r3, #12
 8000746:	4219      	tst	r1, r3
 8000748:	d007      	beq.n	800075a <__aeabi_dadd+0x482>
 800074a:	08fc      	lsrs	r4, r7, #3
 800074c:	421c      	tst	r4, r3
 800074e:	d104      	bne.n	800075a <__aeabi_dadd+0x482>
 8000750:	0779      	lsls	r1, r7, #29
 8000752:	08d0      	lsrs	r0, r2, #3
 8000754:	4308      	orrs	r0, r1
 8000756:	46e1      	mov	r9, ip
 8000758:	0021      	movs	r1, r4
 800075a:	464c      	mov	r4, r9
 800075c:	0f42      	lsrs	r2, r0, #29
 800075e:	00c9      	lsls	r1, r1, #3
 8000760:	4311      	orrs	r1, r2
 8000762:	00c0      	lsls	r0, r0, #3
 8000764:	4d68      	ldr	r5, [pc, #416]	; (8000908 <__aeabi_dadd+0x630>)
 8000766:	e6b9      	b.n	80004dc <__aeabi_dadd+0x204>
 8000768:	001d      	movs	r5, r3
 800076a:	2200      	movs	r2, #0
 800076c:	2300      	movs	r3, #0
 800076e:	e6c0      	b.n	80004f2 <__aeabi_dadd+0x21a>
 8000770:	2d00      	cmp	r5, #0
 8000772:	d15b      	bne.n	800082c <__aeabi_dadd+0x554>
 8000774:	000d      	movs	r5, r1
 8000776:	4305      	orrs	r5, r0
 8000778:	d100      	bne.n	800077c <__aeabi_dadd+0x4a4>
 800077a:	e6e2      	b.n	8000542 <__aeabi_dadd+0x26a>
 800077c:	1c5d      	adds	r5, r3, #1
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x4aa>
 8000780:	e0b0      	b.n	80008e4 <__aeabi_dadd+0x60c>
 8000782:	4d61      	ldr	r5, [pc, #388]	; (8000908 <__aeabi_dadd+0x630>)
 8000784:	42ae      	cmp	r6, r5
 8000786:	d01f      	beq.n	80007c8 <__aeabi_dadd+0x4f0>
 8000788:	43db      	mvns	r3, r3
 800078a:	2b38      	cmp	r3, #56	; 0x38
 800078c:	dc71      	bgt.n	8000872 <__aeabi_dadd+0x59a>
 800078e:	2b1f      	cmp	r3, #31
 8000790:	dd00      	ble.n	8000794 <__aeabi_dadd+0x4bc>
 8000792:	e096      	b.n	80008c2 <__aeabi_dadd+0x5ea>
 8000794:	2520      	movs	r5, #32
 8000796:	000f      	movs	r7, r1
 8000798:	1aed      	subs	r5, r5, r3
 800079a:	40af      	lsls	r7, r5
 800079c:	46b9      	mov	r9, r7
 800079e:	0007      	movs	r7, r0
 80007a0:	46aa      	mov	sl, r5
 80007a2:	40df      	lsrs	r7, r3
 80007a4:	464d      	mov	r5, r9
 80007a6:	433d      	orrs	r5, r7
 80007a8:	002f      	movs	r7, r5
 80007aa:	4655      	mov	r5, sl
 80007ac:	40a8      	lsls	r0, r5
 80007ae:	40d9      	lsrs	r1, r3
 80007b0:	1e45      	subs	r5, r0, #1
 80007b2:	41a8      	sbcs	r0, r5
 80007b4:	4488      	add	r8, r1
 80007b6:	4307      	orrs	r7, r0
 80007b8:	18bf      	adds	r7, r7, r2
 80007ba:	4297      	cmp	r7, r2
 80007bc:	4192      	sbcs	r2, r2
 80007be:	4251      	negs	r1, r2
 80007c0:	4441      	add	r1, r8
 80007c2:	0035      	movs	r5, r6
 80007c4:	e63a      	b.n	800043c <__aeabi_dadd+0x164>
 80007c6:	4664      	mov	r4, ip
 80007c8:	0035      	movs	r5, r6
 80007ca:	4641      	mov	r1, r8
 80007cc:	0010      	movs	r0, r2
 80007ce:	e685      	b.n	80004dc <__aeabi_dadd+0x204>
 80007d0:	000b      	movs	r3, r1
 80007d2:	4303      	orrs	r3, r0
 80007d4:	2d00      	cmp	r5, #0
 80007d6:	d000      	beq.n	80007da <__aeabi_dadd+0x502>
 80007d8:	e663      	b.n	80004a2 <__aeabi_dadd+0x1ca>
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f5      	beq.n	80007ca <__aeabi_dadd+0x4f2>
 80007de:	4643      	mov	r3, r8
 80007e0:	4313      	orrs	r3, r2
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x50e>
 80007e4:	e67a      	b.n	80004dc <__aeabi_dadd+0x204>
 80007e6:	1887      	adds	r7, r0, r2
 80007e8:	4287      	cmp	r7, r0
 80007ea:	4180      	sbcs	r0, r0
 80007ec:	2207      	movs	r2, #7
 80007ee:	4441      	add	r1, r8
 80007f0:	4240      	negs	r0, r0
 80007f2:	1809      	adds	r1, r1, r0
 80007f4:	403a      	ands	r2, r7
 80007f6:	020b      	lsls	r3, r1, #8
 80007f8:	d400      	bmi.n	80007fc <__aeabi_dadd+0x524>
 80007fa:	e6d5      	b.n	80005a8 <__aeabi_dadd+0x2d0>
 80007fc:	4b43      	ldr	r3, [pc, #268]	; (800090c <__aeabi_dadd+0x634>)
 80007fe:	3501      	adds	r5, #1
 8000800:	4019      	ands	r1, r3
 8000802:	e5c9      	b.n	8000398 <__aeabi_dadd+0xc0>
 8000804:	0038      	movs	r0, r7
 8000806:	e669      	b.n	80004dc <__aeabi_dadd+0x204>
 8000808:	001e      	movs	r6, r3
 800080a:	4647      	mov	r7, r8
 800080c:	3e20      	subs	r6, #32
 800080e:	40f7      	lsrs	r7, r6
 8000810:	46bc      	mov	ip, r7
 8000812:	2b20      	cmp	r3, #32
 8000814:	d004      	beq.n	8000820 <__aeabi_dadd+0x548>
 8000816:	2640      	movs	r6, #64	; 0x40
 8000818:	1af3      	subs	r3, r6, r3
 800081a:	4646      	mov	r6, r8
 800081c:	409e      	lsls	r6, r3
 800081e:	4332      	orrs	r2, r6
 8000820:	0017      	movs	r7, r2
 8000822:	4663      	mov	r3, ip
 8000824:	1e7a      	subs	r2, r7, #1
 8000826:	4197      	sbcs	r7, r2
 8000828:	431f      	orrs	r7, r3
 800082a:	e602      	b.n	8000432 <__aeabi_dadd+0x15a>
 800082c:	4d36      	ldr	r5, [pc, #216]	; (8000908 <__aeabi_dadd+0x630>)
 800082e:	42ae      	cmp	r6, r5
 8000830:	d0ca      	beq.n	80007c8 <__aeabi_dadd+0x4f0>
 8000832:	2580      	movs	r5, #128	; 0x80
 8000834:	042d      	lsls	r5, r5, #16
 8000836:	425b      	negs	r3, r3
 8000838:	4329      	orrs	r1, r5
 800083a:	e7a6      	b.n	800078a <__aeabi_dadd+0x4b2>
 800083c:	4308      	orrs	r0, r1
 800083e:	1e41      	subs	r1, r0, #1
 8000840:	4188      	sbcs	r0, r1
 8000842:	e6a6      	b.n	8000592 <__aeabi_dadd+0x2ba>
 8000844:	2b00      	cmp	r3, #0
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x572>
 8000848:	e648      	b.n	80004dc <__aeabi_dadd+0x204>
 800084a:	1a87      	subs	r7, r0, r2
 800084c:	4643      	mov	r3, r8
 800084e:	42b8      	cmp	r0, r7
 8000850:	41b6      	sbcs	r6, r6
 8000852:	1acb      	subs	r3, r1, r3
 8000854:	4276      	negs	r6, r6
 8000856:	1b9e      	subs	r6, r3, r6
 8000858:	0233      	lsls	r3, r6, #8
 800085a:	d54b      	bpl.n	80008f4 <__aeabi_dadd+0x61c>
 800085c:	1a17      	subs	r7, r2, r0
 800085e:	4643      	mov	r3, r8
 8000860:	42ba      	cmp	r2, r7
 8000862:	4192      	sbcs	r2, r2
 8000864:	1a59      	subs	r1, r3, r1
 8000866:	4252      	negs	r2, r2
 8000868:	1a89      	subs	r1, r1, r2
 800086a:	2207      	movs	r2, #7
 800086c:	4664      	mov	r4, ip
 800086e:	403a      	ands	r2, r7
 8000870:	e592      	b.n	8000398 <__aeabi_dadd+0xc0>
 8000872:	4301      	orrs	r1, r0
 8000874:	000f      	movs	r7, r1
 8000876:	1e79      	subs	r1, r7, #1
 8000878:	418f      	sbcs	r7, r1
 800087a:	e79d      	b.n	80007b8 <__aeabi_dadd+0x4e0>
 800087c:	001c      	movs	r4, r3
 800087e:	000f      	movs	r7, r1
 8000880:	3c20      	subs	r4, #32
 8000882:	40e7      	lsrs	r7, r4
 8000884:	2b20      	cmp	r3, #32
 8000886:	d003      	beq.n	8000890 <__aeabi_dadd+0x5b8>
 8000888:	2440      	movs	r4, #64	; 0x40
 800088a:	1ae3      	subs	r3, r4, r3
 800088c:	4099      	lsls	r1, r3
 800088e:	4308      	orrs	r0, r1
 8000890:	1e41      	subs	r1, r0, #1
 8000892:	4188      	sbcs	r0, r1
 8000894:	4338      	orrs	r0, r7
 8000896:	e67c      	b.n	8000592 <__aeabi_dadd+0x2ba>
 8000898:	2200      	movs	r2, #0
 800089a:	2400      	movs	r4, #0
 800089c:	e625      	b.n	80004ea <__aeabi_dadd+0x212>
 800089e:	1a17      	subs	r7, r2, r0
 80008a0:	4643      	mov	r3, r8
 80008a2:	42ba      	cmp	r2, r7
 80008a4:	4192      	sbcs	r2, r2
 80008a6:	1a59      	subs	r1, r3, r1
 80008a8:	4252      	negs	r2, r2
 80008aa:	1a89      	subs	r1, r1, r2
 80008ac:	4664      	mov	r4, ip
 80008ae:	0035      	movs	r5, r6
 80008b0:	e543      	b.n	800033a <__aeabi_dadd+0x62>
 80008b2:	4641      	mov	r1, r8
 80008b4:	0010      	movs	r0, r2
 80008b6:	4d14      	ldr	r5, [pc, #80]	; (8000908 <__aeabi_dadd+0x630>)
 80008b8:	e610      	b.n	80004dc <__aeabi_dadd+0x204>
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	2400      	movs	r4, #0
 80008be:	0312      	lsls	r2, r2, #12
 80008c0:	e680      	b.n	80005c4 <__aeabi_dadd+0x2ec>
 80008c2:	001d      	movs	r5, r3
 80008c4:	000f      	movs	r7, r1
 80008c6:	3d20      	subs	r5, #32
 80008c8:	40ef      	lsrs	r7, r5
 80008ca:	46bc      	mov	ip, r7
 80008cc:	2b20      	cmp	r3, #32
 80008ce:	d003      	beq.n	80008d8 <__aeabi_dadd+0x600>
 80008d0:	2540      	movs	r5, #64	; 0x40
 80008d2:	1aeb      	subs	r3, r5, r3
 80008d4:	4099      	lsls	r1, r3
 80008d6:	4308      	orrs	r0, r1
 80008d8:	0007      	movs	r7, r0
 80008da:	4663      	mov	r3, ip
 80008dc:	1e78      	subs	r0, r7, #1
 80008de:	4187      	sbcs	r7, r0
 80008e0:	431f      	orrs	r7, r3
 80008e2:	e769      	b.n	80007b8 <__aeabi_dadd+0x4e0>
 80008e4:	1887      	adds	r7, r0, r2
 80008e6:	4297      	cmp	r7, r2
 80008e8:	419b      	sbcs	r3, r3
 80008ea:	4441      	add	r1, r8
 80008ec:	425b      	negs	r3, r3
 80008ee:	18c9      	adds	r1, r1, r3
 80008f0:	0035      	movs	r5, r6
 80008f2:	e5a3      	b.n	800043c <__aeabi_dadd+0x164>
 80008f4:	003b      	movs	r3, r7
 80008f6:	4333      	orrs	r3, r6
 80008f8:	d0ce      	beq.n	8000898 <__aeabi_dadd+0x5c0>
 80008fa:	2207      	movs	r2, #7
 80008fc:	0031      	movs	r1, r6
 80008fe:	403a      	ands	r2, r7
 8000900:	e652      	b.n	80005a8 <__aeabi_dadd+0x2d0>
 8000902:	2300      	movs	r3, #0
 8000904:	001a      	movs	r2, r3
 8000906:	e5f4      	b.n	80004f2 <__aeabi_dadd+0x21a>
 8000908:	000007ff 	.word	0x000007ff
 800090c:	ff7fffff 	.word	0xff7fffff

08000910 <__aeabi_ddiv>:
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	4657      	mov	r7, sl
 8000914:	46de      	mov	lr, fp
 8000916:	464e      	mov	r6, r9
 8000918:	4645      	mov	r5, r8
 800091a:	b5e0      	push	{r5, r6, r7, lr}
 800091c:	4683      	mov	fp, r0
 800091e:	0007      	movs	r7, r0
 8000920:	030e      	lsls	r6, r1, #12
 8000922:	0048      	lsls	r0, r1, #1
 8000924:	b085      	sub	sp, #20
 8000926:	4692      	mov	sl, r2
 8000928:	001c      	movs	r4, r3
 800092a:	0b36      	lsrs	r6, r6, #12
 800092c:	0d40      	lsrs	r0, r0, #21
 800092e:	0fcd      	lsrs	r5, r1, #31
 8000930:	2800      	cmp	r0, #0
 8000932:	d100      	bne.n	8000936 <__aeabi_ddiv+0x26>
 8000934:	e09d      	b.n	8000a72 <__aeabi_ddiv+0x162>
 8000936:	4b95      	ldr	r3, [pc, #596]	; (8000b8c <__aeabi_ddiv+0x27c>)
 8000938:	4298      	cmp	r0, r3
 800093a:	d039      	beq.n	80009b0 <__aeabi_ddiv+0xa0>
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	00f6      	lsls	r6, r6, #3
 8000940:	041b      	lsls	r3, r3, #16
 8000942:	431e      	orrs	r6, r3
 8000944:	4a92      	ldr	r2, [pc, #584]	; (8000b90 <__aeabi_ddiv+0x280>)
 8000946:	0f7b      	lsrs	r3, r7, #29
 8000948:	4333      	orrs	r3, r6
 800094a:	4699      	mov	r9, r3
 800094c:	4694      	mov	ip, r2
 800094e:	0003      	movs	r3, r0
 8000950:	4463      	add	r3, ip
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2300      	movs	r3, #0
 8000956:	2600      	movs	r6, #0
 8000958:	00ff      	lsls	r7, r7, #3
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	0323      	lsls	r3, r4, #12
 800095e:	0b1b      	lsrs	r3, r3, #12
 8000960:	4698      	mov	r8, r3
 8000962:	0063      	lsls	r3, r4, #1
 8000964:	0fe4      	lsrs	r4, r4, #31
 8000966:	4652      	mov	r2, sl
 8000968:	0d5b      	lsrs	r3, r3, #21
 800096a:	9401      	str	r4, [sp, #4]
 800096c:	d100      	bne.n	8000970 <__aeabi_ddiv+0x60>
 800096e:	e0b3      	b.n	8000ad8 <__aeabi_ddiv+0x1c8>
 8000970:	4986      	ldr	r1, [pc, #536]	; (8000b8c <__aeabi_ddiv+0x27c>)
 8000972:	428b      	cmp	r3, r1
 8000974:	d100      	bne.n	8000978 <__aeabi_ddiv+0x68>
 8000976:	e09e      	b.n	8000ab6 <__aeabi_ddiv+0x1a6>
 8000978:	4642      	mov	r2, r8
 800097a:	00d1      	lsls	r1, r2, #3
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	0412      	lsls	r2, r2, #16
 8000980:	430a      	orrs	r2, r1
 8000982:	4651      	mov	r1, sl
 8000984:	0f49      	lsrs	r1, r1, #29
 8000986:	4311      	orrs	r1, r2
 8000988:	468b      	mov	fp, r1
 800098a:	4981      	ldr	r1, [pc, #516]	; (8000b90 <__aeabi_ddiv+0x280>)
 800098c:	4652      	mov	r2, sl
 800098e:	468c      	mov	ip, r1
 8000990:	9900      	ldr	r1, [sp, #0]
 8000992:	4463      	add	r3, ip
 8000994:	1acb      	subs	r3, r1, r3
 8000996:	2100      	movs	r1, #0
 8000998:	00d2      	lsls	r2, r2, #3
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	002b      	movs	r3, r5
 800099e:	4063      	eors	r3, r4
 80009a0:	469a      	mov	sl, r3
 80009a2:	2e0f      	cmp	r6, #15
 80009a4:	d900      	bls.n	80009a8 <__aeabi_ddiv+0x98>
 80009a6:	e105      	b.n	8000bb4 <__aeabi_ddiv+0x2a4>
 80009a8:	4b7a      	ldr	r3, [pc, #488]	; (8000b94 <__aeabi_ddiv+0x284>)
 80009aa:	00b6      	lsls	r6, r6, #2
 80009ac:	599b      	ldr	r3, [r3, r6]
 80009ae:	469f      	mov	pc, r3
 80009b0:	465b      	mov	r3, fp
 80009b2:	4333      	orrs	r3, r6
 80009b4:	4699      	mov	r9, r3
 80009b6:	d000      	beq.n	80009ba <__aeabi_ddiv+0xaa>
 80009b8:	e0b8      	b.n	8000b2c <__aeabi_ddiv+0x21c>
 80009ba:	2302      	movs	r3, #2
 80009bc:	2608      	movs	r6, #8
 80009be:	2700      	movs	r7, #0
 80009c0:	9000      	str	r0, [sp, #0]
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	e7ca      	b.n	800095c <__aeabi_ddiv+0x4c>
 80009c6:	46cb      	mov	fp, r9
 80009c8:	003a      	movs	r2, r7
 80009ca:	9902      	ldr	r1, [sp, #8]
 80009cc:	9501      	str	r5, [sp, #4]
 80009ce:	9b01      	ldr	r3, [sp, #4]
 80009d0:	469a      	mov	sl, r3
 80009d2:	2902      	cmp	r1, #2
 80009d4:	d027      	beq.n	8000a26 <__aeabi_ddiv+0x116>
 80009d6:	2903      	cmp	r1, #3
 80009d8:	d100      	bne.n	80009dc <__aeabi_ddiv+0xcc>
 80009da:	e280      	b.n	8000ede <__aeabi_ddiv+0x5ce>
 80009dc:	2901      	cmp	r1, #1
 80009de:	d044      	beq.n	8000a6a <__aeabi_ddiv+0x15a>
 80009e0:	496d      	ldr	r1, [pc, #436]	; (8000b98 <__aeabi_ddiv+0x288>)
 80009e2:	9b00      	ldr	r3, [sp, #0]
 80009e4:	468c      	mov	ip, r1
 80009e6:	4463      	add	r3, ip
 80009e8:	001c      	movs	r4, r3
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	dd38      	ble.n	8000a60 <__aeabi_ddiv+0x150>
 80009ee:	0753      	lsls	r3, r2, #29
 80009f0:	d000      	beq.n	80009f4 <__aeabi_ddiv+0xe4>
 80009f2:	e213      	b.n	8000e1c <__aeabi_ddiv+0x50c>
 80009f4:	08d2      	lsrs	r2, r2, #3
 80009f6:	465b      	mov	r3, fp
 80009f8:	01db      	lsls	r3, r3, #7
 80009fa:	d509      	bpl.n	8000a10 <__aeabi_ddiv+0x100>
 80009fc:	4659      	mov	r1, fp
 80009fe:	4b67      	ldr	r3, [pc, #412]	; (8000b9c <__aeabi_ddiv+0x28c>)
 8000a00:	4019      	ands	r1, r3
 8000a02:	468b      	mov	fp, r1
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	00c9      	lsls	r1, r1, #3
 8000a08:	468c      	mov	ip, r1
 8000a0a:	9b00      	ldr	r3, [sp, #0]
 8000a0c:	4463      	add	r3, ip
 8000a0e:	001c      	movs	r4, r3
 8000a10:	4b63      	ldr	r3, [pc, #396]	; (8000ba0 <__aeabi_ddiv+0x290>)
 8000a12:	429c      	cmp	r4, r3
 8000a14:	dc07      	bgt.n	8000a26 <__aeabi_ddiv+0x116>
 8000a16:	465b      	mov	r3, fp
 8000a18:	0564      	lsls	r4, r4, #21
 8000a1a:	075f      	lsls	r7, r3, #29
 8000a1c:	025b      	lsls	r3, r3, #9
 8000a1e:	4317      	orrs	r7, r2
 8000a20:	0b1b      	lsrs	r3, r3, #12
 8000a22:	0d62      	lsrs	r2, r4, #21
 8000a24:	e002      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000a26:	2300      	movs	r3, #0
 8000a28:	2700      	movs	r7, #0
 8000a2a:	4a58      	ldr	r2, [pc, #352]	; (8000b8c <__aeabi_ddiv+0x27c>)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	031b      	lsls	r3, r3, #12
 8000a30:	0b1c      	lsrs	r4, r3, #12
 8000a32:	0d0b      	lsrs	r3, r1, #20
 8000a34:	051b      	lsls	r3, r3, #20
 8000a36:	4323      	orrs	r3, r4
 8000a38:	0514      	lsls	r4, r2, #20
 8000a3a:	4a5a      	ldr	r2, [pc, #360]	; (8000ba4 <__aeabi_ddiv+0x294>)
 8000a3c:	0038      	movs	r0, r7
 8000a3e:	4013      	ands	r3, r2
 8000a40:	431c      	orrs	r4, r3
 8000a42:	4653      	mov	r3, sl
 8000a44:	0064      	lsls	r4, r4, #1
 8000a46:	07db      	lsls	r3, r3, #31
 8000a48:	0864      	lsrs	r4, r4, #1
 8000a4a:	431c      	orrs	r4, r3
 8000a4c:	0021      	movs	r1, r4
 8000a4e:	b005      	add	sp, #20
 8000a50:	bc3c      	pop	{r2, r3, r4, r5}
 8000a52:	4690      	mov	r8, r2
 8000a54:	4699      	mov	r9, r3
 8000a56:	46a2      	mov	sl, r4
 8000a58:	46ab      	mov	fp, r5
 8000a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4252      	negs	r2, r2
 8000a60:	2301      	movs	r3, #1
 8000a62:	1b1b      	subs	r3, r3, r4
 8000a64:	2b38      	cmp	r3, #56	; 0x38
 8000a66:	dc00      	bgt.n	8000a6a <__aeabi_ddiv+0x15a>
 8000a68:	e1ad      	b.n	8000dc6 <__aeabi_ddiv+0x4b6>
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2700      	movs	r7, #0
 8000a70:	e7dc      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000a72:	465b      	mov	r3, fp
 8000a74:	4333      	orrs	r3, r6
 8000a76:	4699      	mov	r9, r3
 8000a78:	d05e      	beq.n	8000b38 <__aeabi_ddiv+0x228>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_ddiv+0x170>
 8000a7e:	e18a      	b.n	8000d96 <__aeabi_ddiv+0x486>
 8000a80:	0030      	movs	r0, r6
 8000a82:	f001 f98d 	bl	8001da0 <__clzsi2>
 8000a86:	0003      	movs	r3, r0
 8000a88:	3b0b      	subs	r3, #11
 8000a8a:	2b1c      	cmp	r3, #28
 8000a8c:	dd00      	ble.n	8000a90 <__aeabi_ddiv+0x180>
 8000a8e:	e17b      	b.n	8000d88 <__aeabi_ddiv+0x478>
 8000a90:	221d      	movs	r2, #29
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	465a      	mov	r2, fp
 8000a96:	0001      	movs	r1, r0
 8000a98:	40da      	lsrs	r2, r3
 8000a9a:	3908      	subs	r1, #8
 8000a9c:	408e      	lsls	r6, r1
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	465f      	mov	r7, fp
 8000aa2:	4333      	orrs	r3, r6
 8000aa4:	4699      	mov	r9, r3
 8000aa6:	408f      	lsls	r7, r1
 8000aa8:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <__aeabi_ddiv+0x298>)
 8000aaa:	2600      	movs	r6, #0
 8000aac:	1a1b      	subs	r3, r3, r0
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	9302      	str	r3, [sp, #8]
 8000ab4:	e752      	b.n	800095c <__aeabi_ddiv+0x4c>
 8000ab6:	4641      	mov	r1, r8
 8000ab8:	4653      	mov	r3, sl
 8000aba:	430b      	orrs	r3, r1
 8000abc:	493b      	ldr	r1, [pc, #236]	; (8000bac <__aeabi_ddiv+0x29c>)
 8000abe:	469b      	mov	fp, r3
 8000ac0:	468c      	mov	ip, r1
 8000ac2:	9b00      	ldr	r3, [sp, #0]
 8000ac4:	4463      	add	r3, ip
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	465b      	mov	r3, fp
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d13b      	bne.n	8000b46 <__aeabi_ddiv+0x236>
 8000ace:	2302      	movs	r3, #2
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	431e      	orrs	r6, r3
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	e761      	b.n	800099c <__aeabi_ddiv+0x8c>
 8000ad8:	4643      	mov	r3, r8
 8000ada:	4313      	orrs	r3, r2
 8000adc:	469b      	mov	fp, r3
 8000ade:	d037      	beq.n	8000b50 <__aeabi_ddiv+0x240>
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_ddiv+0x1d8>
 8000ae6:	e162      	b.n	8000dae <__aeabi_ddiv+0x49e>
 8000ae8:	4640      	mov	r0, r8
 8000aea:	f001 f959 	bl	8001da0 <__clzsi2>
 8000aee:	0003      	movs	r3, r0
 8000af0:	3b0b      	subs	r3, #11
 8000af2:	2b1c      	cmp	r3, #28
 8000af4:	dd00      	ble.n	8000af8 <__aeabi_ddiv+0x1e8>
 8000af6:	e153      	b.n	8000da0 <__aeabi_ddiv+0x490>
 8000af8:	0002      	movs	r2, r0
 8000afa:	4641      	mov	r1, r8
 8000afc:	3a08      	subs	r2, #8
 8000afe:	4091      	lsls	r1, r2
 8000b00:	4688      	mov	r8, r1
 8000b02:	211d      	movs	r1, #29
 8000b04:	1acb      	subs	r3, r1, r3
 8000b06:	4651      	mov	r1, sl
 8000b08:	40d9      	lsrs	r1, r3
 8000b0a:	000b      	movs	r3, r1
 8000b0c:	4641      	mov	r1, r8
 8000b0e:	430b      	orrs	r3, r1
 8000b10:	469b      	mov	fp, r3
 8000b12:	4653      	mov	r3, sl
 8000b14:	4093      	lsls	r3, r2
 8000b16:	001a      	movs	r2, r3
 8000b18:	9b00      	ldr	r3, [sp, #0]
 8000b1a:	4925      	ldr	r1, [pc, #148]	; (8000bb0 <__aeabi_ddiv+0x2a0>)
 8000b1c:	469c      	mov	ip, r3
 8000b1e:	4460      	add	r0, ip
 8000b20:	0003      	movs	r3, r0
 8000b22:	468c      	mov	ip, r1
 8000b24:	4463      	add	r3, ip
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2100      	movs	r1, #0
 8000b2a:	e737      	b.n	800099c <__aeabi_ddiv+0x8c>
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	46b1      	mov	r9, r6
 8000b30:	9000      	str	r0, [sp, #0]
 8000b32:	260c      	movs	r6, #12
 8000b34:	9302      	str	r3, [sp, #8]
 8000b36:	e711      	b.n	800095c <__aeabi_ddiv+0x4c>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	2604      	movs	r6, #4
 8000b40:	2700      	movs	r7, #0
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	e70a      	b.n	800095c <__aeabi_ddiv+0x4c>
 8000b46:	2303      	movs	r3, #3
 8000b48:	46c3      	mov	fp, r8
 8000b4a:	431e      	orrs	r6, r3
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	e725      	b.n	800099c <__aeabi_ddiv+0x8c>
 8000b50:	3301      	adds	r3, #1
 8000b52:	431e      	orrs	r6, r3
 8000b54:	2200      	movs	r2, #0
 8000b56:	2101      	movs	r1, #1
 8000b58:	e720      	b.n	800099c <__aeabi_ddiv+0x8c>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	2700      	movs	r7, #0
 8000b62:	031b      	lsls	r3, r3, #12
 8000b64:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <__aeabi_ddiv+0x27c>)
 8000b66:	e761      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	4649      	mov	r1, r9
 8000b6c:	031b      	lsls	r3, r3, #12
 8000b6e:	4219      	tst	r1, r3
 8000b70:	d100      	bne.n	8000b74 <__aeabi_ddiv+0x264>
 8000b72:	e0e2      	b.n	8000d3a <__aeabi_ddiv+0x42a>
 8000b74:	4659      	mov	r1, fp
 8000b76:	4219      	tst	r1, r3
 8000b78:	d000      	beq.n	8000b7c <__aeabi_ddiv+0x26c>
 8000b7a:	e0de      	b.n	8000d3a <__aeabi_ddiv+0x42a>
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	031b      	lsls	r3, r3, #12
 8000b80:	0017      	movs	r7, r2
 8000b82:	0b1b      	lsrs	r3, r3, #12
 8000b84:	46a2      	mov	sl, r4
 8000b86:	4a01      	ldr	r2, [pc, #4]	; (8000b8c <__aeabi_ddiv+0x27c>)
 8000b88:	e750      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	000007ff 	.word	0x000007ff
 8000b90:	fffffc01 	.word	0xfffffc01
 8000b94:	08005288 	.word	0x08005288
 8000b98:	000003ff 	.word	0x000003ff
 8000b9c:	feffffff 	.word	0xfeffffff
 8000ba0:	000007fe 	.word	0x000007fe
 8000ba4:	800fffff 	.word	0x800fffff
 8000ba8:	fffffc0d 	.word	0xfffffc0d
 8000bac:	fffff801 	.word	0xfffff801
 8000bb0:	000003f3 	.word	0x000003f3
 8000bb4:	45d9      	cmp	r9, fp
 8000bb6:	d900      	bls.n	8000bba <__aeabi_ddiv+0x2aa>
 8000bb8:	e0cb      	b.n	8000d52 <__aeabi_ddiv+0x442>
 8000bba:	d100      	bne.n	8000bbe <__aeabi_ddiv+0x2ae>
 8000bbc:	e0c6      	b.n	8000d4c <__aeabi_ddiv+0x43c>
 8000bbe:	003c      	movs	r4, r7
 8000bc0:	4648      	mov	r0, r9
 8000bc2:	2700      	movs	r7, #0
 8000bc4:	9b00      	ldr	r3, [sp, #0]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	465b      	mov	r3, fp
 8000bcc:	0e16      	lsrs	r6, r2, #24
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	431e      	orrs	r6, r3
 8000bd2:	0213      	lsls	r3, r2, #8
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	0433      	lsls	r3, r6, #16
 8000bd8:	0c1b      	lsrs	r3, r3, #16
 8000bda:	4699      	mov	r9, r3
 8000bdc:	0c31      	lsrs	r1, r6, #16
 8000bde:	9101      	str	r1, [sp, #4]
 8000be0:	f7ff fb18 	bl	8000214 <__aeabi_uidivmod>
 8000be4:	464a      	mov	r2, r9
 8000be6:	4342      	muls	r2, r0
 8000be8:	040b      	lsls	r3, r1, #16
 8000bea:	0c21      	lsrs	r1, r4, #16
 8000bec:	0005      	movs	r5, r0
 8000bee:	4319      	orrs	r1, r3
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	d907      	bls.n	8000c04 <__aeabi_ddiv+0x2f4>
 8000bf4:	1989      	adds	r1, r1, r6
 8000bf6:	3d01      	subs	r5, #1
 8000bf8:	428e      	cmp	r6, r1
 8000bfa:	d803      	bhi.n	8000c04 <__aeabi_ddiv+0x2f4>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	d901      	bls.n	8000c04 <__aeabi_ddiv+0x2f4>
 8000c00:	1e85      	subs	r5, r0, #2
 8000c02:	1989      	adds	r1, r1, r6
 8000c04:	1a88      	subs	r0, r1, r2
 8000c06:	9901      	ldr	r1, [sp, #4]
 8000c08:	f7ff fb04 	bl	8000214 <__aeabi_uidivmod>
 8000c0c:	0409      	lsls	r1, r1, #16
 8000c0e:	468c      	mov	ip, r1
 8000c10:	464a      	mov	r2, r9
 8000c12:	0421      	lsls	r1, r4, #16
 8000c14:	4664      	mov	r4, ip
 8000c16:	4342      	muls	r2, r0
 8000c18:	0c09      	lsrs	r1, r1, #16
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	4321      	orrs	r1, r4
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	d904      	bls.n	8000c2c <__aeabi_ddiv+0x31c>
 8000c22:	1989      	adds	r1, r1, r6
 8000c24:	3b01      	subs	r3, #1
 8000c26:	428e      	cmp	r6, r1
 8000c28:	d800      	bhi.n	8000c2c <__aeabi_ddiv+0x31c>
 8000c2a:	e0f1      	b.n	8000e10 <__aeabi_ddiv+0x500>
 8000c2c:	042d      	lsls	r5, r5, #16
 8000c2e:	431d      	orrs	r5, r3
 8000c30:	46ab      	mov	fp, r5
 8000c32:	4643      	mov	r3, r8
 8000c34:	1a89      	subs	r1, r1, r2
 8000c36:	4642      	mov	r2, r8
 8000c38:	0c28      	lsrs	r0, r5, #16
 8000c3a:	0412      	lsls	r2, r2, #16
 8000c3c:	0c1d      	lsrs	r5, r3, #16
 8000c3e:	465b      	mov	r3, fp
 8000c40:	0c14      	lsrs	r4, r2, #16
 8000c42:	0022      	movs	r2, r4
 8000c44:	041b      	lsls	r3, r3, #16
 8000c46:	0c1b      	lsrs	r3, r3, #16
 8000c48:	435a      	muls	r2, r3
 8000c4a:	9403      	str	r4, [sp, #12]
 8000c4c:	436b      	muls	r3, r5
 8000c4e:	4344      	muls	r4, r0
 8000c50:	9502      	str	r5, [sp, #8]
 8000c52:	4368      	muls	r0, r5
 8000c54:	191b      	adds	r3, r3, r4
 8000c56:	0c15      	lsrs	r5, r2, #16
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	429c      	cmp	r4, r3
 8000c5c:	d903      	bls.n	8000c66 <__aeabi_ddiv+0x356>
 8000c5e:	2480      	movs	r4, #128	; 0x80
 8000c60:	0264      	lsls	r4, r4, #9
 8000c62:	46a4      	mov	ip, r4
 8000c64:	4460      	add	r0, ip
 8000c66:	0c1c      	lsrs	r4, r3, #16
 8000c68:	0415      	lsls	r5, r2, #16
 8000c6a:	041b      	lsls	r3, r3, #16
 8000c6c:	0c2d      	lsrs	r5, r5, #16
 8000c6e:	1820      	adds	r0, r4, r0
 8000c70:	195d      	adds	r5, r3, r5
 8000c72:	4281      	cmp	r1, r0
 8000c74:	d377      	bcc.n	8000d66 <__aeabi_ddiv+0x456>
 8000c76:	d073      	beq.n	8000d60 <__aeabi_ddiv+0x450>
 8000c78:	1a0c      	subs	r4, r1, r0
 8000c7a:	4aa2      	ldr	r2, [pc, #648]	; (8000f04 <__aeabi_ddiv+0x5f4>)
 8000c7c:	1b7d      	subs	r5, r7, r5
 8000c7e:	42af      	cmp	r7, r5
 8000c80:	41bf      	sbcs	r7, r7
 8000c82:	4694      	mov	ip, r2
 8000c84:	9b00      	ldr	r3, [sp, #0]
 8000c86:	427f      	negs	r7, r7
 8000c88:	4463      	add	r3, ip
 8000c8a:	1be0      	subs	r0, r4, r7
 8000c8c:	001c      	movs	r4, r3
 8000c8e:	4286      	cmp	r6, r0
 8000c90:	d100      	bne.n	8000c94 <__aeabi_ddiv+0x384>
 8000c92:	e0db      	b.n	8000e4c <__aeabi_ddiv+0x53c>
 8000c94:	9901      	ldr	r1, [sp, #4]
 8000c96:	f7ff fabd 	bl	8000214 <__aeabi_uidivmod>
 8000c9a:	464a      	mov	r2, r9
 8000c9c:	4342      	muls	r2, r0
 8000c9e:	040b      	lsls	r3, r1, #16
 8000ca0:	0c29      	lsrs	r1, r5, #16
 8000ca2:	0007      	movs	r7, r0
 8000ca4:	4319      	orrs	r1, r3
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	d907      	bls.n	8000cba <__aeabi_ddiv+0x3aa>
 8000caa:	1989      	adds	r1, r1, r6
 8000cac:	3f01      	subs	r7, #1
 8000cae:	428e      	cmp	r6, r1
 8000cb0:	d803      	bhi.n	8000cba <__aeabi_ddiv+0x3aa>
 8000cb2:	428a      	cmp	r2, r1
 8000cb4:	d901      	bls.n	8000cba <__aeabi_ddiv+0x3aa>
 8000cb6:	1e87      	subs	r7, r0, #2
 8000cb8:	1989      	adds	r1, r1, r6
 8000cba:	1a88      	subs	r0, r1, r2
 8000cbc:	9901      	ldr	r1, [sp, #4]
 8000cbe:	f7ff faa9 	bl	8000214 <__aeabi_uidivmod>
 8000cc2:	0409      	lsls	r1, r1, #16
 8000cc4:	464a      	mov	r2, r9
 8000cc6:	4689      	mov	r9, r1
 8000cc8:	0429      	lsls	r1, r5, #16
 8000cca:	464d      	mov	r5, r9
 8000ccc:	4342      	muls	r2, r0
 8000cce:	0c09      	lsrs	r1, r1, #16
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	4329      	orrs	r1, r5
 8000cd4:	428a      	cmp	r2, r1
 8000cd6:	d907      	bls.n	8000ce8 <__aeabi_ddiv+0x3d8>
 8000cd8:	1989      	adds	r1, r1, r6
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	428e      	cmp	r6, r1
 8000cde:	d803      	bhi.n	8000ce8 <__aeabi_ddiv+0x3d8>
 8000ce0:	428a      	cmp	r2, r1
 8000ce2:	d901      	bls.n	8000ce8 <__aeabi_ddiv+0x3d8>
 8000ce4:	1e83      	subs	r3, r0, #2
 8000ce6:	1989      	adds	r1, r1, r6
 8000ce8:	043f      	lsls	r7, r7, #16
 8000cea:	1a89      	subs	r1, r1, r2
 8000cec:	003a      	movs	r2, r7
 8000cee:	9f03      	ldr	r7, [sp, #12]
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	0038      	movs	r0, r7
 8000cf4:	0413      	lsls	r3, r2, #16
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	4358      	muls	r0, r3
 8000cfa:	4681      	mov	r9, r0
 8000cfc:	9802      	ldr	r0, [sp, #8]
 8000cfe:	0c15      	lsrs	r5, r2, #16
 8000d00:	436f      	muls	r7, r5
 8000d02:	4343      	muls	r3, r0
 8000d04:	4345      	muls	r5, r0
 8000d06:	4648      	mov	r0, r9
 8000d08:	0c00      	lsrs	r0, r0, #16
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	19db      	adds	r3, r3, r7
 8000d0e:	4463      	add	r3, ip
 8000d10:	429f      	cmp	r7, r3
 8000d12:	d903      	bls.n	8000d1c <__aeabi_ddiv+0x40c>
 8000d14:	2080      	movs	r0, #128	; 0x80
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	4684      	mov	ip, r0
 8000d1a:	4465      	add	r5, ip
 8000d1c:	4648      	mov	r0, r9
 8000d1e:	0c1f      	lsrs	r7, r3, #16
 8000d20:	0400      	lsls	r0, r0, #16
 8000d22:	041b      	lsls	r3, r3, #16
 8000d24:	0c00      	lsrs	r0, r0, #16
 8000d26:	197d      	adds	r5, r7, r5
 8000d28:	1818      	adds	r0, r3, r0
 8000d2a:	42a9      	cmp	r1, r5
 8000d2c:	d200      	bcs.n	8000d30 <__aeabi_ddiv+0x420>
 8000d2e:	e084      	b.n	8000e3a <__aeabi_ddiv+0x52a>
 8000d30:	d100      	bne.n	8000d34 <__aeabi_ddiv+0x424>
 8000d32:	e07f      	b.n	8000e34 <__aeabi_ddiv+0x524>
 8000d34:	2301      	movs	r3, #1
 8000d36:	431a      	orrs	r2, r3
 8000d38:	e657      	b.n	80009ea <__aeabi_ddiv+0xda>
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	031b      	lsls	r3, r3, #12
 8000d40:	4313      	orrs	r3, r2
 8000d42:	031b      	lsls	r3, r3, #12
 8000d44:	0b1b      	lsrs	r3, r3, #12
 8000d46:	46aa      	mov	sl, r5
 8000d48:	4a6f      	ldr	r2, [pc, #444]	; (8000f08 <__aeabi_ddiv+0x5f8>)
 8000d4a:	e66f      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000d4c:	42ba      	cmp	r2, r7
 8000d4e:	d900      	bls.n	8000d52 <__aeabi_ddiv+0x442>
 8000d50:	e735      	b.n	8000bbe <__aeabi_ddiv+0x2ae>
 8000d52:	464b      	mov	r3, r9
 8000d54:	07dc      	lsls	r4, r3, #31
 8000d56:	0858      	lsrs	r0, r3, #1
 8000d58:	087b      	lsrs	r3, r7, #1
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	07ff      	lsls	r7, r7, #31
 8000d5e:	e734      	b.n	8000bca <__aeabi_ddiv+0x2ba>
 8000d60:	2400      	movs	r4, #0
 8000d62:	42af      	cmp	r7, r5
 8000d64:	d289      	bcs.n	8000c7a <__aeabi_ddiv+0x36a>
 8000d66:	4447      	add	r7, r8
 8000d68:	4547      	cmp	r7, r8
 8000d6a:	41a4      	sbcs	r4, r4
 8000d6c:	465b      	mov	r3, fp
 8000d6e:	4264      	negs	r4, r4
 8000d70:	19a4      	adds	r4, r4, r6
 8000d72:	1864      	adds	r4, r4, r1
 8000d74:	3b01      	subs	r3, #1
 8000d76:	42a6      	cmp	r6, r4
 8000d78:	d21e      	bcs.n	8000db8 <__aeabi_ddiv+0x4a8>
 8000d7a:	42a0      	cmp	r0, r4
 8000d7c:	d86d      	bhi.n	8000e5a <__aeabi_ddiv+0x54a>
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x472>
 8000d80:	e0b6      	b.n	8000ef0 <__aeabi_ddiv+0x5e0>
 8000d82:	1a24      	subs	r4, r4, r0
 8000d84:	469b      	mov	fp, r3
 8000d86:	e778      	b.n	8000c7a <__aeabi_ddiv+0x36a>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	465a      	mov	r2, fp
 8000d8c:	3b28      	subs	r3, #40	; 0x28
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	2700      	movs	r7, #0
 8000d92:	4691      	mov	r9, r2
 8000d94:	e688      	b.n	8000aa8 <__aeabi_ddiv+0x198>
 8000d96:	4658      	mov	r0, fp
 8000d98:	f001 f802 	bl	8001da0 <__clzsi2>
 8000d9c:	3020      	adds	r0, #32
 8000d9e:	e672      	b.n	8000a86 <__aeabi_ddiv+0x176>
 8000da0:	0003      	movs	r3, r0
 8000da2:	4652      	mov	r2, sl
 8000da4:	3b28      	subs	r3, #40	; 0x28
 8000da6:	409a      	lsls	r2, r3
 8000da8:	4693      	mov	fp, r2
 8000daa:	2200      	movs	r2, #0
 8000dac:	e6b4      	b.n	8000b18 <__aeabi_ddiv+0x208>
 8000dae:	4650      	mov	r0, sl
 8000db0:	f000 fff6 	bl	8001da0 <__clzsi2>
 8000db4:	3020      	adds	r0, #32
 8000db6:	e69a      	b.n	8000aee <__aeabi_ddiv+0x1de>
 8000db8:	42a6      	cmp	r6, r4
 8000dba:	d1e2      	bne.n	8000d82 <__aeabi_ddiv+0x472>
 8000dbc:	45b8      	cmp	r8, r7
 8000dbe:	d9dc      	bls.n	8000d7a <__aeabi_ddiv+0x46a>
 8000dc0:	1a34      	subs	r4, r6, r0
 8000dc2:	469b      	mov	fp, r3
 8000dc4:	e759      	b.n	8000c7a <__aeabi_ddiv+0x36a>
 8000dc6:	2b1f      	cmp	r3, #31
 8000dc8:	dc65      	bgt.n	8000e96 <__aeabi_ddiv+0x586>
 8000dca:	4c50      	ldr	r4, [pc, #320]	; (8000f0c <__aeabi_ddiv+0x5fc>)
 8000dcc:	9900      	ldr	r1, [sp, #0]
 8000dce:	46a4      	mov	ip, r4
 8000dd0:	465c      	mov	r4, fp
 8000dd2:	4461      	add	r1, ip
 8000dd4:	0008      	movs	r0, r1
 8000dd6:	408c      	lsls	r4, r1
 8000dd8:	0011      	movs	r1, r2
 8000dda:	4082      	lsls	r2, r0
 8000ddc:	40d9      	lsrs	r1, r3
 8000dde:	1e50      	subs	r0, r2, #1
 8000de0:	4182      	sbcs	r2, r0
 8000de2:	430c      	orrs	r4, r1
 8000de4:	4314      	orrs	r4, r2
 8000de6:	465a      	mov	r2, fp
 8000de8:	40da      	lsrs	r2, r3
 8000dea:	0013      	movs	r3, r2
 8000dec:	0762      	lsls	r2, r4, #29
 8000dee:	d009      	beq.n	8000e04 <__aeabi_ddiv+0x4f4>
 8000df0:	220f      	movs	r2, #15
 8000df2:	4022      	ands	r2, r4
 8000df4:	2a04      	cmp	r2, #4
 8000df6:	d005      	beq.n	8000e04 <__aeabi_ddiv+0x4f4>
 8000df8:	0022      	movs	r2, r4
 8000dfa:	1d14      	adds	r4, r2, #4
 8000dfc:	4294      	cmp	r4, r2
 8000dfe:	4189      	sbcs	r1, r1
 8000e00:	4249      	negs	r1, r1
 8000e02:	185b      	adds	r3, r3, r1
 8000e04:	021a      	lsls	r2, r3, #8
 8000e06:	d562      	bpl.n	8000ece <__aeabi_ddiv+0x5be>
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	e60d      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000e10:	428a      	cmp	r2, r1
 8000e12:	d800      	bhi.n	8000e16 <__aeabi_ddiv+0x506>
 8000e14:	e70a      	b.n	8000c2c <__aeabi_ddiv+0x31c>
 8000e16:	1e83      	subs	r3, r0, #2
 8000e18:	1989      	adds	r1, r1, r6
 8000e1a:	e707      	b.n	8000c2c <__aeabi_ddiv+0x31c>
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d100      	bne.n	8000e26 <__aeabi_ddiv+0x516>
 8000e24:	e5e6      	b.n	80009f4 <__aeabi_ddiv+0xe4>
 8000e26:	1d17      	adds	r7, r2, #4
 8000e28:	4297      	cmp	r7, r2
 8000e2a:	4192      	sbcs	r2, r2
 8000e2c:	4253      	negs	r3, r2
 8000e2e:	449b      	add	fp, r3
 8000e30:	08fa      	lsrs	r2, r7, #3
 8000e32:	e5e0      	b.n	80009f6 <__aeabi_ddiv+0xe6>
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0x52a>
 8000e38:	e5d7      	b.n	80009ea <__aeabi_ddiv+0xda>
 8000e3a:	1871      	adds	r1, r6, r1
 8000e3c:	1e53      	subs	r3, r2, #1
 8000e3e:	42b1      	cmp	r1, r6
 8000e40:	d327      	bcc.n	8000e92 <__aeabi_ddiv+0x582>
 8000e42:	42a9      	cmp	r1, r5
 8000e44:	d315      	bcc.n	8000e72 <__aeabi_ddiv+0x562>
 8000e46:	d058      	beq.n	8000efa <__aeabi_ddiv+0x5ea>
 8000e48:	001a      	movs	r2, r3
 8000e4a:	e773      	b.n	8000d34 <__aeabi_ddiv+0x424>
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dc00      	bgt.n	8000e52 <__aeabi_ddiv+0x542>
 8000e50:	e604      	b.n	8000a5c <__aeabi_ddiv+0x14c>
 8000e52:	2301      	movs	r3, #1
 8000e54:	2200      	movs	r2, #0
 8000e56:	449b      	add	fp, r3
 8000e58:	e5cd      	b.n	80009f6 <__aeabi_ddiv+0xe6>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	4447      	add	r7, r8
 8000e5e:	4547      	cmp	r7, r8
 8000e60:	4189      	sbcs	r1, r1
 8000e62:	425b      	negs	r3, r3
 8000e64:	469c      	mov	ip, r3
 8000e66:	4249      	negs	r1, r1
 8000e68:	1989      	adds	r1, r1, r6
 8000e6a:	190c      	adds	r4, r1, r4
 8000e6c:	44e3      	add	fp, ip
 8000e6e:	1a24      	subs	r4, r4, r0
 8000e70:	e703      	b.n	8000c7a <__aeabi_ddiv+0x36a>
 8000e72:	4643      	mov	r3, r8
 8000e74:	005f      	lsls	r7, r3, #1
 8000e76:	4547      	cmp	r7, r8
 8000e78:	419b      	sbcs	r3, r3
 8000e7a:	46b8      	mov	r8, r7
 8000e7c:	425b      	negs	r3, r3
 8000e7e:	199e      	adds	r6, r3, r6
 8000e80:	3a02      	subs	r2, #2
 8000e82:	1989      	adds	r1, r1, r6
 8000e84:	42a9      	cmp	r1, r5
 8000e86:	d000      	beq.n	8000e8a <__aeabi_ddiv+0x57a>
 8000e88:	e754      	b.n	8000d34 <__aeabi_ddiv+0x424>
 8000e8a:	4540      	cmp	r0, r8
 8000e8c:	d000      	beq.n	8000e90 <__aeabi_ddiv+0x580>
 8000e8e:	e751      	b.n	8000d34 <__aeabi_ddiv+0x424>
 8000e90:	e5ab      	b.n	80009ea <__aeabi_ddiv+0xda>
 8000e92:	001a      	movs	r2, r3
 8000e94:	e7f6      	b.n	8000e84 <__aeabi_ddiv+0x574>
 8000e96:	211f      	movs	r1, #31
 8000e98:	465f      	mov	r7, fp
 8000e9a:	4249      	negs	r1, r1
 8000e9c:	1b0c      	subs	r4, r1, r4
 8000e9e:	40e7      	lsrs	r7, r4
 8000ea0:	2b20      	cmp	r3, #32
 8000ea2:	d007      	beq.n	8000eb4 <__aeabi_ddiv+0x5a4>
 8000ea4:	491a      	ldr	r1, [pc, #104]	; (8000f10 <__aeabi_ddiv+0x600>)
 8000ea6:	9b00      	ldr	r3, [sp, #0]
 8000ea8:	468c      	mov	ip, r1
 8000eaa:	4463      	add	r3, ip
 8000eac:	0018      	movs	r0, r3
 8000eae:	465b      	mov	r3, fp
 8000eb0:	4083      	lsls	r3, r0
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	1e50      	subs	r0, r2, #1
 8000eb6:	4182      	sbcs	r2, r0
 8000eb8:	433a      	orrs	r2, r7
 8000eba:	2707      	movs	r7, #7
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4017      	ands	r7, r2
 8000ec0:	d009      	beq.n	8000ed6 <__aeabi_ddiv+0x5c6>
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	4011      	ands	r1, r2
 8000ec8:	0014      	movs	r4, r2
 8000eca:	2904      	cmp	r1, #4
 8000ecc:	d195      	bne.n	8000dfa <__aeabi_ddiv+0x4ea>
 8000ece:	0022      	movs	r2, r4
 8000ed0:	075f      	lsls	r7, r3, #29
 8000ed2:	025b      	lsls	r3, r3, #9
 8000ed4:	0b1b      	lsrs	r3, r3, #12
 8000ed6:	08d2      	lsrs	r2, r2, #3
 8000ed8:	4317      	orrs	r7, r2
 8000eda:	2200      	movs	r2, #0
 8000edc:	e5a6      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	4659      	mov	r1, fp
 8000ee2:	031b      	lsls	r3, r3, #12
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	031b      	lsls	r3, r3, #12
 8000ee8:	0017      	movs	r7, r2
 8000eea:	0b1b      	lsrs	r3, r3, #12
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <__aeabi_ddiv+0x5f8>)
 8000eee:	e59d      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000ef0:	42bd      	cmp	r5, r7
 8000ef2:	d8b2      	bhi.n	8000e5a <__aeabi_ddiv+0x54a>
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2400      	movs	r4, #0
 8000ef8:	e6bf      	b.n	8000c7a <__aeabi_ddiv+0x36a>
 8000efa:	4580      	cmp	r8, r0
 8000efc:	d3b9      	bcc.n	8000e72 <__aeabi_ddiv+0x562>
 8000efe:	001a      	movs	r2, r3
 8000f00:	e7c3      	b.n	8000e8a <__aeabi_ddiv+0x57a>
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	000003ff 	.word	0x000003ff
 8000f08:	000007ff 	.word	0x000007ff
 8000f0c:	0000041e 	.word	0x0000041e
 8000f10:	0000043e 	.word	0x0000043e

08000f14 <__eqdf2>:
 8000f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f16:	464f      	mov	r7, r9
 8000f18:	4646      	mov	r6, r8
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	b5c0      	push	{r6, r7, lr}
 8000f20:	4680      	mov	r8, r0
 8000f22:	4e19      	ldr	r6, [pc, #100]	; (8000f88 <__eqdf2+0x74>)
 8000f24:	0318      	lsls	r0, r3, #12
 8000f26:	030f      	lsls	r7, r1, #12
 8000f28:	004d      	lsls	r5, r1, #1
 8000f2a:	0b00      	lsrs	r0, r0, #12
 8000f2c:	005c      	lsls	r4, r3, #1
 8000f2e:	4682      	mov	sl, r0
 8000f30:	0b3f      	lsrs	r7, r7, #12
 8000f32:	0d6d      	lsrs	r5, r5, #21
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	4691      	mov	r9, r2
 8000f38:	0d64      	lsrs	r4, r4, #21
 8000f3a:	0fdb      	lsrs	r3, r3, #31
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	42b5      	cmp	r5, r6
 8000f40:	d00a      	beq.n	8000f58 <__eqdf2+0x44>
 8000f42:	42b4      	cmp	r4, r6
 8000f44:	d003      	beq.n	8000f4e <__eqdf2+0x3a>
 8000f46:	42a5      	cmp	r5, r4
 8000f48:	d101      	bne.n	8000f4e <__eqdf2+0x3a>
 8000f4a:	4557      	cmp	r7, sl
 8000f4c:	d00c      	beq.n	8000f68 <__eqdf2+0x54>
 8000f4e:	bc1c      	pop	{r2, r3, r4}
 8000f50:	4690      	mov	r8, r2
 8000f52:	4699      	mov	r9, r3
 8000f54:	46a2      	mov	sl, r4
 8000f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f58:	4666      	mov	r6, ip
 8000f5a:	433e      	orrs	r6, r7
 8000f5c:	d1f7      	bne.n	8000f4e <__eqdf2+0x3a>
 8000f5e:	42ac      	cmp	r4, r5
 8000f60:	d1f5      	bne.n	8000f4e <__eqdf2+0x3a>
 8000f62:	4654      	mov	r4, sl
 8000f64:	4314      	orrs	r4, r2
 8000f66:	d1f2      	bne.n	8000f4e <__eqdf2+0x3a>
 8000f68:	2001      	movs	r0, #1
 8000f6a:	45c8      	cmp	r8, r9
 8000f6c:	d1ef      	bne.n	8000f4e <__eqdf2+0x3a>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d007      	beq.n	8000f82 <__eqdf2+0x6e>
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	d1eb      	bne.n	8000f4e <__eqdf2+0x3a>
 8000f76:	4663      	mov	r3, ip
 8000f78:	431f      	orrs	r7, r3
 8000f7a:	0038      	movs	r0, r7
 8000f7c:	1e47      	subs	r7, r0, #1
 8000f7e:	41b8      	sbcs	r0, r7
 8000f80:	e7e5      	b.n	8000f4e <__eqdf2+0x3a>
 8000f82:	2000      	movs	r0, #0
 8000f84:	e7e3      	b.n	8000f4e <__eqdf2+0x3a>
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	000007ff 	.word	0x000007ff

08000f8c <__gedf2>:
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	464f      	mov	r7, r9
 8000f90:	4646      	mov	r6, r8
 8000f92:	46d6      	mov	lr, sl
 8000f94:	004d      	lsls	r5, r1, #1
 8000f96:	b5c0      	push	{r6, r7, lr}
 8000f98:	030e      	lsls	r6, r1, #12
 8000f9a:	0fc9      	lsrs	r1, r1, #31
 8000f9c:	468a      	mov	sl, r1
 8000f9e:	492c      	ldr	r1, [pc, #176]	; (8001050 <__gedf2+0xc4>)
 8000fa0:	031f      	lsls	r7, r3, #12
 8000fa2:	005c      	lsls	r4, r3, #1
 8000fa4:	4680      	mov	r8, r0
 8000fa6:	0b36      	lsrs	r6, r6, #12
 8000fa8:	0d6d      	lsrs	r5, r5, #21
 8000faa:	4691      	mov	r9, r2
 8000fac:	0b3f      	lsrs	r7, r7, #12
 8000fae:	0d64      	lsrs	r4, r4, #21
 8000fb0:	0fdb      	lsrs	r3, r3, #31
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	d01e      	beq.n	8000ff4 <__gedf2+0x68>
 8000fb6:	428c      	cmp	r4, r1
 8000fb8:	d016      	beq.n	8000fe8 <__gedf2+0x5c>
 8000fba:	2d00      	cmp	r5, #0
 8000fbc:	d11e      	bne.n	8000ffc <__gedf2+0x70>
 8000fbe:	4330      	orrs	r0, r6
 8000fc0:	4684      	mov	ip, r0
 8000fc2:	2c00      	cmp	r4, #0
 8000fc4:	d101      	bne.n	8000fca <__gedf2+0x3e>
 8000fc6:	433a      	orrs	r2, r7
 8000fc8:	d023      	beq.n	8001012 <__gedf2+0x86>
 8000fca:	4662      	mov	r2, ip
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d01a      	beq.n	8001006 <__gedf2+0x7a>
 8000fd0:	459a      	cmp	sl, r3
 8000fd2:	d029      	beq.n	8001028 <__gedf2+0x9c>
 8000fd4:	4651      	mov	r1, sl
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	3901      	subs	r1, #1
 8000fda:	4008      	ands	r0, r1
 8000fdc:	3801      	subs	r0, #1
 8000fde:	bc1c      	pop	{r2, r3, r4}
 8000fe0:	4690      	mov	r8, r2
 8000fe2:	4699      	mov	r9, r3
 8000fe4:	46a2      	mov	sl, r4
 8000fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe8:	0039      	movs	r1, r7
 8000fea:	4311      	orrs	r1, r2
 8000fec:	d0e5      	beq.n	8000fba <__gedf2+0x2e>
 8000fee:	2002      	movs	r0, #2
 8000ff0:	4240      	negs	r0, r0
 8000ff2:	e7f4      	b.n	8000fde <__gedf2+0x52>
 8000ff4:	4330      	orrs	r0, r6
 8000ff6:	d1fa      	bne.n	8000fee <__gedf2+0x62>
 8000ff8:	42ac      	cmp	r4, r5
 8000ffa:	d00f      	beq.n	800101c <__gedf2+0x90>
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	d10f      	bne.n	8001020 <__gedf2+0x94>
 8001000:	433a      	orrs	r2, r7
 8001002:	d0e7      	beq.n	8000fd4 <__gedf2+0x48>
 8001004:	e00c      	b.n	8001020 <__gedf2+0x94>
 8001006:	2201      	movs	r2, #1
 8001008:	3b01      	subs	r3, #1
 800100a:	4393      	bics	r3, r2
 800100c:	0018      	movs	r0, r3
 800100e:	3001      	adds	r0, #1
 8001010:	e7e5      	b.n	8000fde <__gedf2+0x52>
 8001012:	4663      	mov	r3, ip
 8001014:	2000      	movs	r0, #0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0e1      	beq.n	8000fde <__gedf2+0x52>
 800101a:	e7db      	b.n	8000fd4 <__gedf2+0x48>
 800101c:	433a      	orrs	r2, r7
 800101e:	d1e6      	bne.n	8000fee <__gedf2+0x62>
 8001020:	459a      	cmp	sl, r3
 8001022:	d1d7      	bne.n	8000fd4 <__gedf2+0x48>
 8001024:	42a5      	cmp	r5, r4
 8001026:	dcd5      	bgt.n	8000fd4 <__gedf2+0x48>
 8001028:	42a5      	cmp	r5, r4
 800102a:	db05      	blt.n	8001038 <__gedf2+0xac>
 800102c:	42be      	cmp	r6, r7
 800102e:	d8d1      	bhi.n	8000fd4 <__gedf2+0x48>
 8001030:	d008      	beq.n	8001044 <__gedf2+0xb8>
 8001032:	2000      	movs	r0, #0
 8001034:	42be      	cmp	r6, r7
 8001036:	d2d2      	bcs.n	8000fde <__gedf2+0x52>
 8001038:	4650      	mov	r0, sl
 800103a:	2301      	movs	r3, #1
 800103c:	3801      	subs	r0, #1
 800103e:	4398      	bics	r0, r3
 8001040:	3001      	adds	r0, #1
 8001042:	e7cc      	b.n	8000fde <__gedf2+0x52>
 8001044:	45c8      	cmp	r8, r9
 8001046:	d8c5      	bhi.n	8000fd4 <__gedf2+0x48>
 8001048:	2000      	movs	r0, #0
 800104a:	45c8      	cmp	r8, r9
 800104c:	d3f4      	bcc.n	8001038 <__gedf2+0xac>
 800104e:	e7c6      	b.n	8000fde <__gedf2+0x52>
 8001050:	000007ff 	.word	0x000007ff

08001054 <__ledf2>:
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	464f      	mov	r7, r9
 8001058:	4646      	mov	r6, r8
 800105a:	46d6      	mov	lr, sl
 800105c:	004d      	lsls	r5, r1, #1
 800105e:	b5c0      	push	{r6, r7, lr}
 8001060:	030e      	lsls	r6, r1, #12
 8001062:	0fc9      	lsrs	r1, r1, #31
 8001064:	468a      	mov	sl, r1
 8001066:	492e      	ldr	r1, [pc, #184]	; (8001120 <__ledf2+0xcc>)
 8001068:	031f      	lsls	r7, r3, #12
 800106a:	005c      	lsls	r4, r3, #1
 800106c:	4680      	mov	r8, r0
 800106e:	0b36      	lsrs	r6, r6, #12
 8001070:	0d6d      	lsrs	r5, r5, #21
 8001072:	4691      	mov	r9, r2
 8001074:	0b3f      	lsrs	r7, r7, #12
 8001076:	0d64      	lsrs	r4, r4, #21
 8001078:	0fdb      	lsrs	r3, r3, #31
 800107a:	428d      	cmp	r5, r1
 800107c:	d018      	beq.n	80010b0 <__ledf2+0x5c>
 800107e:	428c      	cmp	r4, r1
 8001080:	d011      	beq.n	80010a6 <__ledf2+0x52>
 8001082:	2d00      	cmp	r5, #0
 8001084:	d118      	bne.n	80010b8 <__ledf2+0x64>
 8001086:	4330      	orrs	r0, r6
 8001088:	4684      	mov	ip, r0
 800108a:	2c00      	cmp	r4, #0
 800108c:	d11e      	bne.n	80010cc <__ledf2+0x78>
 800108e:	433a      	orrs	r2, r7
 8001090:	d11c      	bne.n	80010cc <__ledf2+0x78>
 8001092:	4663      	mov	r3, ip
 8001094:	2000      	movs	r0, #0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d030      	beq.n	80010fc <__ledf2+0xa8>
 800109a:	4651      	mov	r1, sl
 800109c:	2002      	movs	r0, #2
 800109e:	3901      	subs	r1, #1
 80010a0:	4008      	ands	r0, r1
 80010a2:	3801      	subs	r0, #1
 80010a4:	e02a      	b.n	80010fc <__ledf2+0xa8>
 80010a6:	0039      	movs	r1, r7
 80010a8:	4311      	orrs	r1, r2
 80010aa:	d0ea      	beq.n	8001082 <__ledf2+0x2e>
 80010ac:	2002      	movs	r0, #2
 80010ae:	e025      	b.n	80010fc <__ledf2+0xa8>
 80010b0:	4330      	orrs	r0, r6
 80010b2:	d1fb      	bne.n	80010ac <__ledf2+0x58>
 80010b4:	42ac      	cmp	r4, r5
 80010b6:	d026      	beq.n	8001106 <__ledf2+0xb2>
 80010b8:	2c00      	cmp	r4, #0
 80010ba:	d126      	bne.n	800110a <__ledf2+0xb6>
 80010bc:	433a      	orrs	r2, r7
 80010be:	d124      	bne.n	800110a <__ledf2+0xb6>
 80010c0:	4651      	mov	r1, sl
 80010c2:	2002      	movs	r0, #2
 80010c4:	3901      	subs	r1, #1
 80010c6:	4008      	ands	r0, r1
 80010c8:	3801      	subs	r0, #1
 80010ca:	e017      	b.n	80010fc <__ledf2+0xa8>
 80010cc:	4662      	mov	r2, ip
 80010ce:	2a00      	cmp	r2, #0
 80010d0:	d00f      	beq.n	80010f2 <__ledf2+0x9e>
 80010d2:	459a      	cmp	sl, r3
 80010d4:	d1e1      	bne.n	800109a <__ledf2+0x46>
 80010d6:	42a5      	cmp	r5, r4
 80010d8:	db05      	blt.n	80010e6 <__ledf2+0x92>
 80010da:	42be      	cmp	r6, r7
 80010dc:	d8dd      	bhi.n	800109a <__ledf2+0x46>
 80010de:	d019      	beq.n	8001114 <__ledf2+0xc0>
 80010e0:	2000      	movs	r0, #0
 80010e2:	42be      	cmp	r6, r7
 80010e4:	d20a      	bcs.n	80010fc <__ledf2+0xa8>
 80010e6:	4650      	mov	r0, sl
 80010e8:	2301      	movs	r3, #1
 80010ea:	3801      	subs	r0, #1
 80010ec:	4398      	bics	r0, r3
 80010ee:	3001      	adds	r0, #1
 80010f0:	e004      	b.n	80010fc <__ledf2+0xa8>
 80010f2:	2201      	movs	r2, #1
 80010f4:	3b01      	subs	r3, #1
 80010f6:	4393      	bics	r3, r2
 80010f8:	0018      	movs	r0, r3
 80010fa:	3001      	adds	r0, #1
 80010fc:	bc1c      	pop	{r2, r3, r4}
 80010fe:	4690      	mov	r8, r2
 8001100:	4699      	mov	r9, r3
 8001102:	46a2      	mov	sl, r4
 8001104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001106:	433a      	orrs	r2, r7
 8001108:	d1d0      	bne.n	80010ac <__ledf2+0x58>
 800110a:	459a      	cmp	sl, r3
 800110c:	d1c5      	bne.n	800109a <__ledf2+0x46>
 800110e:	42a5      	cmp	r5, r4
 8001110:	dcc3      	bgt.n	800109a <__ledf2+0x46>
 8001112:	e7e0      	b.n	80010d6 <__ledf2+0x82>
 8001114:	45c8      	cmp	r8, r9
 8001116:	d8c0      	bhi.n	800109a <__ledf2+0x46>
 8001118:	2000      	movs	r0, #0
 800111a:	45c8      	cmp	r8, r9
 800111c:	d3e3      	bcc.n	80010e6 <__ledf2+0x92>
 800111e:	e7ed      	b.n	80010fc <__ledf2+0xa8>
 8001120:	000007ff 	.word	0x000007ff

08001124 <__aeabi_dmul>:
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001126:	4657      	mov	r7, sl
 8001128:	46de      	mov	lr, fp
 800112a:	464e      	mov	r6, r9
 800112c:	4645      	mov	r5, r8
 800112e:	b5e0      	push	{r5, r6, r7, lr}
 8001130:	4683      	mov	fp, r0
 8001132:	0006      	movs	r6, r0
 8001134:	030f      	lsls	r7, r1, #12
 8001136:	0048      	lsls	r0, r1, #1
 8001138:	b087      	sub	sp, #28
 800113a:	4692      	mov	sl, r2
 800113c:	001d      	movs	r5, r3
 800113e:	0b3f      	lsrs	r7, r7, #12
 8001140:	0d40      	lsrs	r0, r0, #21
 8001142:	0fcc      	lsrs	r4, r1, #31
 8001144:	2800      	cmp	r0, #0
 8001146:	d100      	bne.n	800114a <__aeabi_dmul+0x26>
 8001148:	e06f      	b.n	800122a <__aeabi_dmul+0x106>
 800114a:	4bde      	ldr	r3, [pc, #888]	; (80014c4 <__aeabi_dmul+0x3a0>)
 800114c:	4298      	cmp	r0, r3
 800114e:	d038      	beq.n	80011c2 <__aeabi_dmul+0x9e>
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	00ff      	lsls	r7, r7, #3
 8001154:	041b      	lsls	r3, r3, #16
 8001156:	431f      	orrs	r7, r3
 8001158:	0f73      	lsrs	r3, r6, #29
 800115a:	433b      	orrs	r3, r7
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	4bda      	ldr	r3, [pc, #872]	; (80014c8 <__aeabi_dmul+0x3a4>)
 8001160:	2700      	movs	r7, #0
 8001162:	4699      	mov	r9, r3
 8001164:	2300      	movs	r3, #0
 8001166:	469b      	mov	fp, r3
 8001168:	00f6      	lsls	r6, r6, #3
 800116a:	4481      	add	r9, r0
 800116c:	032b      	lsls	r3, r5, #12
 800116e:	0069      	lsls	r1, r5, #1
 8001170:	0b1b      	lsrs	r3, r3, #12
 8001172:	4652      	mov	r2, sl
 8001174:	4698      	mov	r8, r3
 8001176:	0d49      	lsrs	r1, r1, #21
 8001178:	0fed      	lsrs	r5, r5, #31
 800117a:	2900      	cmp	r1, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_dmul+0x5c>
 800117e:	e085      	b.n	800128c <__aeabi_dmul+0x168>
 8001180:	4bd0      	ldr	r3, [pc, #832]	; (80014c4 <__aeabi_dmul+0x3a0>)
 8001182:	4299      	cmp	r1, r3
 8001184:	d100      	bne.n	8001188 <__aeabi_dmul+0x64>
 8001186:	e073      	b.n	8001270 <__aeabi_dmul+0x14c>
 8001188:	4643      	mov	r3, r8
 800118a:	00da      	lsls	r2, r3, #3
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	041b      	lsls	r3, r3, #16
 8001190:	4313      	orrs	r3, r2
 8001192:	4652      	mov	r2, sl
 8001194:	48cc      	ldr	r0, [pc, #816]	; (80014c8 <__aeabi_dmul+0x3a4>)
 8001196:	0f52      	lsrs	r2, r2, #29
 8001198:	4684      	mov	ip, r0
 800119a:	4313      	orrs	r3, r2
 800119c:	4652      	mov	r2, sl
 800119e:	2000      	movs	r0, #0
 80011a0:	4461      	add	r1, ip
 80011a2:	00d2      	lsls	r2, r2, #3
 80011a4:	4489      	add	r9, r1
 80011a6:	0021      	movs	r1, r4
 80011a8:	4069      	eors	r1, r5
 80011aa:	9100      	str	r1, [sp, #0]
 80011ac:	468c      	mov	ip, r1
 80011ae:	2101      	movs	r1, #1
 80011b0:	4449      	add	r1, r9
 80011b2:	468a      	mov	sl, r1
 80011b4:	2f0f      	cmp	r7, #15
 80011b6:	d900      	bls.n	80011ba <__aeabi_dmul+0x96>
 80011b8:	e090      	b.n	80012dc <__aeabi_dmul+0x1b8>
 80011ba:	49c4      	ldr	r1, [pc, #784]	; (80014cc <__aeabi_dmul+0x3a8>)
 80011bc:	00bf      	lsls	r7, r7, #2
 80011be:	59cf      	ldr	r7, [r1, r7]
 80011c0:	46bf      	mov	pc, r7
 80011c2:	465b      	mov	r3, fp
 80011c4:	433b      	orrs	r3, r7
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	d000      	beq.n	80011cc <__aeabi_dmul+0xa8>
 80011ca:	e16a      	b.n	80014a2 <__aeabi_dmul+0x37e>
 80011cc:	2302      	movs	r3, #2
 80011ce:	2708      	movs	r7, #8
 80011d0:	2600      	movs	r6, #0
 80011d2:	4681      	mov	r9, r0
 80011d4:	469b      	mov	fp, r3
 80011d6:	e7c9      	b.n	800116c <__aeabi_dmul+0x48>
 80011d8:	0032      	movs	r2, r6
 80011da:	4658      	mov	r0, fp
 80011dc:	9b01      	ldr	r3, [sp, #4]
 80011de:	4661      	mov	r1, ip
 80011e0:	9100      	str	r1, [sp, #0]
 80011e2:	2802      	cmp	r0, #2
 80011e4:	d100      	bne.n	80011e8 <__aeabi_dmul+0xc4>
 80011e6:	e075      	b.n	80012d4 <__aeabi_dmul+0x1b0>
 80011e8:	2803      	cmp	r0, #3
 80011ea:	d100      	bne.n	80011ee <__aeabi_dmul+0xca>
 80011ec:	e1fe      	b.n	80015ec <__aeabi_dmul+0x4c8>
 80011ee:	2801      	cmp	r0, #1
 80011f0:	d000      	beq.n	80011f4 <__aeabi_dmul+0xd0>
 80011f2:	e12c      	b.n	800144e <__aeabi_dmul+0x32a>
 80011f4:	2300      	movs	r3, #0
 80011f6:	2700      	movs	r7, #0
 80011f8:	2600      	movs	r6, #0
 80011fa:	2500      	movs	r5, #0
 80011fc:	033f      	lsls	r7, r7, #12
 80011fe:	0d2a      	lsrs	r2, r5, #20
 8001200:	0b3f      	lsrs	r7, r7, #12
 8001202:	48b3      	ldr	r0, [pc, #716]	; (80014d0 <__aeabi_dmul+0x3ac>)
 8001204:	0512      	lsls	r2, r2, #20
 8001206:	433a      	orrs	r2, r7
 8001208:	4002      	ands	r2, r0
 800120a:	051b      	lsls	r3, r3, #20
 800120c:	4313      	orrs	r3, r2
 800120e:	9a00      	ldr	r2, [sp, #0]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	07d1      	lsls	r1, r2, #31
 8001214:	085b      	lsrs	r3, r3, #1
 8001216:	430b      	orrs	r3, r1
 8001218:	0030      	movs	r0, r6
 800121a:	0019      	movs	r1, r3
 800121c:	b007      	add	sp, #28
 800121e:	bc3c      	pop	{r2, r3, r4, r5}
 8001220:	4690      	mov	r8, r2
 8001222:	4699      	mov	r9, r3
 8001224:	46a2      	mov	sl, r4
 8001226:	46ab      	mov	fp, r5
 8001228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122a:	465b      	mov	r3, fp
 800122c:	433b      	orrs	r3, r7
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	d100      	bne.n	8001234 <__aeabi_dmul+0x110>
 8001232:	e12f      	b.n	8001494 <__aeabi_dmul+0x370>
 8001234:	2f00      	cmp	r7, #0
 8001236:	d100      	bne.n	800123a <__aeabi_dmul+0x116>
 8001238:	e1a5      	b.n	8001586 <__aeabi_dmul+0x462>
 800123a:	0038      	movs	r0, r7
 800123c:	f000 fdb0 	bl	8001da0 <__clzsi2>
 8001240:	0003      	movs	r3, r0
 8001242:	3b0b      	subs	r3, #11
 8001244:	2b1c      	cmp	r3, #28
 8001246:	dd00      	ble.n	800124a <__aeabi_dmul+0x126>
 8001248:	e196      	b.n	8001578 <__aeabi_dmul+0x454>
 800124a:	221d      	movs	r2, #29
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	465a      	mov	r2, fp
 8001250:	0001      	movs	r1, r0
 8001252:	40da      	lsrs	r2, r3
 8001254:	465e      	mov	r6, fp
 8001256:	3908      	subs	r1, #8
 8001258:	408f      	lsls	r7, r1
 800125a:	0013      	movs	r3, r2
 800125c:	408e      	lsls	r6, r1
 800125e:	433b      	orrs	r3, r7
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	4b9c      	ldr	r3, [pc, #624]	; (80014d4 <__aeabi_dmul+0x3b0>)
 8001264:	2700      	movs	r7, #0
 8001266:	1a1b      	subs	r3, r3, r0
 8001268:	4699      	mov	r9, r3
 800126a:	2300      	movs	r3, #0
 800126c:	469b      	mov	fp, r3
 800126e:	e77d      	b.n	800116c <__aeabi_dmul+0x48>
 8001270:	4641      	mov	r1, r8
 8001272:	4653      	mov	r3, sl
 8001274:	430b      	orrs	r3, r1
 8001276:	4993      	ldr	r1, [pc, #588]	; (80014c4 <__aeabi_dmul+0x3a0>)
 8001278:	468c      	mov	ip, r1
 800127a:	44e1      	add	r9, ip
 800127c:	2b00      	cmp	r3, #0
 800127e:	d000      	beq.n	8001282 <__aeabi_dmul+0x15e>
 8001280:	e11a      	b.n	80014b8 <__aeabi_dmul+0x394>
 8001282:	2202      	movs	r2, #2
 8001284:	2002      	movs	r0, #2
 8001286:	4317      	orrs	r7, r2
 8001288:	2200      	movs	r2, #0
 800128a:	e78c      	b.n	80011a6 <__aeabi_dmul+0x82>
 800128c:	4313      	orrs	r3, r2
 800128e:	d100      	bne.n	8001292 <__aeabi_dmul+0x16e>
 8001290:	e10d      	b.n	80014ae <__aeabi_dmul+0x38a>
 8001292:	4643      	mov	r3, r8
 8001294:	2b00      	cmp	r3, #0
 8001296:	d100      	bne.n	800129a <__aeabi_dmul+0x176>
 8001298:	e181      	b.n	800159e <__aeabi_dmul+0x47a>
 800129a:	4640      	mov	r0, r8
 800129c:	f000 fd80 	bl	8001da0 <__clzsi2>
 80012a0:	0002      	movs	r2, r0
 80012a2:	3a0b      	subs	r2, #11
 80012a4:	2a1c      	cmp	r2, #28
 80012a6:	dd00      	ble.n	80012aa <__aeabi_dmul+0x186>
 80012a8:	e172      	b.n	8001590 <__aeabi_dmul+0x46c>
 80012aa:	0001      	movs	r1, r0
 80012ac:	4643      	mov	r3, r8
 80012ae:	3908      	subs	r1, #8
 80012b0:	408b      	lsls	r3, r1
 80012b2:	4698      	mov	r8, r3
 80012b4:	231d      	movs	r3, #29
 80012b6:	1a9a      	subs	r2, r3, r2
 80012b8:	4653      	mov	r3, sl
 80012ba:	40d3      	lsrs	r3, r2
 80012bc:	001a      	movs	r2, r3
 80012be:	4643      	mov	r3, r8
 80012c0:	4313      	orrs	r3, r2
 80012c2:	4652      	mov	r2, sl
 80012c4:	408a      	lsls	r2, r1
 80012c6:	4649      	mov	r1, r9
 80012c8:	1a08      	subs	r0, r1, r0
 80012ca:	4982      	ldr	r1, [pc, #520]	; (80014d4 <__aeabi_dmul+0x3b0>)
 80012cc:	4689      	mov	r9, r1
 80012ce:	4481      	add	r9, r0
 80012d0:	2000      	movs	r0, #0
 80012d2:	e768      	b.n	80011a6 <__aeabi_dmul+0x82>
 80012d4:	4b7b      	ldr	r3, [pc, #492]	; (80014c4 <__aeabi_dmul+0x3a0>)
 80012d6:	2700      	movs	r7, #0
 80012d8:	2600      	movs	r6, #0
 80012da:	e78e      	b.n	80011fa <__aeabi_dmul+0xd6>
 80012dc:	0c14      	lsrs	r4, r2, #16
 80012de:	0412      	lsls	r2, r2, #16
 80012e0:	0c12      	lsrs	r2, r2, #16
 80012e2:	0011      	movs	r1, r2
 80012e4:	0c37      	lsrs	r7, r6, #16
 80012e6:	0436      	lsls	r6, r6, #16
 80012e8:	0c35      	lsrs	r5, r6, #16
 80012ea:	4379      	muls	r1, r7
 80012ec:	0028      	movs	r0, r5
 80012ee:	468c      	mov	ip, r1
 80012f0:	002e      	movs	r6, r5
 80012f2:	4360      	muls	r0, r4
 80012f4:	4460      	add	r0, ip
 80012f6:	4683      	mov	fp, r0
 80012f8:	4356      	muls	r6, r2
 80012fa:	0021      	movs	r1, r4
 80012fc:	0c30      	lsrs	r0, r6, #16
 80012fe:	4680      	mov	r8, r0
 8001300:	4658      	mov	r0, fp
 8001302:	4379      	muls	r1, r7
 8001304:	4440      	add	r0, r8
 8001306:	9102      	str	r1, [sp, #8]
 8001308:	4584      	cmp	ip, r0
 800130a:	d906      	bls.n	800131a <__aeabi_dmul+0x1f6>
 800130c:	4688      	mov	r8, r1
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	0249      	lsls	r1, r1, #9
 8001312:	468c      	mov	ip, r1
 8001314:	44e0      	add	r8, ip
 8001316:	4641      	mov	r1, r8
 8001318:	9102      	str	r1, [sp, #8]
 800131a:	0436      	lsls	r6, r6, #16
 800131c:	0c01      	lsrs	r1, r0, #16
 800131e:	0c36      	lsrs	r6, r6, #16
 8001320:	0400      	lsls	r0, r0, #16
 8001322:	468b      	mov	fp, r1
 8001324:	1981      	adds	r1, r0, r6
 8001326:	0c1e      	lsrs	r6, r3, #16
 8001328:	041b      	lsls	r3, r3, #16
 800132a:	0c1b      	lsrs	r3, r3, #16
 800132c:	9103      	str	r1, [sp, #12]
 800132e:	0019      	movs	r1, r3
 8001330:	4379      	muls	r1, r7
 8001332:	468c      	mov	ip, r1
 8001334:	0028      	movs	r0, r5
 8001336:	4375      	muls	r5, r6
 8001338:	4465      	add	r5, ip
 800133a:	46a8      	mov	r8, r5
 800133c:	4358      	muls	r0, r3
 800133e:	0c05      	lsrs	r5, r0, #16
 8001340:	4445      	add	r5, r8
 8001342:	4377      	muls	r7, r6
 8001344:	42a9      	cmp	r1, r5
 8001346:	d903      	bls.n	8001350 <__aeabi_dmul+0x22c>
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	0249      	lsls	r1, r1, #9
 800134c:	468c      	mov	ip, r1
 800134e:	4467      	add	r7, ip
 8001350:	0c29      	lsrs	r1, r5, #16
 8001352:	468c      	mov	ip, r1
 8001354:	0039      	movs	r1, r7
 8001356:	0400      	lsls	r0, r0, #16
 8001358:	0c00      	lsrs	r0, r0, #16
 800135a:	042d      	lsls	r5, r5, #16
 800135c:	182d      	adds	r5, r5, r0
 800135e:	4461      	add	r1, ip
 8001360:	44ab      	add	fp, r5
 8001362:	9105      	str	r1, [sp, #20]
 8001364:	4659      	mov	r1, fp
 8001366:	9104      	str	r1, [sp, #16]
 8001368:	9901      	ldr	r1, [sp, #4]
 800136a:	040f      	lsls	r7, r1, #16
 800136c:	0c3f      	lsrs	r7, r7, #16
 800136e:	0c08      	lsrs	r0, r1, #16
 8001370:	0039      	movs	r1, r7
 8001372:	4351      	muls	r1, r2
 8001374:	4342      	muls	r2, r0
 8001376:	4690      	mov	r8, r2
 8001378:	0002      	movs	r2, r0
 800137a:	468c      	mov	ip, r1
 800137c:	0c09      	lsrs	r1, r1, #16
 800137e:	468b      	mov	fp, r1
 8001380:	4362      	muls	r2, r4
 8001382:	437c      	muls	r4, r7
 8001384:	4444      	add	r4, r8
 8001386:	445c      	add	r4, fp
 8001388:	45a0      	cmp	r8, r4
 800138a:	d903      	bls.n	8001394 <__aeabi_dmul+0x270>
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	0249      	lsls	r1, r1, #9
 8001390:	4688      	mov	r8, r1
 8001392:	4442      	add	r2, r8
 8001394:	0c21      	lsrs	r1, r4, #16
 8001396:	4688      	mov	r8, r1
 8001398:	4661      	mov	r1, ip
 800139a:	0409      	lsls	r1, r1, #16
 800139c:	0c09      	lsrs	r1, r1, #16
 800139e:	468c      	mov	ip, r1
 80013a0:	0039      	movs	r1, r7
 80013a2:	4359      	muls	r1, r3
 80013a4:	4343      	muls	r3, r0
 80013a6:	4370      	muls	r0, r6
 80013a8:	437e      	muls	r6, r7
 80013aa:	0c0f      	lsrs	r7, r1, #16
 80013ac:	18f6      	adds	r6, r6, r3
 80013ae:	0424      	lsls	r4, r4, #16
 80013b0:	19be      	adds	r6, r7, r6
 80013b2:	4464      	add	r4, ip
 80013b4:	4442      	add	r2, r8
 80013b6:	468c      	mov	ip, r1
 80013b8:	42b3      	cmp	r3, r6
 80013ba:	d903      	bls.n	80013c4 <__aeabi_dmul+0x2a0>
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	025b      	lsls	r3, r3, #9
 80013c0:	4698      	mov	r8, r3
 80013c2:	4440      	add	r0, r8
 80013c4:	9b02      	ldr	r3, [sp, #8]
 80013c6:	4661      	mov	r1, ip
 80013c8:	4698      	mov	r8, r3
 80013ca:	9b04      	ldr	r3, [sp, #16]
 80013cc:	0437      	lsls	r7, r6, #16
 80013ce:	4443      	add	r3, r8
 80013d0:	469b      	mov	fp, r3
 80013d2:	45ab      	cmp	fp, r5
 80013d4:	41ad      	sbcs	r5, r5
 80013d6:	426b      	negs	r3, r5
 80013d8:	040d      	lsls	r5, r1, #16
 80013da:	9905      	ldr	r1, [sp, #20]
 80013dc:	0c2d      	lsrs	r5, r5, #16
 80013de:	468c      	mov	ip, r1
 80013e0:	197f      	adds	r7, r7, r5
 80013e2:	4467      	add	r7, ip
 80013e4:	18fd      	adds	r5, r7, r3
 80013e6:	46a8      	mov	r8, r5
 80013e8:	465d      	mov	r5, fp
 80013ea:	192d      	adds	r5, r5, r4
 80013ec:	42a5      	cmp	r5, r4
 80013ee:	41a4      	sbcs	r4, r4
 80013f0:	4693      	mov	fp, r2
 80013f2:	4264      	negs	r4, r4
 80013f4:	46a4      	mov	ip, r4
 80013f6:	44c3      	add	fp, r8
 80013f8:	44dc      	add	ip, fp
 80013fa:	428f      	cmp	r7, r1
 80013fc:	41bf      	sbcs	r7, r7
 80013fe:	4598      	cmp	r8, r3
 8001400:	419b      	sbcs	r3, r3
 8001402:	4593      	cmp	fp, r2
 8001404:	4192      	sbcs	r2, r2
 8001406:	45a4      	cmp	ip, r4
 8001408:	41a4      	sbcs	r4, r4
 800140a:	425b      	negs	r3, r3
 800140c:	427f      	negs	r7, r7
 800140e:	431f      	orrs	r7, r3
 8001410:	0c36      	lsrs	r6, r6, #16
 8001412:	4252      	negs	r2, r2
 8001414:	4264      	negs	r4, r4
 8001416:	19bf      	adds	r7, r7, r6
 8001418:	4322      	orrs	r2, r4
 800141a:	18bf      	adds	r7, r7, r2
 800141c:	4662      	mov	r2, ip
 800141e:	1838      	adds	r0, r7, r0
 8001420:	0243      	lsls	r3, r0, #9
 8001422:	0dd2      	lsrs	r2, r2, #23
 8001424:	9903      	ldr	r1, [sp, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	026a      	lsls	r2, r5, #9
 800142a:	430a      	orrs	r2, r1
 800142c:	1e50      	subs	r0, r2, #1
 800142e:	4182      	sbcs	r2, r0
 8001430:	4661      	mov	r1, ip
 8001432:	0ded      	lsrs	r5, r5, #23
 8001434:	432a      	orrs	r2, r5
 8001436:	024e      	lsls	r6, r1, #9
 8001438:	4332      	orrs	r2, r6
 800143a:	01d9      	lsls	r1, r3, #7
 800143c:	d400      	bmi.n	8001440 <__aeabi_dmul+0x31c>
 800143e:	e0b3      	b.n	80015a8 <__aeabi_dmul+0x484>
 8001440:	2601      	movs	r6, #1
 8001442:	0850      	lsrs	r0, r2, #1
 8001444:	4032      	ands	r2, r6
 8001446:	4302      	orrs	r2, r0
 8001448:	07de      	lsls	r6, r3, #31
 800144a:	4332      	orrs	r2, r6
 800144c:	085b      	lsrs	r3, r3, #1
 800144e:	4c22      	ldr	r4, [pc, #136]	; (80014d8 <__aeabi_dmul+0x3b4>)
 8001450:	4454      	add	r4, sl
 8001452:	2c00      	cmp	r4, #0
 8001454:	dd62      	ble.n	800151c <__aeabi_dmul+0x3f8>
 8001456:	0751      	lsls	r1, r2, #29
 8001458:	d009      	beq.n	800146e <__aeabi_dmul+0x34a>
 800145a:	200f      	movs	r0, #15
 800145c:	4010      	ands	r0, r2
 800145e:	2804      	cmp	r0, #4
 8001460:	d005      	beq.n	800146e <__aeabi_dmul+0x34a>
 8001462:	1d10      	adds	r0, r2, #4
 8001464:	4290      	cmp	r0, r2
 8001466:	4192      	sbcs	r2, r2
 8001468:	4252      	negs	r2, r2
 800146a:	189b      	adds	r3, r3, r2
 800146c:	0002      	movs	r2, r0
 800146e:	01d9      	lsls	r1, r3, #7
 8001470:	d504      	bpl.n	800147c <__aeabi_dmul+0x358>
 8001472:	2480      	movs	r4, #128	; 0x80
 8001474:	4819      	ldr	r0, [pc, #100]	; (80014dc <__aeabi_dmul+0x3b8>)
 8001476:	00e4      	lsls	r4, r4, #3
 8001478:	4003      	ands	r3, r0
 800147a:	4454      	add	r4, sl
 800147c:	4818      	ldr	r0, [pc, #96]	; (80014e0 <__aeabi_dmul+0x3bc>)
 800147e:	4284      	cmp	r4, r0
 8001480:	dd00      	ble.n	8001484 <__aeabi_dmul+0x360>
 8001482:	e727      	b.n	80012d4 <__aeabi_dmul+0x1b0>
 8001484:	075e      	lsls	r6, r3, #29
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	08d2      	lsrs	r2, r2, #3
 800148a:	0b1f      	lsrs	r7, r3, #12
 800148c:	0563      	lsls	r3, r4, #21
 800148e:	4316      	orrs	r6, r2
 8001490:	0d5b      	lsrs	r3, r3, #21
 8001492:	e6b2      	b.n	80011fa <__aeabi_dmul+0xd6>
 8001494:	2300      	movs	r3, #0
 8001496:	4699      	mov	r9, r3
 8001498:	3301      	adds	r3, #1
 800149a:	2704      	movs	r7, #4
 800149c:	2600      	movs	r6, #0
 800149e:	469b      	mov	fp, r3
 80014a0:	e664      	b.n	800116c <__aeabi_dmul+0x48>
 80014a2:	2303      	movs	r3, #3
 80014a4:	9701      	str	r7, [sp, #4]
 80014a6:	4681      	mov	r9, r0
 80014a8:	270c      	movs	r7, #12
 80014aa:	469b      	mov	fp, r3
 80014ac:	e65e      	b.n	800116c <__aeabi_dmul+0x48>
 80014ae:	2201      	movs	r2, #1
 80014b0:	2001      	movs	r0, #1
 80014b2:	4317      	orrs	r7, r2
 80014b4:	2200      	movs	r2, #0
 80014b6:	e676      	b.n	80011a6 <__aeabi_dmul+0x82>
 80014b8:	2303      	movs	r3, #3
 80014ba:	2003      	movs	r0, #3
 80014bc:	431f      	orrs	r7, r3
 80014be:	4643      	mov	r3, r8
 80014c0:	e671      	b.n	80011a6 <__aeabi_dmul+0x82>
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	000007ff 	.word	0x000007ff
 80014c8:	fffffc01 	.word	0xfffffc01
 80014cc:	080052c8 	.word	0x080052c8
 80014d0:	800fffff 	.word	0x800fffff
 80014d4:	fffffc0d 	.word	0xfffffc0d
 80014d8:	000003ff 	.word	0x000003ff
 80014dc:	feffffff 	.word	0xfeffffff
 80014e0:	000007fe 	.word	0x000007fe
 80014e4:	2300      	movs	r3, #0
 80014e6:	2780      	movs	r7, #128	; 0x80
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	033f      	lsls	r7, r7, #12
 80014ec:	2600      	movs	r6, #0
 80014ee:	4b43      	ldr	r3, [pc, #268]	; (80015fc <__aeabi_dmul+0x4d8>)
 80014f0:	e683      	b.n	80011fa <__aeabi_dmul+0xd6>
 80014f2:	9b01      	ldr	r3, [sp, #4]
 80014f4:	0032      	movs	r2, r6
 80014f6:	46a4      	mov	ip, r4
 80014f8:	4658      	mov	r0, fp
 80014fa:	e670      	b.n	80011de <__aeabi_dmul+0xba>
 80014fc:	46ac      	mov	ip, r5
 80014fe:	e66e      	b.n	80011de <__aeabi_dmul+0xba>
 8001500:	2780      	movs	r7, #128	; 0x80
 8001502:	9901      	ldr	r1, [sp, #4]
 8001504:	033f      	lsls	r7, r7, #12
 8001506:	4239      	tst	r1, r7
 8001508:	d02d      	beq.n	8001566 <__aeabi_dmul+0x442>
 800150a:	423b      	tst	r3, r7
 800150c:	d12b      	bne.n	8001566 <__aeabi_dmul+0x442>
 800150e:	431f      	orrs	r7, r3
 8001510:	033f      	lsls	r7, r7, #12
 8001512:	0b3f      	lsrs	r7, r7, #12
 8001514:	9500      	str	r5, [sp, #0]
 8001516:	0016      	movs	r6, r2
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <__aeabi_dmul+0x4d8>)
 800151a:	e66e      	b.n	80011fa <__aeabi_dmul+0xd6>
 800151c:	2501      	movs	r5, #1
 800151e:	1b2d      	subs	r5, r5, r4
 8001520:	2d38      	cmp	r5, #56	; 0x38
 8001522:	dd00      	ble.n	8001526 <__aeabi_dmul+0x402>
 8001524:	e666      	b.n	80011f4 <__aeabi_dmul+0xd0>
 8001526:	2d1f      	cmp	r5, #31
 8001528:	dc40      	bgt.n	80015ac <__aeabi_dmul+0x488>
 800152a:	4835      	ldr	r0, [pc, #212]	; (8001600 <__aeabi_dmul+0x4dc>)
 800152c:	001c      	movs	r4, r3
 800152e:	4450      	add	r0, sl
 8001530:	0016      	movs	r6, r2
 8001532:	4082      	lsls	r2, r0
 8001534:	4084      	lsls	r4, r0
 8001536:	40ee      	lsrs	r6, r5
 8001538:	1e50      	subs	r0, r2, #1
 800153a:	4182      	sbcs	r2, r0
 800153c:	4334      	orrs	r4, r6
 800153e:	4314      	orrs	r4, r2
 8001540:	40eb      	lsrs	r3, r5
 8001542:	0762      	lsls	r2, r4, #29
 8001544:	d009      	beq.n	800155a <__aeabi_dmul+0x436>
 8001546:	220f      	movs	r2, #15
 8001548:	4022      	ands	r2, r4
 800154a:	2a04      	cmp	r2, #4
 800154c:	d005      	beq.n	800155a <__aeabi_dmul+0x436>
 800154e:	0022      	movs	r2, r4
 8001550:	1d14      	adds	r4, r2, #4
 8001552:	4294      	cmp	r4, r2
 8001554:	4180      	sbcs	r0, r0
 8001556:	4240      	negs	r0, r0
 8001558:	181b      	adds	r3, r3, r0
 800155a:	021a      	lsls	r2, r3, #8
 800155c:	d53e      	bpl.n	80015dc <__aeabi_dmul+0x4b8>
 800155e:	2301      	movs	r3, #1
 8001560:	2700      	movs	r7, #0
 8001562:	2600      	movs	r6, #0
 8001564:	e649      	b.n	80011fa <__aeabi_dmul+0xd6>
 8001566:	2780      	movs	r7, #128	; 0x80
 8001568:	9b01      	ldr	r3, [sp, #4]
 800156a:	033f      	lsls	r7, r7, #12
 800156c:	431f      	orrs	r7, r3
 800156e:	033f      	lsls	r7, r7, #12
 8001570:	0b3f      	lsrs	r7, r7, #12
 8001572:	9400      	str	r4, [sp, #0]
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <__aeabi_dmul+0x4d8>)
 8001576:	e640      	b.n	80011fa <__aeabi_dmul+0xd6>
 8001578:	0003      	movs	r3, r0
 800157a:	465a      	mov	r2, fp
 800157c:	3b28      	subs	r3, #40	; 0x28
 800157e:	409a      	lsls	r2, r3
 8001580:	2600      	movs	r6, #0
 8001582:	9201      	str	r2, [sp, #4]
 8001584:	e66d      	b.n	8001262 <__aeabi_dmul+0x13e>
 8001586:	4658      	mov	r0, fp
 8001588:	f000 fc0a 	bl	8001da0 <__clzsi2>
 800158c:	3020      	adds	r0, #32
 800158e:	e657      	b.n	8001240 <__aeabi_dmul+0x11c>
 8001590:	0003      	movs	r3, r0
 8001592:	4652      	mov	r2, sl
 8001594:	3b28      	subs	r3, #40	; 0x28
 8001596:	409a      	lsls	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	2200      	movs	r2, #0
 800159c:	e693      	b.n	80012c6 <__aeabi_dmul+0x1a2>
 800159e:	4650      	mov	r0, sl
 80015a0:	f000 fbfe 	bl	8001da0 <__clzsi2>
 80015a4:	3020      	adds	r0, #32
 80015a6:	e67b      	b.n	80012a0 <__aeabi_dmul+0x17c>
 80015a8:	46ca      	mov	sl, r9
 80015aa:	e750      	b.n	800144e <__aeabi_dmul+0x32a>
 80015ac:	201f      	movs	r0, #31
 80015ae:	001e      	movs	r6, r3
 80015b0:	4240      	negs	r0, r0
 80015b2:	1b04      	subs	r4, r0, r4
 80015b4:	40e6      	lsrs	r6, r4
 80015b6:	2d20      	cmp	r5, #32
 80015b8:	d003      	beq.n	80015c2 <__aeabi_dmul+0x49e>
 80015ba:	4c12      	ldr	r4, [pc, #72]	; (8001604 <__aeabi_dmul+0x4e0>)
 80015bc:	4454      	add	r4, sl
 80015be:	40a3      	lsls	r3, r4
 80015c0:	431a      	orrs	r2, r3
 80015c2:	1e50      	subs	r0, r2, #1
 80015c4:	4182      	sbcs	r2, r0
 80015c6:	4332      	orrs	r2, r6
 80015c8:	2607      	movs	r6, #7
 80015ca:	2700      	movs	r7, #0
 80015cc:	4016      	ands	r6, r2
 80015ce:	d009      	beq.n	80015e4 <__aeabi_dmul+0x4c0>
 80015d0:	200f      	movs	r0, #15
 80015d2:	2300      	movs	r3, #0
 80015d4:	4010      	ands	r0, r2
 80015d6:	0014      	movs	r4, r2
 80015d8:	2804      	cmp	r0, #4
 80015da:	d1b9      	bne.n	8001550 <__aeabi_dmul+0x42c>
 80015dc:	0022      	movs	r2, r4
 80015de:	075e      	lsls	r6, r3, #29
 80015e0:	025b      	lsls	r3, r3, #9
 80015e2:	0b1f      	lsrs	r7, r3, #12
 80015e4:	08d2      	lsrs	r2, r2, #3
 80015e6:	4316      	orrs	r6, r2
 80015e8:	2300      	movs	r3, #0
 80015ea:	e606      	b.n	80011fa <__aeabi_dmul+0xd6>
 80015ec:	2780      	movs	r7, #128	; 0x80
 80015ee:	033f      	lsls	r7, r7, #12
 80015f0:	431f      	orrs	r7, r3
 80015f2:	033f      	lsls	r7, r7, #12
 80015f4:	0b3f      	lsrs	r7, r7, #12
 80015f6:	0016      	movs	r6, r2
 80015f8:	4b00      	ldr	r3, [pc, #0]	; (80015fc <__aeabi_dmul+0x4d8>)
 80015fa:	e5fe      	b.n	80011fa <__aeabi_dmul+0xd6>
 80015fc:	000007ff 	.word	0x000007ff
 8001600:	0000041e 	.word	0x0000041e
 8001604:	0000043e 	.word	0x0000043e

08001608 <__aeabi_dsub>:
 8001608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160a:	4657      	mov	r7, sl
 800160c:	464e      	mov	r6, r9
 800160e:	4645      	mov	r5, r8
 8001610:	46de      	mov	lr, fp
 8001612:	000c      	movs	r4, r1
 8001614:	0309      	lsls	r1, r1, #12
 8001616:	b5e0      	push	{r5, r6, r7, lr}
 8001618:	0a49      	lsrs	r1, r1, #9
 800161a:	0f46      	lsrs	r6, r0, #29
 800161c:	005f      	lsls	r7, r3, #1
 800161e:	4331      	orrs	r1, r6
 8001620:	031e      	lsls	r6, r3, #12
 8001622:	0fdb      	lsrs	r3, r3, #31
 8001624:	0a76      	lsrs	r6, r6, #9
 8001626:	469b      	mov	fp, r3
 8001628:	0f53      	lsrs	r3, r2, #29
 800162a:	4333      	orrs	r3, r6
 800162c:	4ec8      	ldr	r6, [pc, #800]	; (8001950 <__aeabi_dsub+0x348>)
 800162e:	0065      	lsls	r5, r4, #1
 8001630:	00c0      	lsls	r0, r0, #3
 8001632:	0fe4      	lsrs	r4, r4, #31
 8001634:	00d2      	lsls	r2, r2, #3
 8001636:	0d6d      	lsrs	r5, r5, #21
 8001638:	46a2      	mov	sl, r4
 800163a:	4681      	mov	r9, r0
 800163c:	0d7f      	lsrs	r7, r7, #21
 800163e:	469c      	mov	ip, r3
 8001640:	4690      	mov	r8, r2
 8001642:	42b7      	cmp	r7, r6
 8001644:	d100      	bne.n	8001648 <__aeabi_dsub+0x40>
 8001646:	e0b9      	b.n	80017bc <__aeabi_dsub+0x1b4>
 8001648:	465b      	mov	r3, fp
 800164a:	2601      	movs	r6, #1
 800164c:	4073      	eors	r3, r6
 800164e:	469b      	mov	fp, r3
 8001650:	1bee      	subs	r6, r5, r7
 8001652:	45a3      	cmp	fp, r4
 8001654:	d100      	bne.n	8001658 <__aeabi_dsub+0x50>
 8001656:	e083      	b.n	8001760 <__aeabi_dsub+0x158>
 8001658:	2e00      	cmp	r6, #0
 800165a:	dd63      	ble.n	8001724 <__aeabi_dsub+0x11c>
 800165c:	2f00      	cmp	r7, #0
 800165e:	d000      	beq.n	8001662 <__aeabi_dsub+0x5a>
 8001660:	e0b1      	b.n	80017c6 <__aeabi_dsub+0x1be>
 8001662:	4663      	mov	r3, ip
 8001664:	4313      	orrs	r3, r2
 8001666:	d100      	bne.n	800166a <__aeabi_dsub+0x62>
 8001668:	e123      	b.n	80018b2 <__aeabi_dsub+0x2aa>
 800166a:	1e73      	subs	r3, r6, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d000      	beq.n	8001672 <__aeabi_dsub+0x6a>
 8001670:	e1ba      	b.n	80019e8 <__aeabi_dsub+0x3e0>
 8001672:	1a86      	subs	r6, r0, r2
 8001674:	4663      	mov	r3, ip
 8001676:	42b0      	cmp	r0, r6
 8001678:	4180      	sbcs	r0, r0
 800167a:	2501      	movs	r5, #1
 800167c:	1ac9      	subs	r1, r1, r3
 800167e:	4240      	negs	r0, r0
 8001680:	1a09      	subs	r1, r1, r0
 8001682:	020b      	lsls	r3, r1, #8
 8001684:	d400      	bmi.n	8001688 <__aeabi_dsub+0x80>
 8001686:	e147      	b.n	8001918 <__aeabi_dsub+0x310>
 8001688:	0249      	lsls	r1, r1, #9
 800168a:	0a4b      	lsrs	r3, r1, #9
 800168c:	4698      	mov	r8, r3
 800168e:	4643      	mov	r3, r8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d100      	bne.n	8001696 <__aeabi_dsub+0x8e>
 8001694:	e189      	b.n	80019aa <__aeabi_dsub+0x3a2>
 8001696:	4640      	mov	r0, r8
 8001698:	f000 fb82 	bl	8001da0 <__clzsi2>
 800169c:	0003      	movs	r3, r0
 800169e:	3b08      	subs	r3, #8
 80016a0:	2b1f      	cmp	r3, #31
 80016a2:	dd00      	ble.n	80016a6 <__aeabi_dsub+0x9e>
 80016a4:	e17c      	b.n	80019a0 <__aeabi_dsub+0x398>
 80016a6:	2220      	movs	r2, #32
 80016a8:	0030      	movs	r0, r6
 80016aa:	1ad2      	subs	r2, r2, r3
 80016ac:	4641      	mov	r1, r8
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	4099      	lsls	r1, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409e      	lsls	r6, r3
 80016b6:	430a      	orrs	r2, r1
 80016b8:	429d      	cmp	r5, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dsub+0xb6>
 80016bc:	e16a      	b.n	8001994 <__aeabi_dsub+0x38c>
 80016be:	1b5d      	subs	r5, r3, r5
 80016c0:	1c6b      	adds	r3, r5, #1
 80016c2:	2b1f      	cmp	r3, #31
 80016c4:	dd00      	ble.n	80016c8 <__aeabi_dsub+0xc0>
 80016c6:	e194      	b.n	80019f2 <__aeabi_dsub+0x3ea>
 80016c8:	2120      	movs	r1, #32
 80016ca:	0010      	movs	r0, r2
 80016cc:	0035      	movs	r5, r6
 80016ce:	1ac9      	subs	r1, r1, r3
 80016d0:	408e      	lsls	r6, r1
 80016d2:	40da      	lsrs	r2, r3
 80016d4:	4088      	lsls	r0, r1
 80016d6:	40dd      	lsrs	r5, r3
 80016d8:	1e71      	subs	r1, r6, #1
 80016da:	418e      	sbcs	r6, r1
 80016dc:	0011      	movs	r1, r2
 80016de:	2207      	movs	r2, #7
 80016e0:	4328      	orrs	r0, r5
 80016e2:	2500      	movs	r5, #0
 80016e4:	4306      	orrs	r6, r0
 80016e6:	4032      	ands	r2, r6
 80016e8:	2a00      	cmp	r2, #0
 80016ea:	d009      	beq.n	8001700 <__aeabi_dsub+0xf8>
 80016ec:	230f      	movs	r3, #15
 80016ee:	4033      	ands	r3, r6
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d005      	beq.n	8001700 <__aeabi_dsub+0xf8>
 80016f4:	1d33      	adds	r3, r6, #4
 80016f6:	42b3      	cmp	r3, r6
 80016f8:	41b6      	sbcs	r6, r6
 80016fa:	4276      	negs	r6, r6
 80016fc:	1989      	adds	r1, r1, r6
 80016fe:	001e      	movs	r6, r3
 8001700:	020b      	lsls	r3, r1, #8
 8001702:	d400      	bmi.n	8001706 <__aeabi_dsub+0xfe>
 8001704:	e23d      	b.n	8001b82 <__aeabi_dsub+0x57a>
 8001706:	1c6a      	adds	r2, r5, #1
 8001708:	4b91      	ldr	r3, [pc, #580]	; (8001950 <__aeabi_dsub+0x348>)
 800170a:	0555      	lsls	r5, r2, #21
 800170c:	0d6d      	lsrs	r5, r5, #21
 800170e:	429a      	cmp	r2, r3
 8001710:	d100      	bne.n	8001714 <__aeabi_dsub+0x10c>
 8001712:	e119      	b.n	8001948 <__aeabi_dsub+0x340>
 8001714:	4a8f      	ldr	r2, [pc, #572]	; (8001954 <__aeabi_dsub+0x34c>)
 8001716:	08f6      	lsrs	r6, r6, #3
 8001718:	400a      	ands	r2, r1
 800171a:	0757      	lsls	r7, r2, #29
 800171c:	0252      	lsls	r2, r2, #9
 800171e:	4337      	orrs	r7, r6
 8001720:	0b12      	lsrs	r2, r2, #12
 8001722:	e09b      	b.n	800185c <__aeabi_dsub+0x254>
 8001724:	2e00      	cmp	r6, #0
 8001726:	d000      	beq.n	800172a <__aeabi_dsub+0x122>
 8001728:	e0c5      	b.n	80018b6 <__aeabi_dsub+0x2ae>
 800172a:	1c6e      	adds	r6, r5, #1
 800172c:	0576      	lsls	r6, r6, #21
 800172e:	0d76      	lsrs	r6, r6, #21
 8001730:	2e01      	cmp	r6, #1
 8001732:	dc00      	bgt.n	8001736 <__aeabi_dsub+0x12e>
 8001734:	e148      	b.n	80019c8 <__aeabi_dsub+0x3c0>
 8001736:	4667      	mov	r7, ip
 8001738:	1a86      	subs	r6, r0, r2
 800173a:	1bcb      	subs	r3, r1, r7
 800173c:	42b0      	cmp	r0, r6
 800173e:	41bf      	sbcs	r7, r7
 8001740:	427f      	negs	r7, r7
 8001742:	46b8      	mov	r8, r7
 8001744:	001f      	movs	r7, r3
 8001746:	4643      	mov	r3, r8
 8001748:	1aff      	subs	r7, r7, r3
 800174a:	003b      	movs	r3, r7
 800174c:	46b8      	mov	r8, r7
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	d500      	bpl.n	8001754 <__aeabi_dsub+0x14c>
 8001752:	e15f      	b.n	8001a14 <__aeabi_dsub+0x40c>
 8001754:	4337      	orrs	r7, r6
 8001756:	d19a      	bne.n	800168e <__aeabi_dsub+0x86>
 8001758:	2200      	movs	r2, #0
 800175a:	2400      	movs	r4, #0
 800175c:	2500      	movs	r5, #0
 800175e:	e079      	b.n	8001854 <__aeabi_dsub+0x24c>
 8001760:	2e00      	cmp	r6, #0
 8001762:	dc00      	bgt.n	8001766 <__aeabi_dsub+0x15e>
 8001764:	e0fa      	b.n	800195c <__aeabi_dsub+0x354>
 8001766:	2f00      	cmp	r7, #0
 8001768:	d100      	bne.n	800176c <__aeabi_dsub+0x164>
 800176a:	e08d      	b.n	8001888 <__aeabi_dsub+0x280>
 800176c:	4b78      	ldr	r3, [pc, #480]	; (8001950 <__aeabi_dsub+0x348>)
 800176e:	429d      	cmp	r5, r3
 8001770:	d067      	beq.n	8001842 <__aeabi_dsub+0x23a>
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	4667      	mov	r7, ip
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	431f      	orrs	r7, r3
 800177a:	46bc      	mov	ip, r7
 800177c:	2e38      	cmp	r6, #56	; 0x38
 800177e:	dc00      	bgt.n	8001782 <__aeabi_dsub+0x17a>
 8001780:	e152      	b.n	8001a28 <__aeabi_dsub+0x420>
 8001782:	4663      	mov	r3, ip
 8001784:	4313      	orrs	r3, r2
 8001786:	1e5a      	subs	r2, r3, #1
 8001788:	4193      	sbcs	r3, r2
 800178a:	181e      	adds	r6, r3, r0
 800178c:	4286      	cmp	r6, r0
 800178e:	4180      	sbcs	r0, r0
 8001790:	4240      	negs	r0, r0
 8001792:	1809      	adds	r1, r1, r0
 8001794:	020b      	lsls	r3, r1, #8
 8001796:	d400      	bmi.n	800179a <__aeabi_dsub+0x192>
 8001798:	e0be      	b.n	8001918 <__aeabi_dsub+0x310>
 800179a:	4b6d      	ldr	r3, [pc, #436]	; (8001950 <__aeabi_dsub+0x348>)
 800179c:	3501      	adds	r5, #1
 800179e:	429d      	cmp	r5, r3
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dsub+0x19c>
 80017a2:	e0d2      	b.n	800194a <__aeabi_dsub+0x342>
 80017a4:	4a6b      	ldr	r2, [pc, #428]	; (8001954 <__aeabi_dsub+0x34c>)
 80017a6:	0873      	lsrs	r3, r6, #1
 80017a8:	400a      	ands	r2, r1
 80017aa:	2101      	movs	r1, #1
 80017ac:	400e      	ands	r6, r1
 80017ae:	431e      	orrs	r6, r3
 80017b0:	0851      	lsrs	r1, r2, #1
 80017b2:	07d3      	lsls	r3, r2, #31
 80017b4:	2207      	movs	r2, #7
 80017b6:	431e      	orrs	r6, r3
 80017b8:	4032      	ands	r2, r6
 80017ba:	e795      	b.n	80016e8 <__aeabi_dsub+0xe0>
 80017bc:	001e      	movs	r6, r3
 80017be:	4316      	orrs	r6, r2
 80017c0:	d000      	beq.n	80017c4 <__aeabi_dsub+0x1bc>
 80017c2:	e745      	b.n	8001650 <__aeabi_dsub+0x48>
 80017c4:	e740      	b.n	8001648 <__aeabi_dsub+0x40>
 80017c6:	4b62      	ldr	r3, [pc, #392]	; (8001950 <__aeabi_dsub+0x348>)
 80017c8:	429d      	cmp	r5, r3
 80017ca:	d03a      	beq.n	8001842 <__aeabi_dsub+0x23a>
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	4667      	mov	r7, ip
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	431f      	orrs	r7, r3
 80017d4:	46bc      	mov	ip, r7
 80017d6:	2e38      	cmp	r6, #56	; 0x38
 80017d8:	dd00      	ble.n	80017dc <__aeabi_dsub+0x1d4>
 80017da:	e0eb      	b.n	80019b4 <__aeabi_dsub+0x3ac>
 80017dc:	2e1f      	cmp	r6, #31
 80017de:	dc00      	bgt.n	80017e2 <__aeabi_dsub+0x1da>
 80017e0:	e13a      	b.n	8001a58 <__aeabi_dsub+0x450>
 80017e2:	0033      	movs	r3, r6
 80017e4:	4667      	mov	r7, ip
 80017e6:	3b20      	subs	r3, #32
 80017e8:	40df      	lsrs	r7, r3
 80017ea:	003b      	movs	r3, r7
 80017ec:	2e20      	cmp	r6, #32
 80017ee:	d005      	beq.n	80017fc <__aeabi_dsub+0x1f4>
 80017f0:	2740      	movs	r7, #64	; 0x40
 80017f2:	1bbf      	subs	r7, r7, r6
 80017f4:	4666      	mov	r6, ip
 80017f6:	40be      	lsls	r6, r7
 80017f8:	4332      	orrs	r2, r6
 80017fa:	4690      	mov	r8, r2
 80017fc:	4646      	mov	r6, r8
 80017fe:	1e72      	subs	r2, r6, #1
 8001800:	4196      	sbcs	r6, r2
 8001802:	4333      	orrs	r3, r6
 8001804:	e0da      	b.n	80019bc <__aeabi_dsub+0x3b4>
 8001806:	2b00      	cmp	r3, #0
 8001808:	d100      	bne.n	800180c <__aeabi_dsub+0x204>
 800180a:	e214      	b.n	8001c36 <__aeabi_dsub+0x62e>
 800180c:	4663      	mov	r3, ip
 800180e:	4313      	orrs	r3, r2
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x20c>
 8001812:	e168      	b.n	8001ae6 <__aeabi_dsub+0x4de>
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	074e      	lsls	r6, r1, #29
 8001818:	08c0      	lsrs	r0, r0, #3
 800181a:	08c9      	lsrs	r1, r1, #3
 800181c:	031b      	lsls	r3, r3, #12
 800181e:	4306      	orrs	r6, r0
 8001820:	4219      	tst	r1, r3
 8001822:	d008      	beq.n	8001836 <__aeabi_dsub+0x22e>
 8001824:	4660      	mov	r0, ip
 8001826:	08c0      	lsrs	r0, r0, #3
 8001828:	4218      	tst	r0, r3
 800182a:	d104      	bne.n	8001836 <__aeabi_dsub+0x22e>
 800182c:	4663      	mov	r3, ip
 800182e:	0001      	movs	r1, r0
 8001830:	08d2      	lsrs	r2, r2, #3
 8001832:	075e      	lsls	r6, r3, #29
 8001834:	4316      	orrs	r6, r2
 8001836:	00f3      	lsls	r3, r6, #3
 8001838:	4699      	mov	r9, r3
 800183a:	00c9      	lsls	r1, r1, #3
 800183c:	0f72      	lsrs	r2, r6, #29
 800183e:	4d44      	ldr	r5, [pc, #272]	; (8001950 <__aeabi_dsub+0x348>)
 8001840:	4311      	orrs	r1, r2
 8001842:	464b      	mov	r3, r9
 8001844:	08de      	lsrs	r6, r3, #3
 8001846:	4b42      	ldr	r3, [pc, #264]	; (8001950 <__aeabi_dsub+0x348>)
 8001848:	074f      	lsls	r7, r1, #29
 800184a:	4337      	orrs	r7, r6
 800184c:	08ca      	lsrs	r2, r1, #3
 800184e:	429d      	cmp	r5, r3
 8001850:	d100      	bne.n	8001854 <__aeabi_dsub+0x24c>
 8001852:	e06e      	b.n	8001932 <__aeabi_dsub+0x32a>
 8001854:	0312      	lsls	r2, r2, #12
 8001856:	056d      	lsls	r5, r5, #21
 8001858:	0b12      	lsrs	r2, r2, #12
 800185a:	0d6d      	lsrs	r5, r5, #21
 800185c:	2100      	movs	r1, #0
 800185e:	0312      	lsls	r2, r2, #12
 8001860:	0b13      	lsrs	r3, r2, #12
 8001862:	0d0a      	lsrs	r2, r1, #20
 8001864:	0512      	lsls	r2, r2, #20
 8001866:	431a      	orrs	r2, r3
 8001868:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <__aeabi_dsub+0x350>)
 800186a:	052d      	lsls	r5, r5, #20
 800186c:	4013      	ands	r3, r2
 800186e:	432b      	orrs	r3, r5
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	07e4      	lsls	r4, r4, #31
 8001874:	085b      	lsrs	r3, r3, #1
 8001876:	4323      	orrs	r3, r4
 8001878:	0038      	movs	r0, r7
 800187a:	0019      	movs	r1, r3
 800187c:	bc3c      	pop	{r2, r3, r4, r5}
 800187e:	4690      	mov	r8, r2
 8001880:	4699      	mov	r9, r3
 8001882:	46a2      	mov	sl, r4
 8001884:	46ab      	mov	fp, r5
 8001886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001888:	4663      	mov	r3, ip
 800188a:	4313      	orrs	r3, r2
 800188c:	d011      	beq.n	80018b2 <__aeabi_dsub+0x2aa>
 800188e:	1e73      	subs	r3, r6, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d000      	beq.n	8001896 <__aeabi_dsub+0x28e>
 8001894:	e107      	b.n	8001aa6 <__aeabi_dsub+0x49e>
 8001896:	1886      	adds	r6, r0, r2
 8001898:	4286      	cmp	r6, r0
 800189a:	4180      	sbcs	r0, r0
 800189c:	4461      	add	r1, ip
 800189e:	4240      	negs	r0, r0
 80018a0:	1809      	adds	r1, r1, r0
 80018a2:	2501      	movs	r5, #1
 80018a4:	020b      	lsls	r3, r1, #8
 80018a6:	d537      	bpl.n	8001918 <__aeabi_dsub+0x310>
 80018a8:	2502      	movs	r5, #2
 80018aa:	e77b      	b.n	80017a4 <__aeabi_dsub+0x19c>
 80018ac:	003e      	movs	r6, r7
 80018ae:	4661      	mov	r1, ip
 80018b0:	4691      	mov	r9, r2
 80018b2:	0035      	movs	r5, r6
 80018b4:	e7c5      	b.n	8001842 <__aeabi_dsub+0x23a>
 80018b6:	465c      	mov	r4, fp
 80018b8:	2d00      	cmp	r5, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dsub+0x2b6>
 80018bc:	e0e1      	b.n	8001a82 <__aeabi_dsub+0x47a>
 80018be:	000b      	movs	r3, r1
 80018c0:	4303      	orrs	r3, r0
 80018c2:	d0f3      	beq.n	80018ac <__aeabi_dsub+0x2a4>
 80018c4:	1c73      	adds	r3, r6, #1
 80018c6:	d100      	bne.n	80018ca <__aeabi_dsub+0x2c2>
 80018c8:	e1ac      	b.n	8001c24 <__aeabi_dsub+0x61c>
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <__aeabi_dsub+0x348>)
 80018cc:	429f      	cmp	r7, r3
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dsub+0x2ca>
 80018d0:	e13a      	b.n	8001b48 <__aeabi_dsub+0x540>
 80018d2:	43f3      	mvns	r3, r6
 80018d4:	2b38      	cmp	r3, #56	; 0x38
 80018d6:	dd00      	ble.n	80018da <__aeabi_dsub+0x2d2>
 80018d8:	e16f      	b.n	8001bba <__aeabi_dsub+0x5b2>
 80018da:	2b1f      	cmp	r3, #31
 80018dc:	dd00      	ble.n	80018e0 <__aeabi_dsub+0x2d8>
 80018de:	e18c      	b.n	8001bfa <__aeabi_dsub+0x5f2>
 80018e0:	2520      	movs	r5, #32
 80018e2:	000e      	movs	r6, r1
 80018e4:	1aed      	subs	r5, r5, r3
 80018e6:	40ae      	lsls	r6, r5
 80018e8:	46b0      	mov	r8, r6
 80018ea:	0006      	movs	r6, r0
 80018ec:	46aa      	mov	sl, r5
 80018ee:	40de      	lsrs	r6, r3
 80018f0:	4645      	mov	r5, r8
 80018f2:	4335      	orrs	r5, r6
 80018f4:	002e      	movs	r6, r5
 80018f6:	4655      	mov	r5, sl
 80018f8:	40d9      	lsrs	r1, r3
 80018fa:	40a8      	lsls	r0, r5
 80018fc:	4663      	mov	r3, ip
 80018fe:	1e45      	subs	r5, r0, #1
 8001900:	41a8      	sbcs	r0, r5
 8001902:	1a5b      	subs	r3, r3, r1
 8001904:	469c      	mov	ip, r3
 8001906:	4330      	orrs	r0, r6
 8001908:	1a16      	subs	r6, r2, r0
 800190a:	42b2      	cmp	r2, r6
 800190c:	4192      	sbcs	r2, r2
 800190e:	4663      	mov	r3, ip
 8001910:	4252      	negs	r2, r2
 8001912:	1a99      	subs	r1, r3, r2
 8001914:	003d      	movs	r5, r7
 8001916:	e6b4      	b.n	8001682 <__aeabi_dsub+0x7a>
 8001918:	2207      	movs	r2, #7
 800191a:	4032      	ands	r2, r6
 800191c:	2a00      	cmp	r2, #0
 800191e:	d000      	beq.n	8001922 <__aeabi_dsub+0x31a>
 8001920:	e6e4      	b.n	80016ec <__aeabi_dsub+0xe4>
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <__aeabi_dsub+0x348>)
 8001924:	08f6      	lsrs	r6, r6, #3
 8001926:	074f      	lsls	r7, r1, #29
 8001928:	4337      	orrs	r7, r6
 800192a:	08ca      	lsrs	r2, r1, #3
 800192c:	429d      	cmp	r5, r3
 800192e:	d000      	beq.n	8001932 <__aeabi_dsub+0x32a>
 8001930:	e790      	b.n	8001854 <__aeabi_dsub+0x24c>
 8001932:	003b      	movs	r3, r7
 8001934:	4313      	orrs	r3, r2
 8001936:	d100      	bne.n	800193a <__aeabi_dsub+0x332>
 8001938:	e1a6      	b.n	8001c88 <__aeabi_dsub+0x680>
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	031b      	lsls	r3, r3, #12
 800193e:	431a      	orrs	r2, r3
 8001940:	0312      	lsls	r2, r2, #12
 8001942:	0b12      	lsrs	r2, r2, #12
 8001944:	4d02      	ldr	r5, [pc, #8]	; (8001950 <__aeabi_dsub+0x348>)
 8001946:	e789      	b.n	800185c <__aeabi_dsub+0x254>
 8001948:	0015      	movs	r5, r2
 800194a:	2200      	movs	r2, #0
 800194c:	2700      	movs	r7, #0
 800194e:	e785      	b.n	800185c <__aeabi_dsub+0x254>
 8001950:	000007ff 	.word	0x000007ff
 8001954:	ff7fffff 	.word	0xff7fffff
 8001958:	800fffff 	.word	0x800fffff
 800195c:	2e00      	cmp	r6, #0
 800195e:	d000      	beq.n	8001962 <__aeabi_dsub+0x35a>
 8001960:	e0c7      	b.n	8001af2 <__aeabi_dsub+0x4ea>
 8001962:	1c6b      	adds	r3, r5, #1
 8001964:	055e      	lsls	r6, r3, #21
 8001966:	0d76      	lsrs	r6, r6, #21
 8001968:	2e01      	cmp	r6, #1
 800196a:	dc00      	bgt.n	800196e <__aeabi_dsub+0x366>
 800196c:	e0f0      	b.n	8001b50 <__aeabi_dsub+0x548>
 800196e:	4dc8      	ldr	r5, [pc, #800]	; (8001c90 <__aeabi_dsub+0x688>)
 8001970:	42ab      	cmp	r3, r5
 8001972:	d100      	bne.n	8001976 <__aeabi_dsub+0x36e>
 8001974:	e0b9      	b.n	8001aea <__aeabi_dsub+0x4e2>
 8001976:	1885      	adds	r5, r0, r2
 8001978:	000a      	movs	r2, r1
 800197a:	4285      	cmp	r5, r0
 800197c:	4189      	sbcs	r1, r1
 800197e:	4462      	add	r2, ip
 8001980:	4249      	negs	r1, r1
 8001982:	1851      	adds	r1, r2, r1
 8001984:	2207      	movs	r2, #7
 8001986:	07ce      	lsls	r6, r1, #31
 8001988:	086d      	lsrs	r5, r5, #1
 800198a:	432e      	orrs	r6, r5
 800198c:	0849      	lsrs	r1, r1, #1
 800198e:	4032      	ands	r2, r6
 8001990:	001d      	movs	r5, r3
 8001992:	e6a9      	b.n	80016e8 <__aeabi_dsub+0xe0>
 8001994:	49bf      	ldr	r1, [pc, #764]	; (8001c94 <__aeabi_dsub+0x68c>)
 8001996:	1aed      	subs	r5, r5, r3
 8001998:	4011      	ands	r1, r2
 800199a:	2207      	movs	r2, #7
 800199c:	4032      	ands	r2, r6
 800199e:	e6a3      	b.n	80016e8 <__aeabi_dsub+0xe0>
 80019a0:	0032      	movs	r2, r6
 80019a2:	3828      	subs	r0, #40	; 0x28
 80019a4:	4082      	lsls	r2, r0
 80019a6:	2600      	movs	r6, #0
 80019a8:	e686      	b.n	80016b8 <__aeabi_dsub+0xb0>
 80019aa:	0030      	movs	r0, r6
 80019ac:	f000 f9f8 	bl	8001da0 <__clzsi2>
 80019b0:	3020      	adds	r0, #32
 80019b2:	e673      	b.n	800169c <__aeabi_dsub+0x94>
 80019b4:	4663      	mov	r3, ip
 80019b6:	4313      	orrs	r3, r2
 80019b8:	1e5a      	subs	r2, r3, #1
 80019ba:	4193      	sbcs	r3, r2
 80019bc:	1ac6      	subs	r6, r0, r3
 80019be:	42b0      	cmp	r0, r6
 80019c0:	4180      	sbcs	r0, r0
 80019c2:	4240      	negs	r0, r0
 80019c4:	1a09      	subs	r1, r1, r0
 80019c6:	e65c      	b.n	8001682 <__aeabi_dsub+0x7a>
 80019c8:	000e      	movs	r6, r1
 80019ca:	4667      	mov	r7, ip
 80019cc:	4306      	orrs	r6, r0
 80019ce:	4317      	orrs	r7, r2
 80019d0:	2d00      	cmp	r5, #0
 80019d2:	d15e      	bne.n	8001a92 <__aeabi_dsub+0x48a>
 80019d4:	2e00      	cmp	r6, #0
 80019d6:	d000      	beq.n	80019da <__aeabi_dsub+0x3d2>
 80019d8:	e0f3      	b.n	8001bc2 <__aeabi_dsub+0x5ba>
 80019da:	2f00      	cmp	r7, #0
 80019dc:	d100      	bne.n	80019e0 <__aeabi_dsub+0x3d8>
 80019de:	e11e      	b.n	8001c1e <__aeabi_dsub+0x616>
 80019e0:	465c      	mov	r4, fp
 80019e2:	4661      	mov	r1, ip
 80019e4:	4691      	mov	r9, r2
 80019e6:	e72c      	b.n	8001842 <__aeabi_dsub+0x23a>
 80019e8:	4fa9      	ldr	r7, [pc, #676]	; (8001c90 <__aeabi_dsub+0x688>)
 80019ea:	42be      	cmp	r6, r7
 80019ec:	d07b      	beq.n	8001ae6 <__aeabi_dsub+0x4de>
 80019ee:	001e      	movs	r6, r3
 80019f0:	e6f1      	b.n	80017d6 <__aeabi_dsub+0x1ce>
 80019f2:	0010      	movs	r0, r2
 80019f4:	3d1f      	subs	r5, #31
 80019f6:	40e8      	lsrs	r0, r5
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	d003      	beq.n	8001a04 <__aeabi_dsub+0x3fc>
 80019fc:	2140      	movs	r1, #64	; 0x40
 80019fe:	1acb      	subs	r3, r1, r3
 8001a00:	409a      	lsls	r2, r3
 8001a02:	4316      	orrs	r6, r2
 8001a04:	1e73      	subs	r3, r6, #1
 8001a06:	419e      	sbcs	r6, r3
 8001a08:	2207      	movs	r2, #7
 8001a0a:	4306      	orrs	r6, r0
 8001a0c:	4032      	ands	r2, r6
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2500      	movs	r5, #0
 8001a12:	e783      	b.n	800191c <__aeabi_dsub+0x314>
 8001a14:	1a16      	subs	r6, r2, r0
 8001a16:	4663      	mov	r3, ip
 8001a18:	42b2      	cmp	r2, r6
 8001a1a:	4180      	sbcs	r0, r0
 8001a1c:	1a59      	subs	r1, r3, r1
 8001a1e:	4240      	negs	r0, r0
 8001a20:	1a0b      	subs	r3, r1, r0
 8001a22:	4698      	mov	r8, r3
 8001a24:	465c      	mov	r4, fp
 8001a26:	e632      	b.n	800168e <__aeabi_dsub+0x86>
 8001a28:	2e1f      	cmp	r6, #31
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dsub+0x426>
 8001a2c:	e0ab      	b.n	8001b86 <__aeabi_dsub+0x57e>
 8001a2e:	2720      	movs	r7, #32
 8001a30:	1bbb      	subs	r3, r7, r6
 8001a32:	469a      	mov	sl, r3
 8001a34:	4663      	mov	r3, ip
 8001a36:	4657      	mov	r7, sl
 8001a38:	40bb      	lsls	r3, r7
 8001a3a:	4699      	mov	r9, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	464f      	mov	r7, r9
 8001a40:	40f3      	lsrs	r3, r6
 8001a42:	431f      	orrs	r7, r3
 8001a44:	003b      	movs	r3, r7
 8001a46:	4657      	mov	r7, sl
 8001a48:	40ba      	lsls	r2, r7
 8001a4a:	1e57      	subs	r7, r2, #1
 8001a4c:	41ba      	sbcs	r2, r7
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	4662      	mov	r2, ip
 8001a52:	40f2      	lsrs	r2, r6
 8001a54:	1889      	adds	r1, r1, r2
 8001a56:	e698      	b.n	800178a <__aeabi_dsub+0x182>
 8001a58:	2720      	movs	r7, #32
 8001a5a:	1bbb      	subs	r3, r7, r6
 8001a5c:	469a      	mov	sl, r3
 8001a5e:	4663      	mov	r3, ip
 8001a60:	4657      	mov	r7, sl
 8001a62:	40bb      	lsls	r3, r7
 8001a64:	4699      	mov	r9, r3
 8001a66:	0013      	movs	r3, r2
 8001a68:	464f      	mov	r7, r9
 8001a6a:	40f3      	lsrs	r3, r6
 8001a6c:	431f      	orrs	r7, r3
 8001a6e:	003b      	movs	r3, r7
 8001a70:	4657      	mov	r7, sl
 8001a72:	40ba      	lsls	r2, r7
 8001a74:	1e57      	subs	r7, r2, #1
 8001a76:	41ba      	sbcs	r2, r7
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	4662      	mov	r2, ip
 8001a7c:	40f2      	lsrs	r2, r6
 8001a7e:	1a89      	subs	r1, r1, r2
 8001a80:	e79c      	b.n	80019bc <__aeabi_dsub+0x3b4>
 8001a82:	4b83      	ldr	r3, [pc, #524]	; (8001c90 <__aeabi_dsub+0x688>)
 8001a84:	429f      	cmp	r7, r3
 8001a86:	d05f      	beq.n	8001b48 <__aeabi_dsub+0x540>
 8001a88:	2580      	movs	r5, #128	; 0x80
 8001a8a:	042d      	lsls	r5, r5, #16
 8001a8c:	4273      	negs	r3, r6
 8001a8e:	4329      	orrs	r1, r5
 8001a90:	e720      	b.n	80018d4 <__aeabi_dsub+0x2cc>
 8001a92:	2e00      	cmp	r6, #0
 8001a94:	d10c      	bne.n	8001ab0 <__aeabi_dsub+0x4a8>
 8001a96:	2f00      	cmp	r7, #0
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dsub+0x494>
 8001a9a:	e0d0      	b.n	8001c3e <__aeabi_dsub+0x636>
 8001a9c:	465c      	mov	r4, fp
 8001a9e:	4661      	mov	r1, ip
 8001aa0:	4691      	mov	r9, r2
 8001aa2:	4d7b      	ldr	r5, [pc, #492]	; (8001c90 <__aeabi_dsub+0x688>)
 8001aa4:	e6cd      	b.n	8001842 <__aeabi_dsub+0x23a>
 8001aa6:	4f7a      	ldr	r7, [pc, #488]	; (8001c90 <__aeabi_dsub+0x688>)
 8001aa8:	42be      	cmp	r6, r7
 8001aaa:	d01c      	beq.n	8001ae6 <__aeabi_dsub+0x4de>
 8001aac:	001e      	movs	r6, r3
 8001aae:	e665      	b.n	800177c <__aeabi_dsub+0x174>
 8001ab0:	2f00      	cmp	r7, #0
 8001ab2:	d018      	beq.n	8001ae6 <__aeabi_dsub+0x4de>
 8001ab4:	08c0      	lsrs	r0, r0, #3
 8001ab6:	074e      	lsls	r6, r1, #29
 8001ab8:	4306      	orrs	r6, r0
 8001aba:	2080      	movs	r0, #128	; 0x80
 8001abc:	08c9      	lsrs	r1, r1, #3
 8001abe:	0300      	lsls	r0, r0, #12
 8001ac0:	4201      	tst	r1, r0
 8001ac2:	d008      	beq.n	8001ad6 <__aeabi_dsub+0x4ce>
 8001ac4:	4663      	mov	r3, ip
 8001ac6:	08dc      	lsrs	r4, r3, #3
 8001ac8:	4204      	tst	r4, r0
 8001aca:	d104      	bne.n	8001ad6 <__aeabi_dsub+0x4ce>
 8001acc:	0021      	movs	r1, r4
 8001ace:	46da      	mov	sl, fp
 8001ad0:	08d2      	lsrs	r2, r2, #3
 8001ad2:	075e      	lsls	r6, r3, #29
 8001ad4:	4316      	orrs	r6, r2
 8001ad6:	00f3      	lsls	r3, r6, #3
 8001ad8:	4699      	mov	r9, r3
 8001ada:	2401      	movs	r4, #1
 8001adc:	4653      	mov	r3, sl
 8001ade:	00c9      	lsls	r1, r1, #3
 8001ae0:	0f72      	lsrs	r2, r6, #29
 8001ae2:	4311      	orrs	r1, r2
 8001ae4:	401c      	ands	r4, r3
 8001ae6:	4d6a      	ldr	r5, [pc, #424]	; (8001c90 <__aeabi_dsub+0x688>)
 8001ae8:	e6ab      	b.n	8001842 <__aeabi_dsub+0x23a>
 8001aea:	001d      	movs	r5, r3
 8001aec:	2200      	movs	r2, #0
 8001aee:	2700      	movs	r7, #0
 8001af0:	e6b4      	b.n	800185c <__aeabi_dsub+0x254>
 8001af2:	2d00      	cmp	r5, #0
 8001af4:	d159      	bne.n	8001baa <__aeabi_dsub+0x5a2>
 8001af6:	000b      	movs	r3, r1
 8001af8:	4303      	orrs	r3, r0
 8001afa:	d100      	bne.n	8001afe <__aeabi_dsub+0x4f6>
 8001afc:	e6d6      	b.n	80018ac <__aeabi_dsub+0x2a4>
 8001afe:	1c73      	adds	r3, r6, #1
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x4fc>
 8001b02:	e0b2      	b.n	8001c6a <__aeabi_dsub+0x662>
 8001b04:	4b62      	ldr	r3, [pc, #392]	; (8001c90 <__aeabi_dsub+0x688>)
 8001b06:	429f      	cmp	r7, r3
 8001b08:	d01e      	beq.n	8001b48 <__aeabi_dsub+0x540>
 8001b0a:	43f3      	mvns	r3, r6
 8001b0c:	2b38      	cmp	r3, #56	; 0x38
 8001b0e:	dc6f      	bgt.n	8001bf0 <__aeabi_dsub+0x5e8>
 8001b10:	2b1f      	cmp	r3, #31
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0x50e>
 8001b14:	e097      	b.n	8001c46 <__aeabi_dsub+0x63e>
 8001b16:	2520      	movs	r5, #32
 8001b18:	000e      	movs	r6, r1
 8001b1a:	1aed      	subs	r5, r5, r3
 8001b1c:	40ae      	lsls	r6, r5
 8001b1e:	46b0      	mov	r8, r6
 8001b20:	0006      	movs	r6, r0
 8001b22:	46aa      	mov	sl, r5
 8001b24:	40de      	lsrs	r6, r3
 8001b26:	4645      	mov	r5, r8
 8001b28:	4335      	orrs	r5, r6
 8001b2a:	002e      	movs	r6, r5
 8001b2c:	4655      	mov	r5, sl
 8001b2e:	40a8      	lsls	r0, r5
 8001b30:	40d9      	lsrs	r1, r3
 8001b32:	1e45      	subs	r5, r0, #1
 8001b34:	41a8      	sbcs	r0, r5
 8001b36:	448c      	add	ip, r1
 8001b38:	4306      	orrs	r6, r0
 8001b3a:	18b6      	adds	r6, r6, r2
 8001b3c:	4296      	cmp	r6, r2
 8001b3e:	4192      	sbcs	r2, r2
 8001b40:	4251      	negs	r1, r2
 8001b42:	4461      	add	r1, ip
 8001b44:	003d      	movs	r5, r7
 8001b46:	e625      	b.n	8001794 <__aeabi_dsub+0x18c>
 8001b48:	003d      	movs	r5, r7
 8001b4a:	4661      	mov	r1, ip
 8001b4c:	4691      	mov	r9, r2
 8001b4e:	e678      	b.n	8001842 <__aeabi_dsub+0x23a>
 8001b50:	000b      	movs	r3, r1
 8001b52:	4303      	orrs	r3, r0
 8001b54:	2d00      	cmp	r5, #0
 8001b56:	d000      	beq.n	8001b5a <__aeabi_dsub+0x552>
 8001b58:	e655      	b.n	8001806 <__aeabi_dsub+0x1fe>
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f5      	beq.n	8001b4a <__aeabi_dsub+0x542>
 8001b5e:	4663      	mov	r3, ip
 8001b60:	4313      	orrs	r3, r2
 8001b62:	d100      	bne.n	8001b66 <__aeabi_dsub+0x55e>
 8001b64:	e66d      	b.n	8001842 <__aeabi_dsub+0x23a>
 8001b66:	1886      	adds	r6, r0, r2
 8001b68:	4286      	cmp	r6, r0
 8001b6a:	4180      	sbcs	r0, r0
 8001b6c:	4461      	add	r1, ip
 8001b6e:	4240      	negs	r0, r0
 8001b70:	1809      	adds	r1, r1, r0
 8001b72:	2200      	movs	r2, #0
 8001b74:	020b      	lsls	r3, r1, #8
 8001b76:	d400      	bmi.n	8001b7a <__aeabi_dsub+0x572>
 8001b78:	e6d0      	b.n	800191c <__aeabi_dsub+0x314>
 8001b7a:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <__aeabi_dsub+0x68c>)
 8001b7c:	3501      	adds	r5, #1
 8001b7e:	4019      	ands	r1, r3
 8001b80:	e5b2      	b.n	80016e8 <__aeabi_dsub+0xe0>
 8001b82:	46b1      	mov	r9, r6
 8001b84:	e65d      	b.n	8001842 <__aeabi_dsub+0x23a>
 8001b86:	0033      	movs	r3, r6
 8001b88:	4667      	mov	r7, ip
 8001b8a:	3b20      	subs	r3, #32
 8001b8c:	40df      	lsrs	r7, r3
 8001b8e:	003b      	movs	r3, r7
 8001b90:	2e20      	cmp	r6, #32
 8001b92:	d005      	beq.n	8001ba0 <__aeabi_dsub+0x598>
 8001b94:	2740      	movs	r7, #64	; 0x40
 8001b96:	1bbf      	subs	r7, r7, r6
 8001b98:	4666      	mov	r6, ip
 8001b9a:	40be      	lsls	r6, r7
 8001b9c:	4332      	orrs	r2, r6
 8001b9e:	4690      	mov	r8, r2
 8001ba0:	4646      	mov	r6, r8
 8001ba2:	1e72      	subs	r2, r6, #1
 8001ba4:	4196      	sbcs	r6, r2
 8001ba6:	4333      	orrs	r3, r6
 8001ba8:	e5ef      	b.n	800178a <__aeabi_dsub+0x182>
 8001baa:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <__aeabi_dsub+0x688>)
 8001bac:	429f      	cmp	r7, r3
 8001bae:	d0cb      	beq.n	8001b48 <__aeabi_dsub+0x540>
 8001bb0:	2580      	movs	r5, #128	; 0x80
 8001bb2:	042d      	lsls	r5, r5, #16
 8001bb4:	4273      	negs	r3, r6
 8001bb6:	4329      	orrs	r1, r5
 8001bb8:	e7a8      	b.n	8001b0c <__aeabi_dsub+0x504>
 8001bba:	4308      	orrs	r0, r1
 8001bbc:	1e41      	subs	r1, r0, #1
 8001bbe:	4188      	sbcs	r0, r1
 8001bc0:	e6a2      	b.n	8001908 <__aeabi_dsub+0x300>
 8001bc2:	2f00      	cmp	r7, #0
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x5c0>
 8001bc6:	e63c      	b.n	8001842 <__aeabi_dsub+0x23a>
 8001bc8:	4663      	mov	r3, ip
 8001bca:	1a86      	subs	r6, r0, r2
 8001bcc:	1acf      	subs	r7, r1, r3
 8001bce:	42b0      	cmp	r0, r6
 8001bd0:	419b      	sbcs	r3, r3
 8001bd2:	425b      	negs	r3, r3
 8001bd4:	1afb      	subs	r3, r7, r3
 8001bd6:	4698      	mov	r8, r3
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	d54e      	bpl.n	8001c7a <__aeabi_dsub+0x672>
 8001bdc:	1a16      	subs	r6, r2, r0
 8001bde:	4663      	mov	r3, ip
 8001be0:	42b2      	cmp	r2, r6
 8001be2:	4192      	sbcs	r2, r2
 8001be4:	1a59      	subs	r1, r3, r1
 8001be6:	4252      	negs	r2, r2
 8001be8:	1a89      	subs	r1, r1, r2
 8001bea:	465c      	mov	r4, fp
 8001bec:	2200      	movs	r2, #0
 8001bee:	e57b      	b.n	80016e8 <__aeabi_dsub+0xe0>
 8001bf0:	4301      	orrs	r1, r0
 8001bf2:	000e      	movs	r6, r1
 8001bf4:	1e71      	subs	r1, r6, #1
 8001bf6:	418e      	sbcs	r6, r1
 8001bf8:	e79f      	b.n	8001b3a <__aeabi_dsub+0x532>
 8001bfa:	001d      	movs	r5, r3
 8001bfc:	000e      	movs	r6, r1
 8001bfe:	3d20      	subs	r5, #32
 8001c00:	40ee      	lsrs	r6, r5
 8001c02:	46b0      	mov	r8, r6
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d004      	beq.n	8001c12 <__aeabi_dsub+0x60a>
 8001c08:	2540      	movs	r5, #64	; 0x40
 8001c0a:	1aeb      	subs	r3, r5, r3
 8001c0c:	4099      	lsls	r1, r3
 8001c0e:	4308      	orrs	r0, r1
 8001c10:	4681      	mov	r9, r0
 8001c12:	4648      	mov	r0, r9
 8001c14:	4643      	mov	r3, r8
 8001c16:	1e41      	subs	r1, r0, #1
 8001c18:	4188      	sbcs	r0, r1
 8001c1a:	4318      	orrs	r0, r3
 8001c1c:	e674      	b.n	8001908 <__aeabi_dsub+0x300>
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2400      	movs	r4, #0
 8001c22:	e617      	b.n	8001854 <__aeabi_dsub+0x24c>
 8001c24:	1a16      	subs	r6, r2, r0
 8001c26:	4663      	mov	r3, ip
 8001c28:	42b2      	cmp	r2, r6
 8001c2a:	4192      	sbcs	r2, r2
 8001c2c:	1a59      	subs	r1, r3, r1
 8001c2e:	4252      	negs	r2, r2
 8001c30:	1a89      	subs	r1, r1, r2
 8001c32:	003d      	movs	r5, r7
 8001c34:	e525      	b.n	8001682 <__aeabi_dsub+0x7a>
 8001c36:	4661      	mov	r1, ip
 8001c38:	4691      	mov	r9, r2
 8001c3a:	4d15      	ldr	r5, [pc, #84]	; (8001c90 <__aeabi_dsub+0x688>)
 8001c3c:	e601      	b.n	8001842 <__aeabi_dsub+0x23a>
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	2400      	movs	r4, #0
 8001c42:	0312      	lsls	r2, r2, #12
 8001c44:	e679      	b.n	800193a <__aeabi_dsub+0x332>
 8001c46:	001d      	movs	r5, r3
 8001c48:	000e      	movs	r6, r1
 8001c4a:	3d20      	subs	r5, #32
 8001c4c:	40ee      	lsrs	r6, r5
 8001c4e:	46b0      	mov	r8, r6
 8001c50:	2b20      	cmp	r3, #32
 8001c52:	d004      	beq.n	8001c5e <__aeabi_dsub+0x656>
 8001c54:	2540      	movs	r5, #64	; 0x40
 8001c56:	1aeb      	subs	r3, r5, r3
 8001c58:	4099      	lsls	r1, r3
 8001c5a:	4308      	orrs	r0, r1
 8001c5c:	4681      	mov	r9, r0
 8001c5e:	464e      	mov	r6, r9
 8001c60:	4643      	mov	r3, r8
 8001c62:	1e71      	subs	r1, r6, #1
 8001c64:	418e      	sbcs	r6, r1
 8001c66:	431e      	orrs	r6, r3
 8001c68:	e767      	b.n	8001b3a <__aeabi_dsub+0x532>
 8001c6a:	1886      	adds	r6, r0, r2
 8001c6c:	4296      	cmp	r6, r2
 8001c6e:	419b      	sbcs	r3, r3
 8001c70:	4461      	add	r1, ip
 8001c72:	425b      	negs	r3, r3
 8001c74:	18c9      	adds	r1, r1, r3
 8001c76:	003d      	movs	r5, r7
 8001c78:	e58c      	b.n	8001794 <__aeabi_dsub+0x18c>
 8001c7a:	4647      	mov	r7, r8
 8001c7c:	4337      	orrs	r7, r6
 8001c7e:	d0ce      	beq.n	8001c1e <__aeabi_dsub+0x616>
 8001c80:	2207      	movs	r2, #7
 8001c82:	4641      	mov	r1, r8
 8001c84:	4032      	ands	r2, r6
 8001c86:	e649      	b.n	800191c <__aeabi_dsub+0x314>
 8001c88:	2700      	movs	r7, #0
 8001c8a:	003a      	movs	r2, r7
 8001c8c:	e5e6      	b.n	800185c <__aeabi_dsub+0x254>
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	000007ff 	.word	0x000007ff
 8001c94:	ff7fffff 	.word	0xff7fffff

08001c98 <__aeabi_dcmpun>:
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	4e0c      	ldr	r6, [pc, #48]	; (8001ccc <__aeabi_dcmpun+0x34>)
 8001c9c:	030d      	lsls	r5, r1, #12
 8001c9e:	031c      	lsls	r4, r3, #12
 8001ca0:	0049      	lsls	r1, r1, #1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	0b2d      	lsrs	r5, r5, #12
 8001ca6:	0d49      	lsrs	r1, r1, #21
 8001ca8:	0b24      	lsrs	r4, r4, #12
 8001caa:	0d5b      	lsrs	r3, r3, #21
 8001cac:	42b1      	cmp	r1, r6
 8001cae:	d008      	beq.n	8001cc2 <__aeabi_dcmpun+0x2a>
 8001cb0:	4906      	ldr	r1, [pc, #24]	; (8001ccc <__aeabi_dcmpun+0x34>)
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	d103      	bne.n	8001cc0 <__aeabi_dcmpun+0x28>
 8001cb8:	4314      	orrs	r4, r2
 8001cba:	0020      	movs	r0, r4
 8001cbc:	1e44      	subs	r4, r0, #1
 8001cbe:	41a0      	sbcs	r0, r4
 8001cc0:	bd70      	pop	{r4, r5, r6, pc}
 8001cc2:	4305      	orrs	r5, r0
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	2d00      	cmp	r5, #0
 8001cc8:	d1fa      	bne.n	8001cc0 <__aeabi_dcmpun+0x28>
 8001cca:	e7f1      	b.n	8001cb0 <__aeabi_dcmpun+0x18>
 8001ccc:	000007ff 	.word	0x000007ff

08001cd0 <__aeabi_d2iz>:
 8001cd0:	b530      	push	{r4, r5, lr}
 8001cd2:	4d14      	ldr	r5, [pc, #80]	; (8001d24 <__aeabi_d2iz+0x54>)
 8001cd4:	030a      	lsls	r2, r1, #12
 8001cd6:	004b      	lsls	r3, r1, #1
 8001cd8:	0b12      	lsrs	r2, r2, #12
 8001cda:	0d5b      	lsrs	r3, r3, #21
 8001cdc:	0fc9      	lsrs	r1, r1, #31
 8001cde:	2400      	movs	r4, #0
 8001ce0:	42ab      	cmp	r3, r5
 8001ce2:	dd11      	ble.n	8001d08 <__aeabi_d2iz+0x38>
 8001ce4:	4c10      	ldr	r4, [pc, #64]	; (8001d28 <__aeabi_d2iz+0x58>)
 8001ce6:	42a3      	cmp	r3, r4
 8001ce8:	dc10      	bgt.n	8001d0c <__aeabi_d2iz+0x3c>
 8001cea:	2480      	movs	r4, #128	; 0x80
 8001cec:	0364      	lsls	r4, r4, #13
 8001cee:	4322      	orrs	r2, r4
 8001cf0:	4c0e      	ldr	r4, [pc, #56]	; (8001d2c <__aeabi_d2iz+0x5c>)
 8001cf2:	1ae4      	subs	r4, r4, r3
 8001cf4:	2c1f      	cmp	r4, #31
 8001cf6:	dd0c      	ble.n	8001d12 <__aeabi_d2iz+0x42>
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <__aeabi_d2iz+0x60>)
 8001cfa:	1ac3      	subs	r3, r0, r3
 8001cfc:	40da      	lsrs	r2, r3
 8001cfe:	0013      	movs	r3, r2
 8001d00:	425c      	negs	r4, r3
 8001d02:	2900      	cmp	r1, #0
 8001d04:	d100      	bne.n	8001d08 <__aeabi_d2iz+0x38>
 8001d06:	001c      	movs	r4, r3
 8001d08:	0020      	movs	r0, r4
 8001d0a:	bd30      	pop	{r4, r5, pc}
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <__aeabi_d2iz+0x64>)
 8001d0e:	18cc      	adds	r4, r1, r3
 8001d10:	e7fa      	b.n	8001d08 <__aeabi_d2iz+0x38>
 8001d12:	4d09      	ldr	r5, [pc, #36]	; (8001d38 <__aeabi_d2iz+0x68>)
 8001d14:	40e0      	lsrs	r0, r4
 8001d16:	46ac      	mov	ip, r5
 8001d18:	4463      	add	r3, ip
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	4303      	orrs	r3, r0
 8001d20:	e7ee      	b.n	8001d00 <__aeabi_d2iz+0x30>
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	000003fe 	.word	0x000003fe
 8001d28:	0000041d 	.word	0x0000041d
 8001d2c:	00000433 	.word	0x00000433
 8001d30:	00000413 	.word	0x00000413
 8001d34:	7fffffff 	.word	0x7fffffff
 8001d38:	fffffbed 	.word	0xfffffbed

08001d3c <__aeabi_ui2d>:
 8001d3c:	b510      	push	{r4, lr}
 8001d3e:	1e04      	subs	r4, r0, #0
 8001d40:	d025      	beq.n	8001d8e <__aeabi_ui2d+0x52>
 8001d42:	f000 f82d 	bl	8001da0 <__clzsi2>
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <__aeabi_ui2d+0x5c>)
 8001d48:	1a1b      	subs	r3, r3, r0
 8001d4a:	055b      	lsls	r3, r3, #21
 8001d4c:	0d5b      	lsrs	r3, r3, #21
 8001d4e:	280a      	cmp	r0, #10
 8001d50:	dd12      	ble.n	8001d78 <__aeabi_ui2d+0x3c>
 8001d52:	380b      	subs	r0, #11
 8001d54:	4084      	lsls	r4, r0
 8001d56:	2200      	movs	r2, #0
 8001d58:	0324      	lsls	r4, r4, #12
 8001d5a:	0b24      	lsrs	r4, r4, #12
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	0010      	movs	r0, r2
 8001d60:	0324      	lsls	r4, r4, #12
 8001d62:	0d0a      	lsrs	r2, r1, #20
 8001d64:	0b24      	lsrs	r4, r4, #12
 8001d66:	0512      	lsls	r2, r2, #20
 8001d68:	4322      	orrs	r2, r4
 8001d6a:	4c0c      	ldr	r4, [pc, #48]	; (8001d9c <__aeabi_ui2d+0x60>)
 8001d6c:	051b      	lsls	r3, r3, #20
 8001d6e:	4022      	ands	r2, r4
 8001d70:	4313      	orrs	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	0859      	lsrs	r1, r3, #1
 8001d76:	bd10      	pop	{r4, pc}
 8001d78:	0002      	movs	r2, r0
 8001d7a:	0021      	movs	r1, r4
 8001d7c:	3215      	adds	r2, #21
 8001d7e:	4091      	lsls	r1, r2
 8001d80:	000a      	movs	r2, r1
 8001d82:	210b      	movs	r1, #11
 8001d84:	1a08      	subs	r0, r1, r0
 8001d86:	40c4      	lsrs	r4, r0
 8001d88:	0324      	lsls	r4, r4, #12
 8001d8a:	0b24      	lsrs	r4, r4, #12
 8001d8c:	e7e6      	b.n	8001d5c <__aeabi_ui2d+0x20>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2400      	movs	r4, #0
 8001d92:	2200      	movs	r2, #0
 8001d94:	e7e2      	b.n	8001d5c <__aeabi_ui2d+0x20>
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	0000041e 	.word	0x0000041e
 8001d9c:	800fffff 	.word	0x800fffff

08001da0 <__clzsi2>:
 8001da0:	211c      	movs	r1, #28
 8001da2:	2301      	movs	r3, #1
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	4298      	cmp	r0, r3
 8001da8:	d301      	bcc.n	8001dae <__clzsi2+0xe>
 8001daa:	0c00      	lsrs	r0, r0, #16
 8001dac:	3910      	subs	r1, #16
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	4298      	cmp	r0, r3
 8001db2:	d301      	bcc.n	8001db8 <__clzsi2+0x18>
 8001db4:	0a00      	lsrs	r0, r0, #8
 8001db6:	3908      	subs	r1, #8
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	4298      	cmp	r0, r3
 8001dbc:	d301      	bcc.n	8001dc2 <__clzsi2+0x22>
 8001dbe:	0900      	lsrs	r0, r0, #4
 8001dc0:	3904      	subs	r1, #4
 8001dc2:	a202      	add	r2, pc, #8	; (adr r2, 8001dcc <__clzsi2+0x2c>)
 8001dc4:	5c10      	ldrb	r0, [r2, r0]
 8001dc6:	1840      	adds	r0, r0, r1
 8001dc8:	4770      	bx	lr
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	02020304 	.word	0x02020304
 8001dd0:	01010101 	.word	0x01010101
	...

08001ddc <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	0018      	movs	r0, r3
 8001de6:	230c      	movs	r3, #12
 8001de8:	001a      	movs	r2, r3
 8001dea:	2100      	movs	r1, #0
 8001dec:	f003 f91a 	bl	8005024 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8001df0:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001df2:	4a27      	ldr	r2, [pc, #156]	; (8001e90 <MX_ADC_Init+0xb4>)
 8001df4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001df6:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001dfc:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e02:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001e10:	2204      	movs	r2, #4
 8001e12:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001e2e:	22c2      	movs	r2, #194	; 0xc2
 8001e30:	32ff      	adds	r2, #255	; 0xff
 8001e32:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001e3c:	2224      	movs	r2, #36	; 0x24
 8001e3e:	2101      	movs	r1, #1
 8001e40:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f000 fdf6 	bl	8002a3c <HAL_ADC_Init>
 8001e50:	1e03      	subs	r3, r0, #0
 8001e52:	d001      	beq.n	8001e58 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001e54:	f000 fa2c 	bl	80022b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2280      	movs	r2, #128	; 0x80
 8001e62:	0152      	lsls	r2, r2, #5
 8001e64:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2280      	movs	r2, #128	; 0x80
 8001e6a:	0552      	lsls	r2, r2, #21
 8001e6c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001e6e:	1d3a      	adds	r2, r7, #4
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_ADC_Init+0xb0>)
 8001e72:	0011      	movs	r1, r2
 8001e74:	0018      	movs	r0, r3
 8001e76:	f000 ffbb 	bl	8002df0 <HAL_ADC_ConfigChannel>
 8001e7a:	1e03      	subs	r3, r0, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001e7e:	f000 fa17 	bl	80022b0 <Error_Handler>
  }

}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b004      	add	sp, #16
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	200000dc 	.word	0x200000dc
 8001e90:	40012400 	.word	0x40012400

08001e94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	2314      	movs	r3, #20
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	2314      	movs	r3, #20
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	f003 f8bc 	bl	8005024 <memset>
  if(adcHandle->Instance==ADC1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2d      	ldr	r2, [pc, #180]	; (8001f68 <HAL_ADC_MspInit+0xd4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d154      	bne.n	8001f60 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001ebc:	2180      	movs	r1, #128	; 0x80
 8001ebe:	0089      	lsls	r1, r1, #2
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	619a      	str	r2, [r3, #24]
 8001ec4:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001ec6:	699a      	ldr	r2, [r3, #24]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001ed8:	2180      	movs	r1, #128	; 0x80
 8001eda:	0289      	lsls	r1, r1, #10
 8001edc:	430a      	orrs	r2, r1
 8001ede:	615a      	str	r2, [r3, #20]
 8001ee0:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	029b      	lsls	r3, r3, #10
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eee:	2114      	movs	r1, #20
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef6:	187b      	adds	r3, r7, r1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	187a      	adds	r2, r7, r1
 8001f04:	2390      	movs	r3, #144	; 0x90
 8001f06:	05db      	lsls	r3, r3, #23
 8001f08:	0011      	movs	r1, r2
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f001 fc92 	bl	8003834 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_ADC_MspInit+0xdc>)
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <HAL_ADC_MspInit+0xe0>)
 8001f14:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <HAL_ADC_MspInit+0xdc>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_ADC_MspInit+0xdc>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_ADC_MspInit+0xdc>)
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_ADC_MspInit+0xdc>)
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	0092      	lsls	r2, r2, #2
 8001f2e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <HAL_ADC_MspInit+0xdc>)
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	0112      	lsls	r2, r2, #4
 8001f36:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_ADC_MspInit+0xdc>)
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <HAL_ADC_MspInit+0xdc>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_ADC_MspInit+0xdc>)
 8001f46:	0018      	movs	r0, r3
 8001f48:	f001 fadc 	bl	8003504 <HAL_DMA_Init>
 8001f4c:	1e03      	subs	r3, r0, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001f50:	f000 f9ae 	bl	80022b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <HAL_ADC_MspInit+0xdc>)
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_ADC_MspInit+0xdc>)
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b00a      	add	sp, #40	; 0x28
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40012400 	.word	0x40012400
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	20000098 	.word	0x20000098
 8001f74:	40020008 	.word	0x40020008

08001f78 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_DMA_Init+0x38>)
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_DMA_Init+0x38>)
 8001f84:	2101      	movs	r1, #1
 8001f86:	430a      	orrs	r2, r1
 8001f88:	615a      	str	r2, [r3, #20]
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_DMA_Init+0x38>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2009      	movs	r0, #9
 8001f9c:	f001 fa80 	bl	80034a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fa0:	2009      	movs	r0, #9
 8001fa2:	f001 fa92 	bl	80034ca <HAL_NVIC_EnableIRQ>

}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b002      	add	sp, #8
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <MX_GPIO_Init+0x48>)
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_GPIO_Init+0x48>)
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	0289      	lsls	r1, r1, #10
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	615a      	str	r2, [r3, #20]
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_GPIO_Init+0x48>)
 8001fca:	695a      	ldr	r2, [r3, #20]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	029b      	lsls	r3, r3, #10
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_GPIO_Init+0x48>)
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_GPIO_Init+0x48>)
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	02c9      	lsls	r1, r1, #11
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <MX_GPIO_Init+0x48>)
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	02db      	lsls	r3, r3, #11
 8001fec:	4013      	ands	r3, r2
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]

}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b002      	add	sp, #8
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	40021000 	.word	0x40021000

08002000 <pwm_blink_test>:
		  pwm_fade_up = 1;
	  }
}

void pwm_blink_test()
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
	  TIM2->CCR1 = 0;
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	05db      	lsls	r3, r3, #23
 800200a:	2200      	movs	r2, #0
 800200c:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 = 0;
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	05db      	lsls	r3, r3, #23
 8002012:	2200      	movs	r2, #0
 8002014:	639a      	str	r2, [r3, #56]	; 0x38

	  TIM3->CCR1 = 0;
 8002016:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <pwm_blink_test+0xc8>)
 8002018:	2200      	movs	r2, #0
 800201a:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR2 = 0;
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <pwm_blink_test+0xc8>)
 800201e:	2200      	movs	r2, #0
 8002020:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR3 = 0;
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <pwm_blink_test+0xc8>)
 8002024:	2200      	movs	r2, #0
 8002026:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR4 = 0;
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <pwm_blink_test+0xc8>)
 800202a:	2200      	movs	r2, #0
 800202c:	641a      	str	r2, [r3, #64]	; 0x40

	  TIM1->CCR1 = 0;
 800202e:	4b27      	ldr	r3, [pc, #156]	; (80020cc <pwm_blink_test+0xcc>)
 8002030:	2200      	movs	r2, #0
 8002032:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR2 = 0;
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <pwm_blink_test+0xcc>)
 8002036:	2200      	movs	r2, #0
 8002038:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM1->CCR3 = 0;
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <pwm_blink_test+0xcc>)
 800203c:	2200      	movs	r2, #0
 800203e:	63da      	str	r2, [r3, #60]	; 0x3c

	  HAL_Delay(pwm_delay);
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <pwm_blink_test+0xd0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0018      	movs	r0, r3
 8002046:	f000 fcd7 	bl	80029f8 <HAL_Delay>

	  uint32_t rootpwm = sqrt(adc_data_in[0]/16);
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <pwm_blink_test+0xd4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	091b      	lsrs	r3, r3, #4
 8002050:	0018      	movs	r0, r3
 8002052:	f7ff fe73 	bl	8001d3c <__aeabi_ui2d>
 8002056:	0003      	movs	r3, r0
 8002058:	000c      	movs	r4, r1
 800205a:	0018      	movs	r0, r3
 800205c:	0021      	movs	r1, r4
 800205e:	f002 ffe9 	bl	8005034 <sqrt>
 8002062:	0003      	movs	r3, r0
 8002064:	000c      	movs	r4, r1
 8002066:	0018      	movs	r0, r3
 8002068:	0021      	movs	r1, r4
 800206a:	f7fe f917 	bl	800029c <__aeabi_d2uiz>
 800206e:	0003      	movs	r3, r0
 8002070:	607b      	str	r3, [r7, #4]
	  if(rootpwm == 0) { rootpwm = 1; }
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <pwm_blink_test+0x7c>
 8002078:	2301      	movs	r3, #1
 800207a:	607b      	str	r3, [r7, #4]
	  TIM2->CCR1 = rootpwm;
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	05db      	lsls	r3, r3, #23
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 = rootpwm;
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	05db      	lsls	r3, r3, #23
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	639a      	str	r2, [r3, #56]	; 0x38

	  TIM3->CCR1 = rootpwm;
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <pwm_blink_test+0xc8>)
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR2 = rootpwm;
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <pwm_blink_test+0xc8>)
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR3 = rootpwm;
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <pwm_blink_test+0xc8>)
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR4 = rootpwm;
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <pwm_blink_test+0xc8>)
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40

	  TIM1->CCR1 = rootpwm;
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <pwm_blink_test+0xcc>)
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR2 = rootpwm;
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <pwm_blink_test+0xcc>)
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM1->CCR3 = rootpwm;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <pwm_blink_test+0xcc>)
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	63da      	str	r2, [r3, #60]	; 0x3c

	  HAL_Delay(pwm_delay);
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <pwm_blink_test+0xd0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 fc9c 	bl	80029f8 <HAL_Delay>
}
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b003      	add	sp, #12
 80020c6:	bd90      	pop	{r4, r7, pc}
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	20000004 	.word	0x20000004
 80020d4:	2000011c 	.word	0x2000011c

080020d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020dc:	f000 fc28 	bl	8002930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e0:	f000 f8a0 	bl	8002224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e4:	f7ff ff66 	bl	8001fb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80020e8:	f7ff ff46 	bl	8001f78 <MX_DMA_Init>
  MX_TIM1_Init();
 80020ec:	f000 f936 	bl	800235c <MX_TIM1_Init>
  MX_TIM3_Init();
 80020f0:	f000 fa66 	bl	80025c0 <MX_TIM3_Init>
  MX_TIM2_Init();
 80020f4:	f000 f9fc 	bl	80024f0 <MX_TIM2_Init>
  MX_ADC_Init();
 80020f8:	f7ff fe70 	bl	8001ddc <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  // setup all output channel timer PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);		// #1
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <main+0x12c>)
 80020fe:	2100      	movs	r1, #0
 8002100:	0018      	movs	r0, r3
 8002102:	f002 f9ad 	bl	8004460 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);		// #2
 8002106:	4b3f      	ldr	r3, [pc, #252]	; (8002204 <main+0x12c>)
 8002108:	2104      	movs	r1, #4
 800210a:	0018      	movs	r0, r3
 800210c:	f002 f9a8 	bl	8004460 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		// #3
 8002110:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <main+0x130>)
 8002112:	2100      	movs	r1, #0
 8002114:	0018      	movs	r0, r3
 8002116:	f002 f9a3 	bl	8004460 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);		// #4
 800211a:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <main+0x130>)
 800211c:	2104      	movs	r1, #4
 800211e:	0018      	movs	r0, r3
 8002120:	f002 f99e 	bl	8004460 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);		// #5
 8002124:	4b38      	ldr	r3, [pc, #224]	; (8002208 <main+0x130>)
 8002126:	2108      	movs	r1, #8
 8002128:	0018      	movs	r0, r3
 800212a:	f002 f999 	bl	8004460 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);		// #6
 800212e:	4b36      	ldr	r3, [pc, #216]	; (8002208 <main+0x130>)
 8002130:	210c      	movs	r1, #12
 8002132:	0018      	movs	r0, r3
 8002134:	f002 f994 	bl	8004460 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);		// #7
 8002138:	4b34      	ldr	r3, [pc, #208]	; (800220c <main+0x134>)
 800213a:	2100      	movs	r1, #0
 800213c:	0018      	movs	r0, r3
 800213e:	f002 f98f 	bl	8004460 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);		// #8
 8002142:	4b32      	ldr	r3, [pc, #200]	; (800220c <main+0x134>)
 8002144:	2104      	movs	r1, #4
 8002146:	0018      	movs	r0, r3
 8002148:	f002 f98a 	bl	8004460 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// #9
 800214c:	4b2f      	ldr	r3, [pc, #188]	; (800220c <main+0x134>)
 800214e:	2108      	movs	r1, #8
 8002150:	0018      	movs	r0, r3
 8002152:	f002 f985 	bl	8004460 <HAL_TIM_PWM_Start>

  // Capture/Compare output enable
  TIM2->CCER |= TIM_CCER_CC1E;
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	05db      	lsls	r3, r3, #23
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	05db      	lsls	r3, r3, #23
 8002160:	2101      	movs	r1, #1
 8002162:	430a      	orrs	r2, r1
 8002164:	621a      	str	r2, [r3, #32]
  TIM2->CCER |= TIM_CCER_CC2E;
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	05db      	lsls	r3, r3, #23
 800216a:	6a1a      	ldr	r2, [r3, #32]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	05db      	lsls	r3, r3, #23
 8002170:	2110      	movs	r1, #16
 8002172:	430a      	orrs	r2, r1
 8002174:	621a      	str	r2, [r3, #32]

  TIM3->CCER |= TIM_CCER_CC1E;
 8002176:	4b26      	ldr	r3, [pc, #152]	; (8002210 <main+0x138>)
 8002178:	6a1a      	ldr	r2, [r3, #32]
 800217a:	4b25      	ldr	r3, [pc, #148]	; (8002210 <main+0x138>)
 800217c:	2101      	movs	r1, #1
 800217e:	430a      	orrs	r2, r1
 8002180:	621a      	str	r2, [r3, #32]
  TIM3->CCER |= TIM_CCER_CC2E;
 8002182:	4b23      	ldr	r3, [pc, #140]	; (8002210 <main+0x138>)
 8002184:	6a1a      	ldr	r2, [r3, #32]
 8002186:	4b22      	ldr	r3, [pc, #136]	; (8002210 <main+0x138>)
 8002188:	2110      	movs	r1, #16
 800218a:	430a      	orrs	r2, r1
 800218c:	621a      	str	r2, [r3, #32]
  TIM3->CCER |= TIM_CCER_CC3E;
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <main+0x138>)
 8002190:	6a1a      	ldr	r2, [r3, #32]
 8002192:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <main+0x138>)
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0049      	lsls	r1, r1, #1
 8002198:	430a      	orrs	r2, r1
 800219a:	621a      	str	r2, [r3, #32]
  TIM3->CCER |= TIM_CCER_CC4E;
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <main+0x138>)
 800219e:	6a1a      	ldr	r2, [r3, #32]
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <main+0x138>)
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	0149      	lsls	r1, r1, #5
 80021a6:	430a      	orrs	r2, r1
 80021a8:	621a      	str	r2, [r3, #32]

  TIM1->CCER |= TIM_CCER_CC1E;
 80021aa:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <main+0x13c>)
 80021ac:	6a1a      	ldr	r2, [r3, #32]
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <main+0x13c>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	621a      	str	r2, [r3, #32]
  TIM1->CCER |= TIM_CCER_CC2E;
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <main+0x13c>)
 80021b8:	6a1a      	ldr	r2, [r3, #32]
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <main+0x13c>)
 80021bc:	2110      	movs	r1, #16
 80021be:	430a      	orrs	r2, r1
 80021c0:	621a      	str	r2, [r3, #32]
  TIM1->CCER |= TIM_CCER_CC3E;
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <main+0x13c>)
 80021c4:	6a1a      	ldr	r2, [r3, #32]
 80021c6:	4b13      	ldr	r3, [pc, #76]	; (8002214 <main+0x13c>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0049      	lsls	r1, r1, #1
 80021cc:	430a      	orrs	r2, r1
 80021ce:	621a      	str	r2, [r3, #32]

  // set the counter reset
  TIM1->ARR = pwm_arr;
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <main+0x140>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <main+0x13c>)
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->ARR = pwm_arr;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <main+0x140>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	05db      	lsls	r3, r3, #23
 80021e0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->ARR = pwm_arr;
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <main+0x140>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <main+0x138>)
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c

  HAL_ADCEx_Calibration_Start(&hadc);
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <main+0x144>)
 80021ec:	0018      	movs	r0, r3
 80021ee:	f001 f80d 	bl	800320c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, adc_data_in, ADC_MAX_DATA_POINTS);
 80021f2:	490b      	ldr	r1, [pc, #44]	; (8002220 <main+0x148>)
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <main+0x144>)
 80021f6:	2240      	movs	r2, #64	; 0x40
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 fd5f 	bl	8002cbc <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //pwm_fade_test();
	  pwm_blink_test();
 80021fe:	f7ff feff 	bl	8002000 <pwm_blink_test>
 8002202:	e7fc      	b.n	80021fe <main+0x126>
 8002204:	2000029c 	.word	0x2000029c
 8002208:	2000021c 	.word	0x2000021c
 800220c:	2000025c 	.word	0x2000025c
 8002210:	40000400 	.word	0x40000400
 8002214:	40012c00 	.word	0x40012c00
 8002218:	20000000 	.word	0x20000000
 800221c:	200000dc 	.word	0x200000dc
 8002220:	2000011c 	.word	0x2000011c

08002224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b091      	sub	sp, #68	; 0x44
 8002228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800222a:	2410      	movs	r4, #16
 800222c:	193b      	adds	r3, r7, r4
 800222e:	0018      	movs	r0, r3
 8002230:	2330      	movs	r3, #48	; 0x30
 8002232:	001a      	movs	r2, r3
 8002234:	2100      	movs	r1, #0
 8002236:	f002 fef5 	bl	8005024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800223a:	003b      	movs	r3, r7
 800223c:	0018      	movs	r0, r3
 800223e:	2310      	movs	r3, #16
 8002240:	001a      	movs	r2, r3
 8002242:	2100      	movs	r1, #0
 8002244:	f002 feee 	bl	8005024 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002248:	0021      	movs	r1, r4
 800224a:	187b      	adds	r3, r7, r1
 800224c:	2212      	movs	r2, #18
 800224e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002250:	187b      	adds	r3, r7, r1
 8002252:	2201      	movs	r2, #1
 8002254:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002256:	187b      	adds	r3, r7, r1
 8002258:	2201      	movs	r2, #1
 800225a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800225c:	187b      	adds	r3, r7, r1
 800225e:	2210      	movs	r2, #16
 8002260:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002262:	187b      	adds	r3, r7, r1
 8002264:	2210      	movs	r2, #16
 8002266:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002268:	187b      	adds	r3, r7, r1
 800226a:	2200      	movs	r2, #0
 800226c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800226e:	187b      	adds	r3, r7, r1
 8002270:	0018      	movs	r0, r3
 8002272:	f001 fc4f 	bl	8003b14 <HAL_RCC_OscConfig>
 8002276:	1e03      	subs	r3, r0, #0
 8002278:	d001      	beq.n	800227e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800227a:	f000 f819 	bl	80022b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800227e:	003b      	movs	r3, r7
 8002280:	2207      	movs	r2, #7
 8002282:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002284:	003b      	movs	r3, r7
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800228a:	003b      	movs	r3, r7
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002290:	003b      	movs	r3, r7
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002296:	003b      	movs	r3, r7
 8002298:	2100      	movs	r1, #0
 800229a:	0018      	movs	r0, r3
 800229c:	f001 ff56 	bl	800414c <HAL_RCC_ClockConfig>
 80022a0:	1e03      	subs	r3, r0, #0
 80022a2:	d001      	beq.n	80022a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80022a4:	f000 f804 	bl	80022b0 <Error_Handler>
  }
}
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b011      	add	sp, #68	; 0x44
 80022ae:	bd90      	pop	{r4, r7, pc}

080022b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_MspInit+0x44>)
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <HAL_MspInit+0x44>)
 80022c8:	2101      	movs	r1, #1
 80022ca:	430a      	orrs	r2, r1
 80022cc:	619a      	str	r2, [r3, #24]
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_MspInit+0x44>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2201      	movs	r2, #1
 80022d4:	4013      	ands	r3, r2
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_MspInit+0x44>)
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_MspInit+0x44>)
 80022e0:	2180      	movs	r1, #128	; 0x80
 80022e2:	0549      	lsls	r1, r1, #21
 80022e4:	430a      	orrs	r2, r1
 80022e6:	61da      	str	r2, [r3, #28]
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_MspInit+0x44>)
 80022ea:	69da      	ldr	r2, [r3, #28]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	055b      	lsls	r3, r3, #21
 80022f0:	4013      	ands	r3, r2
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b002      	add	sp, #8
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	40021000 	.word	0x40021000

08002304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <HardFault_Handler+0x4>

08002314 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800232c:	f000 fb48 	bl	80029c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <DMA1_Channel1_IRQHandler+0x14>)
 800233e:	0018      	movs	r0, r3
 8002340:	f001 f98e 	bl	8003660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	20000098 	.word	0x20000098

08002350 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b096      	sub	sp, #88	; 0x58
 8002360:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002362:	2348      	movs	r3, #72	; 0x48
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	0018      	movs	r0, r3
 8002368:	2310      	movs	r3, #16
 800236a:	001a      	movs	r2, r3
 800236c:	2100      	movs	r1, #0
 800236e:	f002 fe59 	bl	8005024 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002372:	2340      	movs	r3, #64	; 0x40
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	0018      	movs	r0, r3
 8002378:	2308      	movs	r3, #8
 800237a:	001a      	movs	r2, r3
 800237c:	2100      	movs	r1, #0
 800237e:	f002 fe51 	bl	8005024 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002382:	2324      	movs	r3, #36	; 0x24
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	0018      	movs	r0, r3
 8002388:	231c      	movs	r3, #28
 800238a:	001a      	movs	r2, r3
 800238c:	2100      	movs	r1, #0
 800238e:	f002 fe49 	bl	8005024 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	0018      	movs	r0, r3
 8002396:	2320      	movs	r3, #32
 8002398:	001a      	movs	r2, r3
 800239a:	2100      	movs	r1, #0
 800239c:	f002 fe42 	bl	8005024 <memset>

  htim1.Instance = TIM1;
 80023a0:	4b51      	ldr	r3, [pc, #324]	; (80024e8 <MX_TIM1_Init+0x18c>)
 80023a2:	4a52      	ldr	r2, [pc, #328]	; (80024ec <MX_TIM1_Init+0x190>)
 80023a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80023a6:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <MX_TIM1_Init+0x18c>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b4e      	ldr	r3, [pc, #312]	; (80024e8 <MX_TIM1_Init+0x18c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80023b2:	4b4d      	ldr	r3, [pc, #308]	; (80024e8 <MX_TIM1_Init+0x18c>)
 80023b4:	22ff      	movs	r2, #255	; 0xff
 80023b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b8:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <MX_TIM1_Init+0x18c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023be:	4b4a      	ldr	r3, [pc, #296]	; (80024e8 <MX_TIM1_Init+0x18c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c4:	4b48      	ldr	r3, [pc, #288]	; (80024e8 <MX_TIM1_Init+0x18c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <MX_TIM1_Init+0x18c>)
 80023cc:	0018      	movs	r0, r3
 80023ce:	f001 ffef 	bl	80043b0 <HAL_TIM_Base_Init>
 80023d2:	1e03      	subs	r3, r0, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80023d6:	f7ff ff6b 	bl	80022b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023da:	2148      	movs	r1, #72	; 0x48
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	0152      	lsls	r2, r2, #5
 80023e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023e4:	187a      	adds	r2, r7, r1
 80023e6:	4b40      	ldr	r3, [pc, #256]	; (80024e8 <MX_TIM1_Init+0x18c>)
 80023e8:	0011      	movs	r1, r2
 80023ea:	0018      	movs	r0, r3
 80023ec:	f002 f93c 	bl	8004668 <HAL_TIM_ConfigClockSource>
 80023f0:	1e03      	subs	r3, r0, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80023f4:	f7ff ff5c 	bl	80022b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023f8:	4b3b      	ldr	r3, [pc, #236]	; (80024e8 <MX_TIM1_Init+0x18c>)
 80023fa:	0018      	movs	r0, r3
 80023fc:	f002 f804 	bl	8004408 <HAL_TIM_PWM_Init>
 8002400:	1e03      	subs	r3, r0, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002404:	f7ff ff54 	bl	80022b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002408:	2140      	movs	r1, #64	; 0x40
 800240a:	187b      	adds	r3, r7, r1
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002410:	187b      	adds	r3, r7, r1
 8002412:	2200      	movs	r2, #0
 8002414:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002416:	187a      	adds	r2, r7, r1
 8002418:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <MX_TIM1_Init+0x18c>)
 800241a:	0011      	movs	r1, r2
 800241c:	0018      	movs	r0, r3
 800241e:	f002 fd1b 	bl	8004e58 <HAL_TIMEx_MasterConfigSynchronization>
 8002422:	1e03      	subs	r3, r0, #0
 8002424:	d001      	beq.n	800242a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8002426:	f7ff ff43 	bl	80022b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800242a:	2124      	movs	r1, #36	; 0x24
 800242c:	187b      	adds	r3, r7, r1
 800242e:	2260      	movs	r2, #96	; 0x60
 8002430:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002432:	187b      	adds	r3, r7, r1
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002438:	187b      	adds	r3, r7, r1
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800243e:	187b      	adds	r3, r7, r1
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002444:	187b      	adds	r3, r7, r1
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800244a:	187b      	adds	r3, r7, r1
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002450:	187b      	adds	r3, r7, r1
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002456:	1879      	adds	r1, r7, r1
 8002458:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <MX_TIM1_Init+0x18c>)
 800245a:	2200      	movs	r2, #0
 800245c:	0018      	movs	r0, r3
 800245e:	f002 f84b 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 8002462:	1e03      	subs	r3, r0, #0
 8002464:	d001      	beq.n	800246a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002466:	f7ff ff23 	bl	80022b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800246a:	2324      	movs	r3, #36	; 0x24
 800246c:	18f9      	adds	r1, r7, r3
 800246e:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <MX_TIM1_Init+0x18c>)
 8002470:	2204      	movs	r2, #4
 8002472:	0018      	movs	r0, r3
 8002474:	f002 f840 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 8002478:	1e03      	subs	r3, r0, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 800247c:	f7ff ff18 	bl	80022b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002480:	2324      	movs	r3, #36	; 0x24
 8002482:	18f9      	adds	r1, r7, r3
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <MX_TIM1_Init+0x18c>)
 8002486:	2208      	movs	r2, #8
 8002488:	0018      	movs	r0, r3
 800248a:	f002 f835 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 800248e:	1e03      	subs	r3, r0, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8002492:	f7ff ff0d 	bl	80022b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	0192      	lsls	r2, r2, #6
 80024ba:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024c2:	1d3a      	adds	r2, r7, #4
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <MX_TIM1_Init+0x18c>)
 80024c6:	0011      	movs	r1, r2
 80024c8:	0018      	movs	r0, r3
 80024ca:	f002 fd23 	bl	8004f14 <HAL_TIMEx_ConfigBreakDeadTime>
 80024ce:	1e03      	subs	r3, r0, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80024d2:	f7ff feed 	bl	80022b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <MX_TIM1_Init+0x18c>)
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 f93f 	bl	800275c <HAL_TIM_MspPostInit>

}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b016      	add	sp, #88	; 0x58
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	2000025c 	.word	0x2000025c
 80024ec:	40012c00 	.word	0x40012c00

080024f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f6:	2320      	movs	r3, #32
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	0018      	movs	r0, r3
 80024fc:	2308      	movs	r3, #8
 80024fe:	001a      	movs	r2, r3
 8002500:	2100      	movs	r1, #0
 8002502:	f002 fd8f 	bl	8005024 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	0018      	movs	r0, r3
 800250a:	231c      	movs	r3, #28
 800250c:	001a      	movs	r2, r3
 800250e:	2100      	movs	r1, #0
 8002510:	f002 fd88 	bl	8005024 <memset>

  htim2.Instance = TIM2;
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <MX_TIM2_Init+0xcc>)
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	05d2      	lsls	r2, r2, #23
 800251a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <MX_TIM2_Init+0xcc>)
 800251e:	2201      	movs	r2, #1
 8002520:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <MX_TIM2_Init+0xcc>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64;
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <MX_TIM2_Init+0xcc>)
 800252a:	2240      	movs	r2, #64	; 0x40
 800252c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800252e:	4b23      	ldr	r3, [pc, #140]	; (80025bc <MX_TIM2_Init+0xcc>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002534:	4b21      	ldr	r3, [pc, #132]	; (80025bc <MX_TIM2_Init+0xcc>)
 8002536:	2200      	movs	r2, #0
 8002538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <MX_TIM2_Init+0xcc>)
 800253c:	0018      	movs	r0, r3
 800253e:	f001 ff63 	bl	8004408 <HAL_TIM_PWM_Init>
 8002542:	1e03      	subs	r3, r0, #0
 8002544:	d001      	beq.n	800254a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002546:	f7ff feb3 	bl	80022b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254a:	2120      	movs	r1, #32
 800254c:	187b      	adds	r3, r7, r1
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002552:	187b      	adds	r3, r7, r1
 8002554:	2200      	movs	r2, #0
 8002556:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002558:	187a      	adds	r2, r7, r1
 800255a:	4b18      	ldr	r3, [pc, #96]	; (80025bc <MX_TIM2_Init+0xcc>)
 800255c:	0011      	movs	r1, r2
 800255e:	0018      	movs	r0, r3
 8002560:	f002 fc7a 	bl	8004e58 <HAL_TIMEx_MasterConfigSynchronization>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d001      	beq.n	800256c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002568:	f7ff fea2 	bl	80022b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	2260      	movs	r2, #96	; 0x60
 8002570:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	2200      	movs	r2, #0
 8002576:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002584:	1d39      	adds	r1, r7, #4
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <MX_TIM2_Init+0xcc>)
 8002588:	2200      	movs	r2, #0
 800258a:	0018      	movs	r0, r3
 800258c:	f001 ffb4 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 8002590:	1e03      	subs	r3, r0, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8002594:	f7ff fe8c 	bl	80022b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002598:	1d39      	adds	r1, r7, #4
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <MX_TIM2_Init+0xcc>)
 800259c:	2204      	movs	r2, #4
 800259e:	0018      	movs	r0, r3
 80025a0:	f001 ffaa 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 80025a4:	1e03      	subs	r3, r0, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80025a8:	f7ff fe82 	bl	80022b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <MX_TIM2_Init+0xcc>)
 80025ae:	0018      	movs	r0, r3
 80025b0:	f000 f8d4 	bl	800275c <HAL_TIM_MspPostInit>

}
 80025b4:	46c0      	nop			; (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b00a      	add	sp, #40	; 0x28
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	2000029c 	.word	0x2000029c

080025c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c6:	2320      	movs	r3, #32
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	0018      	movs	r0, r3
 80025cc:	2308      	movs	r3, #8
 80025ce:	001a      	movs	r2, r3
 80025d0:	2100      	movs	r1, #0
 80025d2:	f002 fd27 	bl	8005024 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	0018      	movs	r0, r3
 80025da:	231c      	movs	r3, #28
 80025dc:	001a      	movs	r2, r3
 80025de:	2100      	movs	r1, #0
 80025e0:	f002 fd20 	bl	8005024 <memset>

  htim3.Instance = TIM3;
 80025e4:	4b33      	ldr	r3, [pc, #204]	; (80026b4 <MX_TIM3_Init+0xf4>)
 80025e6:	4a34      	ldr	r2, [pc, #208]	; (80026b8 <MX_TIM3_Init+0xf8>)
 80025e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80025ea:	4b32      	ldr	r3, [pc, #200]	; (80026b4 <MX_TIM3_Init+0xf4>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f0:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <MX_TIM3_Init+0xf4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80025f6:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <MX_TIM3_Init+0xf4>)
 80025f8:	22ff      	movs	r2, #255	; 0xff
 80025fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fc:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <MX_TIM3_Init+0xf4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002602:	4b2c      	ldr	r3, [pc, #176]	; (80026b4 <MX_TIM3_Init+0xf4>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002608:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <MX_TIM3_Init+0xf4>)
 800260a:	0018      	movs	r0, r3
 800260c:	f001 fefc 	bl	8004408 <HAL_TIM_PWM_Init>
 8002610:	1e03      	subs	r3, r0, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002614:	f7ff fe4c 	bl	80022b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002618:	2120      	movs	r1, #32
 800261a:	187b      	adds	r3, r7, r1
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002620:	187b      	adds	r3, r7, r1
 8002622:	2200      	movs	r2, #0
 8002624:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002626:	187a      	adds	r2, r7, r1
 8002628:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <MX_TIM3_Init+0xf4>)
 800262a:	0011      	movs	r1, r2
 800262c:	0018      	movs	r0, r3
 800262e:	f002 fc13 	bl	8004e58 <HAL_TIMEx_MasterConfigSynchronization>
 8002632:	1e03      	subs	r3, r0, #0
 8002634:	d001      	beq.n	800263a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002636:	f7ff fe3b 	bl	80022b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	2260      	movs	r2, #96	; 0x60
 800263e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2200      	movs	r2, #0
 8002644:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	2200      	movs	r2, #0
 8002650:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002652:	1d39      	adds	r1, r7, #4
 8002654:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <MX_TIM3_Init+0xf4>)
 8002656:	2200      	movs	r2, #0
 8002658:	0018      	movs	r0, r3
 800265a:	f001 ff4d 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 800265e:	1e03      	subs	r3, r0, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8002662:	f7ff fe25 	bl	80022b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002666:	1d39      	adds	r1, r7, #4
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <MX_TIM3_Init+0xf4>)
 800266a:	2204      	movs	r2, #4
 800266c:	0018      	movs	r0, r3
 800266e:	f001 ff43 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 8002672:	1e03      	subs	r3, r0, #0
 8002674:	d001      	beq.n	800267a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8002676:	f7ff fe1b 	bl	80022b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800267a:	1d39      	adds	r1, r7, #4
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <MX_TIM3_Init+0xf4>)
 800267e:	2208      	movs	r2, #8
 8002680:	0018      	movs	r0, r3
 8002682:	f001 ff39 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 8002686:	1e03      	subs	r3, r0, #0
 8002688:	d001      	beq.n	800268e <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800268a:	f7ff fe11 	bl	80022b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800268e:	1d39      	adds	r1, r7, #4
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <MX_TIM3_Init+0xf4>)
 8002692:	220c      	movs	r2, #12
 8002694:	0018      	movs	r0, r3
 8002696:	f001 ff2f 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 800269a:	1e03      	subs	r3, r0, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800269e:	f7ff fe07 	bl	80022b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <MX_TIM3_Init+0xf4>)
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 f859 	bl	800275c <HAL_TIM_MspPostInit>

}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b00a      	add	sp, #40	; 0x28
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	2000021c 	.word	0x2000021c
 80026b8:	40000400 	.word	0x40000400

080026bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <HAL_TIM_Base_MspInit+0x38>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d10d      	bne.n	80026ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_TIM_Base_MspInit+0x3c>)
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_TIM_Base_MspInit+0x3c>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0109      	lsls	r1, r1, #4
 80026d8:	430a      	orrs	r2, r1
 80026da:	619a      	str	r2, [r3, #24]
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_TIM_Base_MspInit+0x3c>)
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b004      	add	sp, #16
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	40012c00 	.word	0x40012c00
 80026f8:	40021000 	.word	0x40021000

080026fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	05db      	lsls	r3, r3, #23
 800270c:	429a      	cmp	r2, r3
 800270e:	d10c      	bne.n	800272a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002710:	4b10      	ldr	r3, [pc, #64]	; (8002754 <HAL_TIM_PWM_MspInit+0x58>)
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_TIM_PWM_MspInit+0x58>)
 8002716:	2101      	movs	r1, #1
 8002718:	430a      	orrs	r2, r1
 800271a:	61da      	str	r2, [r3, #28]
 800271c:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <HAL_TIM_PWM_MspInit+0x58>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2201      	movs	r2, #1
 8002722:	4013      	ands	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002728:	e010      	b.n	800274c <HAL_TIM_PWM_MspInit+0x50>
  else if(tim_pwmHandle->Instance==TIM3)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <HAL_TIM_PWM_MspInit+0x5c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d10b      	bne.n	800274c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <HAL_TIM_PWM_MspInit+0x58>)
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_TIM_PWM_MspInit+0x58>)
 800273a:	2102      	movs	r1, #2
 800273c:	430a      	orrs	r2, r1
 800273e:	61da      	str	r2, [r3, #28]
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_TIM_PWM_MspInit+0x58>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2202      	movs	r2, #2
 8002746:	4013      	ands	r3, r2
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
}
 800274c:	46c0      	nop			; (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b004      	add	sp, #16
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	40000400 	.word	0x40000400

0800275c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b08d      	sub	sp, #52	; 0x34
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	231c      	movs	r3, #28
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	0018      	movs	r0, r3
 800276a:	2314      	movs	r3, #20
 800276c:	001a      	movs	r2, r3
 800276e:	2100      	movs	r1, #0
 8002770:	f002 fc58 	bl	8005024 <memset>
  if(timHandle->Instance==TIM1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a54      	ldr	r2, [pc, #336]	; (80028cc <HAL_TIM_MspPostInit+0x170>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d126      	bne.n	80027cc <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	4b54      	ldr	r3, [pc, #336]	; (80028d0 <HAL_TIM_MspPostInit+0x174>)
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_TIM_MspPostInit+0x174>)
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	0289      	lsls	r1, r1, #10
 8002788:	430a      	orrs	r2, r1
 800278a:	615a      	str	r2, [r3, #20]
 800278c:	4b50      	ldr	r3, [pc, #320]	; (80028d0 <HAL_TIM_MspPostInit+0x174>)
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	029b      	lsls	r3, r3, #10
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800279a:	211c      	movs	r1, #28
 800279c:	187b      	adds	r3, r7, r1
 800279e:	22e0      	movs	r2, #224	; 0xe0
 80027a0:	00d2      	lsls	r2, r2, #3
 80027a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	2202      	movs	r2, #2
 80027a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	187b      	adds	r3, r7, r1
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	2202      	movs	r2, #2
 80027ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027bc:	187a      	adds	r2, r7, r1
 80027be:	2390      	movs	r3, #144	; 0x90
 80027c0:	05db      	lsls	r3, r3, #23
 80027c2:	0011      	movs	r1, r2
 80027c4:	0018      	movs	r0, r3
 80027c6:	f001 f835 	bl	8003834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027ca:	e07a      	b.n	80028c2 <HAL_TIM_MspPostInit+0x166>
  else if(timHandle->Instance==TIM2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	05db      	lsls	r3, r3, #23
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d14b      	bne.n	8002870 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d8:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_TIM_MspPostInit+0x174>)
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	4b3c      	ldr	r3, [pc, #240]	; (80028d0 <HAL_TIM_MspPostInit+0x174>)
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	0289      	lsls	r1, r1, #10
 80027e2:	430a      	orrs	r2, r1
 80027e4:	615a      	str	r2, [r3, #20]
 80027e6:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <HAL_TIM_MspPostInit+0x174>)
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	029b      	lsls	r3, r3, #10
 80027ee:	4013      	ands	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f4:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <HAL_TIM_MspPostInit+0x174>)
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	4b35      	ldr	r3, [pc, #212]	; (80028d0 <HAL_TIM_MspPostInit+0x174>)
 80027fa:	2180      	movs	r1, #128	; 0x80
 80027fc:	02c9      	lsls	r1, r1, #11
 80027fe:	430a      	orrs	r2, r1
 8002800:	615a      	str	r2, [r3, #20]
 8002802:	4b33      	ldr	r3, [pc, #204]	; (80028d0 <HAL_TIM_MspPostInit+0x174>)
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	02db      	lsls	r3, r3, #11
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002810:	211c      	movs	r1, #28
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2280      	movs	r2, #128	; 0x80
 8002816:	0212      	lsls	r2, r2, #8
 8002818:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	000c      	movs	r4, r1
 800281c:	193b      	adds	r3, r7, r4
 800281e:	2202      	movs	r2, #2
 8002820:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	193b      	adds	r3, r7, r4
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	193b      	adds	r3, r7, r4
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800282e:	193b      	adds	r3, r7, r4
 8002830:	2202      	movs	r2, #2
 8002832:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002834:	193a      	adds	r2, r7, r4
 8002836:	2390      	movs	r3, #144	; 0x90
 8002838:	05db      	lsls	r3, r3, #23
 800283a:	0011      	movs	r1, r2
 800283c:	0018      	movs	r0, r3
 800283e:	f000 fff9 	bl	8003834 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002842:	0021      	movs	r1, r4
 8002844:	187b      	adds	r3, r7, r1
 8002846:	2208      	movs	r2, #8
 8002848:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	187b      	adds	r3, r7, r1
 800284c:	2202      	movs	r2, #2
 800284e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	187b      	adds	r3, r7, r1
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	187b      	adds	r3, r7, r1
 8002858:	2200      	movs	r2, #0
 800285a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800285c:	187b      	adds	r3, r7, r1
 800285e:	2202      	movs	r2, #2
 8002860:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002862:	187b      	adds	r3, r7, r1
 8002864:	4a1b      	ldr	r2, [pc, #108]	; (80028d4 <HAL_TIM_MspPostInit+0x178>)
 8002866:	0019      	movs	r1, r3
 8002868:	0010      	movs	r0, r2
 800286a:	f000 ffe3 	bl	8003834 <HAL_GPIO_Init>
}
 800286e:	e028      	b.n	80028c2 <HAL_TIM_MspPostInit+0x166>
  else if(timHandle->Instance==TIM3)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <HAL_TIM_MspPostInit+0x17c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d123      	bne.n	80028c2 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_TIM_MspPostInit+0x174>)
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_TIM_MspPostInit+0x174>)
 8002880:	2180      	movs	r1, #128	; 0x80
 8002882:	02c9      	lsls	r1, r1, #11
 8002884:	430a      	orrs	r2, r1
 8002886:	615a      	str	r2, [r3, #20]
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_TIM_MspPostInit+0x174>)
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	02db      	lsls	r3, r3, #11
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002896:	211c      	movs	r1, #28
 8002898:	187b      	adds	r3, r7, r1
 800289a:	2233      	movs	r2, #51	; 0x33
 800289c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	2202      	movs	r2, #2
 80028a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	2201      	movs	r2, #1
 80028b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	4a06      	ldr	r2, [pc, #24]	; (80028d4 <HAL_TIM_MspPostInit+0x178>)
 80028ba:	0019      	movs	r1, r3
 80028bc:	0010      	movs	r0, r2
 80028be:	f000 ffb9 	bl	8003834 <HAL_GPIO_Init>
}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b00d      	add	sp, #52	; 0x34
 80028c8:	bd90      	pop	{r4, r7, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40021000 	.word	0x40021000
 80028d4:	48000400 	.word	0x48000400
 80028d8:	40000400 	.word	0x40000400

080028dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028dc:	480d      	ldr	r0, [pc, #52]	; (8002914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e0:	480d      	ldr	r0, [pc, #52]	; (8002918 <LoopForever+0x6>)
  ldr r1, =_edata
 80028e2:	490e      	ldr	r1, [pc, #56]	; (800291c <LoopForever+0xa>)
  ldr r2, =_sidata
 80028e4:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <LoopForever+0xe>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f8:	4c0b      	ldr	r4, [pc, #44]	; (8002928 <LoopForever+0x16>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002906:	f7ff fd23 	bl	8002350 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800290a:	f002 fb67 	bl	8004fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290e:	f7ff fbe3 	bl	80020d8 <main>

08002912 <LoopForever>:

LoopForever:
    b LoopForever
 8002912:	e7fe      	b.n	8002912 <LoopForever>
  ldr   r0, =_estack
 8002914:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800291c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002920:	08005328 	.word	0x08005328
  ldr r2, =_sbss
 8002924:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002928:	200002e0 	.word	0x200002e0

0800292c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800292c:	e7fe      	b.n	800292c <ADC1_COMP_IRQHandler>
	...

08002930 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002934:	4b07      	ldr	r3, [pc, #28]	; (8002954 <HAL_Init+0x24>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_Init+0x24>)
 800293a:	2110      	movs	r1, #16
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002940:	2000      	movs	r0, #0
 8002942:	f000 f809 	bl	8002958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002946:	f7ff fcb9 	bl	80022bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	40022000 	.word	0x40022000

08002958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_InitTick+0x5c>)
 8002962:	681c      	ldr	r4, [r3, #0]
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <HAL_InitTick+0x60>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	0019      	movs	r1, r3
 800296a:	23fa      	movs	r3, #250	; 0xfa
 800296c:	0098      	lsls	r0, r3, #2
 800296e:	f7fd fbcb 	bl	8000108 <__udivsi3>
 8002972:	0003      	movs	r3, r0
 8002974:	0019      	movs	r1, r3
 8002976:	0020      	movs	r0, r4
 8002978:	f7fd fbc6 	bl	8000108 <__udivsi3>
 800297c:	0003      	movs	r3, r0
 800297e:	0018      	movs	r0, r3
 8002980:	f000 fdb3 	bl	80034ea <HAL_SYSTICK_Config>
 8002984:	1e03      	subs	r3, r0, #0
 8002986:	d001      	beq.n	800298c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e00f      	b.n	80029ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d80b      	bhi.n	80029aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	2301      	movs	r3, #1
 8002996:	425b      	negs	r3, r3
 8002998:	2200      	movs	r2, #0
 800299a:	0018      	movs	r0, r3
 800299c:	f000 fd80 	bl	80034a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_InitTick+0x64>)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e000      	b.n	80029ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
}
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b003      	add	sp, #12
 80029b2:	bd90      	pop	{r4, r7, pc}
 80029b4:	20000008 	.word	0x20000008
 80029b8:	20000010 	.word	0x20000010
 80029bc:	2000000c 	.word	0x2000000c

080029c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_IncTick+0x1c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	001a      	movs	r2, r3
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_IncTick+0x20>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	18d2      	adds	r2, r2, r3
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_IncTick+0x20>)
 80029d2:	601a      	str	r2, [r3, #0]
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	20000010 	.word	0x20000010
 80029e0:	200002dc 	.word	0x200002dc

080029e4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  return uwTick;
 80029e8:	4b02      	ldr	r3, [pc, #8]	; (80029f4 <HAL_GetTick+0x10>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	200002dc 	.word	0x200002dc

080029f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff fff0 	bl	80029e4 <HAL_GetTick>
 8002a04:	0003      	movs	r3, r0
 8002a06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	d005      	beq.n	8002a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_Delay+0x40>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	001a      	movs	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	189b      	adds	r3, r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	f7ff ffe0 	bl	80029e4 <HAL_GetTick>
 8002a24:	0002      	movs	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d8f7      	bhi.n	8002a20 <HAL_Delay+0x28>
  {
  }
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b004      	add	sp, #16
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000010 	.word	0x20000010

08002a3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a44:	230f      	movs	r3, #15
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e125      	b.n	8002ca6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10a      	bne.n	8002a78 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2234      	movs	r2, #52	; 0x34
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	0018      	movs	r0, r3
 8002a74:	f7ff fa0e 	bl	8001e94 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d000      	beq.n	8002a84 <HAL_ADC_Init+0x48>
 8002a82:	e103      	b.n	8002c8c <HAL_ADC_Init+0x250>
 8002a84:	230f      	movs	r3, #15
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d000      	beq.n	8002a90 <HAL_ADC_Init+0x54>
 8002a8e:	e0fd      	b.n	8002c8c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2204      	movs	r2, #4
 8002a98:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002a9a:	d000      	beq.n	8002a9e <HAL_ADC_Init+0x62>
 8002a9c:	e0f6      	b.n	8002c8c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	4a83      	ldr	r2, [pc, #524]	; (8002cb0 <HAL_ADC_Init+0x274>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d112      	bne.n	8002ae2 <HAL_ADC_Init+0xa6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d009      	beq.n	8002ade <HAL_ADC_Init+0xa2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	401a      	ands	r2, r3
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_Init+0xa6>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <HAL_ADC_Init+0xa8>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d116      	bne.n	8002b16 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2218      	movs	r2, #24
 8002af0:	4393      	bics	r3, r2
 8002af2:	0019      	movs	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	0899      	lsrs	r1, r3, #2
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4964      	ldr	r1, [pc, #400]	; (8002cb4 <HAL_ADC_Init+0x278>)
 8002b22:	400a      	ands	r2, r1
 8002b24:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7e1b      	ldrb	r3, [r3, #24]
 8002b2a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	7e5b      	ldrb	r3, [r3, #25]
 8002b30:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b32:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7e9b      	ldrb	r3, [r3, #26]
 8002b38:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002b3a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d002      	beq.n	8002b4a <HAL_ADC_Init+0x10e>
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	015b      	lsls	r3, r3, #5
 8002b48:	e000      	b.n	8002b4c <HAL_ADC_Init+0x110>
 8002b4a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b4c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002b52:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_Init+0x124>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	e000      	b.n	8002b62 <HAL_ADC_Init+0x126>
 8002b60:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002b62:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2124      	movs	r1, #36	; 0x24
 8002b68:	5c5b      	ldrb	r3, [r3, r1]
 8002b6a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002b6c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	7edb      	ldrb	r3, [r3, #27]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d115      	bne.n	8002ba8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7e9b      	ldrb	r3, [r3, #26]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	0252      	lsls	r2, r2, #9
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	2220      	movs	r2, #32
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	23c2      	movs	r3, #194	; 0xc2
 8002bae:	33ff      	adds	r3, #255	; 0xff
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d007      	beq.n	8002bc4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68d9      	ldr	r1, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	055b      	lsls	r3, r3, #21
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d01b      	beq.n	8002c18 <HAL_ADC_Init+0x1dc>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d017      	beq.n	8002c18 <HAL_ADC_Init+0x1dc>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d013      	beq.n	8002c18 <HAL_ADC_Init+0x1dc>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d00f      	beq.n	8002c18 <HAL_ADC_Init+0x1dc>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d00b      	beq.n	8002c18 <HAL_ADC_Init+0x1dc>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d007      	beq.n	8002c18 <HAL_ADC_Init+0x1dc>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	2b06      	cmp	r3, #6
 8002c0e:	d003      	beq.n	8002c18 <HAL_ADC_Init+0x1dc>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	2b07      	cmp	r3, #7
 8002c16:	d112      	bne.n	8002c3e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2107      	movs	r1, #7
 8002c24:	438a      	bics	r2, r1
 8002c26:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6959      	ldr	r1, [r3, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	2207      	movs	r2, #7
 8002c34:	401a      	ands	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <HAL_ADC_Init+0x27c>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d10b      	bne.n	8002c66 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	2203      	movs	r2, #3
 8002c5a:	4393      	bics	r3, r2
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002c64:	e01c      	b.n	8002ca0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	2212      	movs	r2, #18
 8002c6c:	4393      	bics	r3, r2
 8002c6e:	2210      	movs	r2, #16
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002c82:	230f      	movs	r3, #15
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002c8a:	e009      	b.n	8002ca0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	2210      	movs	r2, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002c98:	230f      	movs	r3, #15
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	781b      	ldrb	r3, [r3, #0]
}
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b004      	add	sp, #16
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	fffffefd 	.word	0xfffffefd
 8002cb4:	fffe0219 	.word	0xfffe0219
 8002cb8:	833fffe7 	.word	0x833fffe7

08002cbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc8:	2317      	movs	r3, #23
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d15e      	bne.n	8002d9a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2234      	movs	r2, #52	; 0x34
 8002ce0:	5c9b      	ldrb	r3, [r3, r2]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_Start_DMA+0x2e>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e05e      	b.n	8002da8 <HAL_ADC_Start_DMA+0xec>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2234      	movs	r2, #52	; 0x34
 8002cee:	2101      	movs	r1, #1
 8002cf0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	7e5b      	ldrb	r3, [r3, #25]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d007      	beq.n	8002d0a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002cfa:	2317      	movs	r3, #23
 8002cfc:	18fc      	adds	r4, r7, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 f983 	bl	800300c <ADC_Enable>
 8002d06:	0003      	movs	r3, r0
 8002d08:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d0a:	2317      	movs	r3, #23
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d146      	bne.n	8002da2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	4a25      	ldr	r2, [pc, #148]	; (8002db0 <HAL_ADC_Start_DMA+0xf4>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2280      	movs	r2, #128	; 0x80
 8002d1e:	0052      	lsls	r2, r2, #1
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2234      	movs	r2, #52	; 0x34
 8002d30:	2100      	movs	r1, #0
 8002d32:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	4a1e      	ldr	r2, [pc, #120]	; (8002db4 <HAL_ADC_Start_DMA+0xf8>)
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_ADC_Start_DMA+0xfc>)
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <HAL_ADC_Start_DMA+0x100>)
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	221c      	movs	r2, #28
 8002d52:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2110      	movs	r1, #16
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2101      	movs	r1, #1
 8002d70:	430a      	orrs	r2, r1
 8002d72:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3340      	adds	r3, #64	; 0x40
 8002d7e:	0019      	movs	r1, r3
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f000 fc06 	bl	8003594 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2104      	movs	r1, #4
 8002d94:	430a      	orrs	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	e003      	b.n	8002da2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d9a:	2317      	movs	r3, #23
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	2202      	movs	r2, #2
 8002da0:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002da2:	2317      	movs	r3, #23
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	781b      	ldrb	r3, [r3, #0]
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b007      	add	sp, #28
 8002dae:	bd90      	pop	{r4, r7, pc}
 8002db0:	fffff0fe 	.word	0xfffff0fe
 8002db4:	08003105 	.word	0x08003105
 8002db8:	080031b9 	.word	0x080031b9
 8002dbc:	080031d7 	.word	0x080031d7

08002dc0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b002      	add	sp, #8
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b002      	add	sp, #8
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dfa:	230f      	movs	r3, #15
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	055b      	lsls	r3, r3, #21
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d011      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x46>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d00d      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x46>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d009      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x46>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d005      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x46>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d001      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x46>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2234      	movs	r2, #52	; 0x34
 8002e3a:	5c9b      	ldrb	r3, [r3, r2]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x54>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e0d0      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x1f6>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2234      	movs	r2, #52	; 0x34
 8002e48:	2101      	movs	r1, #1
 8002e4a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2204      	movs	r2, #4
 8002e54:	4013      	ands	r3, r2
 8002e56:	d000      	beq.n	8002e5a <HAL_ADC_ConfigChannel+0x6a>
 8002e58:	e0b4      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4a64      	ldr	r2, [pc, #400]	; (8002ff0 <HAL_ADC_ConfigChannel+0x200>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d100      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x76>
 8002e64:	e082      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2201      	movs	r2, #1
 8002e72:	409a      	lsls	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	055b      	lsls	r3, r3, #21
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d037      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0x108>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d033      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0x108>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d02f      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0x108>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d02b      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0x108>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d027      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0x108>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	2b05      	cmp	r3, #5
 8002eae:	d023      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0x108>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d01f      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0x108>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	2b07      	cmp	r3, #7
 8002ebe:	d01b      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	2107      	movs	r1, #7
 8002ecc:	400b      	ands	r3, r1
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d012      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2107      	movs	r1, #7
 8002ede:	438a      	bics	r2, r1
 8002ee0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6959      	ldr	r1, [r3, #20]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2207      	movs	r2, #7
 8002eee:	401a      	ands	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b10      	cmp	r3, #16
 8002efe:	d007      	beq.n	8002f10 <HAL_ADC_ConfigChannel+0x120>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b11      	cmp	r3, #17
 8002f06:	d003      	beq.n	8002f10 <HAL_ADC_ConfigChannel+0x120>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b12      	cmp	r3, #18
 8002f0e:	d163      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002f10:	4b38      	ldr	r3, [pc, #224]	; (8002ff4 <HAL_ADC_ConfigChannel+0x204>)
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d009      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x140>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b11      	cmp	r3, #17
 8002f22:	d102      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x13a>
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	03db      	lsls	r3, r3, #15
 8002f28:	e004      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x144>
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	045b      	lsls	r3, r3, #17
 8002f2e:	e001      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x144>
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	4a2f      	ldr	r2, [pc, #188]	; (8002ff4 <HAL_ADC_ConfigChannel+0x204>)
 8002f36:	430b      	orrs	r3, r1
 8002f38:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b10      	cmp	r3, #16
 8002f40:	d14a      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <HAL_ADC_ConfigChannel+0x208>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	492d      	ldr	r1, [pc, #180]	; (8002ffc <HAL_ADC_ConfigChannel+0x20c>)
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7fd f8dd 	bl	8000108 <__udivsi3>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	001a      	movs	r2, r3
 8002f52:	0013      	movs	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	189b      	adds	r3, r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f5c:	e002      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f9      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x16e>
 8002f6a:	e035      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2101      	movs	r1, #1
 8002f78:	4099      	lsls	r1, r3
 8002f7a:	000b      	movs	r3, r1
 8002f7c:	43d9      	mvns	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	400a      	ands	r2, r1
 8002f84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	d007      	beq.n	8002f9e <HAL_ADC_ConfigChannel+0x1ae>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b11      	cmp	r3, #17
 8002f94:	d003      	beq.n	8002f9e <HAL_ADC_ConfigChannel+0x1ae>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b12      	cmp	r3, #18
 8002f9c:	d11c      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_ADC_ConfigChannel+0x204>)
 8002fa0:	6819      	ldr	r1, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d007      	beq.n	8002fba <HAL_ADC_ConfigChannel+0x1ca>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b11      	cmp	r3, #17
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x1c6>
 8002fb2:	4b13      	ldr	r3, [pc, #76]	; (8003000 <HAL_ADC_ConfigChannel+0x210>)
 8002fb4:	e002      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x1cc>
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <HAL_ADC_ConfigChannel+0x214>)
 8002fb8:	e000      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x1cc>
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_ADC_ConfigChannel+0x218>)
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <HAL_ADC_ConfigChannel+0x204>)
 8002fbe:	400b      	ands	r3, r1
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e009      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	2220      	movs	r2, #32
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002fd0:	230f      	movs	r3, #15
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2234      	movs	r2, #52	; 0x34
 8002fdc:	2100      	movs	r1, #0
 8002fde:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002fe0:	230f      	movs	r3, #15
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	781b      	ldrb	r3, [r3, #0]
}
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b004      	add	sp, #16
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	00001001 	.word	0x00001001
 8002ff4:	40012708 	.word	0x40012708
 8002ff8:	20000008 	.word	0x20000008
 8002ffc:	000f4240 	.word	0x000f4240
 8003000:	ffbfffff 	.word	0xffbfffff
 8003004:	feffffff 	.word	0xfeffffff
 8003008:	ff7fffff 	.word	0xff7fffff

0800300c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2203      	movs	r2, #3
 8003024:	4013      	ands	r3, r2
 8003026:	2b01      	cmp	r3, #1
 8003028:	d112      	bne.n	8003050 <ADC_Enable+0x44>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2201      	movs	r2, #1
 8003032:	4013      	ands	r3, r2
 8003034:	2b01      	cmp	r3, #1
 8003036:	d009      	beq.n	800304c <ADC_Enable+0x40>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	401a      	ands	r2, r3
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	429a      	cmp	r2, r3
 800304a:	d101      	bne.n	8003050 <ADC_Enable+0x44>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <ADC_Enable+0x46>
 8003050:	2300      	movs	r3, #0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d14b      	bne.n	80030ee <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4a26      	ldr	r2, [pc, #152]	; (80030f8 <ADC_Enable+0xec>)
 800305e:	4013      	ands	r3, r2
 8003060:	d00d      	beq.n	800307e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	2210      	movs	r2, #16
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	2201      	movs	r2, #1
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e038      	b.n	80030f0 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	430a      	orrs	r2, r1
 800308c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <ADC_Enable+0xf0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	491b      	ldr	r1, [pc, #108]	; (8003100 <ADC_Enable+0xf4>)
 8003094:	0018      	movs	r0, r3
 8003096:	f7fd f837 	bl	8000108 <__udivsi3>
 800309a:	0003      	movs	r3, r0
 800309c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800309e:	e002      	b.n	80030a6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f9      	bne.n	80030a0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80030ac:	f7ff fc9a 	bl	80029e4 <HAL_GetTick>
 80030b0:	0003      	movs	r3, r0
 80030b2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030b4:	e014      	b.n	80030e0 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030b6:	f7ff fc95 	bl	80029e4 <HAL_GetTick>
 80030ba:	0002      	movs	r2, r0
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d90d      	bls.n	80030e0 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	2210      	movs	r2, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	2201      	movs	r2, #1
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e007      	b.n	80030f0 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2201      	movs	r2, #1
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d1e3      	bne.n	80030b6 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b004      	add	sp, #16
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	80000017 	.word	0x80000017
 80030fc:	20000008 	.word	0x20000008
 8003100:	000f4240 	.word	0x000f4240

08003104 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	2250      	movs	r2, #80	; 0x50
 8003118:	4013      	ands	r3, r2
 800311a:	d140      	bne.n	800319e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	0092      	lsls	r2, r2, #2
 8003124:	431a      	orrs	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	23c0      	movs	r3, #192	; 0xc0
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	4013      	ands	r3, r2
 8003136:	d12d      	bne.n	8003194 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800313c:	2b00      	cmp	r3, #0
 800313e:	d129      	bne.n	8003194 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2208      	movs	r2, #8
 8003148:	4013      	ands	r3, r2
 800314a:	2b08      	cmp	r3, #8
 800314c:	d122      	bne.n	8003194 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2204      	movs	r2, #4
 8003156:	4013      	ands	r3, r2
 8003158:	d110      	bne.n	800317c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	210c      	movs	r1, #12
 8003166:	438a      	bics	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <ADC_DMAConvCplt+0xb0>)
 8003170:	4013      	ands	r3, r2
 8003172:	2201      	movs	r2, #1
 8003174:	431a      	orrs	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
 800317a:	e00b      	b.n	8003194 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	2220      	movs	r2, #32
 8003182:	431a      	orrs	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	2201      	movs	r2, #1
 800318e:	431a      	orrs	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	0018      	movs	r0, r3
 8003198:	f7ff fe12 	bl	8002dc0 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800319c:	e005      	b.n	80031aa <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	0010      	movs	r0, r2
 80031a8:	4798      	blx	r3
}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b004      	add	sp, #16
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	fffffefe 	.word	0xfffffefe

080031b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7ff fe01 	bl	8002dd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b004      	add	sp, #16
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	2240      	movs	r2, #64	; 0x40
 80031ea:	431a      	orrs	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	2204      	movs	r2, #4
 80031f6:	431a      	orrs	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	0018      	movs	r0, r3
 8003200:	f7ff fdee 	bl	8002de0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003204:	46c0      	nop			; (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	b004      	add	sp, #16
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003214:	2317      	movs	r3, #23
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2234      	movs	r2, #52	; 0x34
 8003228:	5c9b      	ldrb	r3, [r3, r2]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_ADCEx_Calibration_Start+0x26>
 800322e:	2302      	movs	r3, #2
 8003230:	e084      	b.n	800333c <HAL_ADCEx_Calibration_Start+0x130>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2234      	movs	r2, #52	; 0x34
 8003236:	2101      	movs	r1, #1
 8003238:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2203      	movs	r2, #3
 8003242:	4013      	ands	r3, r2
 8003244:	2b01      	cmp	r3, #1
 8003246:	d112      	bne.n	800326e <HAL_ADCEx_Calibration_Start+0x62>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2201      	movs	r2, #1
 8003250:	4013      	ands	r3, r2
 8003252:	2b01      	cmp	r3, #1
 8003254:	d009      	beq.n	800326a <HAL_ADCEx_Calibration_Start+0x5e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	401a      	ands	r2, r3
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	429a      	cmp	r2, r3
 8003268:	d101      	bne.n	800326e <HAL_ADCEx_Calibration_Start+0x62>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_ADCEx_Calibration_Start+0x64>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d152      	bne.n	800331a <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	4a32      	ldr	r2, [pc, #200]	; (8003344 <HAL_ADCEx_Calibration_Start+0x138>)
 800327a:	4013      	ands	r3, r2
 800327c:	2202      	movs	r2, #2
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2203      	movs	r2, #3
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2103      	movs	r1, #3
 800329c:	438a      	bics	r2, r1
 800329e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	0609      	lsls	r1, r1, #24
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80032b2:	f7ff fb97 	bl	80029e4 <HAL_GetTick>
 80032b6:	0003      	movs	r3, r0
 80032b8:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80032ba:	e014      	b.n	80032e6 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80032bc:	f7ff fb92 	bl	80029e4 <HAL_GetTick>
 80032c0:	0002      	movs	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d90d      	bls.n	80032e6 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	2212      	movs	r2, #18
 80032d0:	4393      	bics	r3, r2
 80032d2:	2210      	movs	r2, #16
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2234      	movs	r2, #52	; 0x34
 80032de:	2100      	movs	r1, #0
 80032e0:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e02a      	b.n	800333c <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	0fdb      	lsrs	r3, r3, #31
 80032ee:	07da      	lsls	r2, r3, #31
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	061b      	lsls	r3, r3, #24
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d0e1      	beq.n	80032bc <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68d9      	ldr	r1, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	2203      	movs	r2, #3
 800330e:	4393      	bics	r3, r2
 8003310:	2201      	movs	r2, #1
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	639a      	str	r2, [r3, #56]	; 0x38
 8003318:	e009      	b.n	800332e <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	2220      	movs	r2, #32
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003326:	2317      	movs	r3, #23
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2234      	movs	r2, #52	; 0x34
 8003332:	2100      	movs	r1, #0
 8003334:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003336:	2317      	movs	r3, #23
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	781b      	ldrb	r3, [r3, #0]
}
 800333c:	0018      	movs	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	b006      	add	sp, #24
 8003342:	bd80      	pop	{r7, pc}
 8003344:	fffffefd 	.word	0xfffffefd

08003348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	0002      	movs	r2, r0
 8003350:	1dfb      	adds	r3, r7, #7
 8003352:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003354:	1dfb      	adds	r3, r7, #7
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b7f      	cmp	r3, #127	; 0x7f
 800335a:	d809      	bhi.n	8003370 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335c:	1dfb      	adds	r3, r7, #7
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	001a      	movs	r2, r3
 8003362:	231f      	movs	r3, #31
 8003364:	401a      	ands	r2, r3
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <__NVIC_EnableIRQ+0x30>)
 8003368:	2101      	movs	r1, #1
 800336a:	4091      	lsls	r1, r2
 800336c:	000a      	movs	r2, r1
 800336e:	601a      	str	r2, [r3, #0]
  }
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	b002      	add	sp, #8
 8003376:	bd80      	pop	{r7, pc}
 8003378:	e000e100 	.word	0xe000e100

0800337c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	0002      	movs	r2, r0
 8003384:	6039      	str	r1, [r7, #0]
 8003386:	1dfb      	adds	r3, r7, #7
 8003388:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800338a:	1dfb      	adds	r3, r7, #7
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b7f      	cmp	r3, #127	; 0x7f
 8003390:	d828      	bhi.n	80033e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003392:	4a2f      	ldr	r2, [pc, #188]	; (8003450 <__NVIC_SetPriority+0xd4>)
 8003394:	1dfb      	adds	r3, r7, #7
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	b25b      	sxtb	r3, r3
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	33c0      	adds	r3, #192	; 0xc0
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	589b      	ldr	r3, [r3, r2]
 80033a2:	1dfa      	adds	r2, r7, #7
 80033a4:	7812      	ldrb	r2, [r2, #0]
 80033a6:	0011      	movs	r1, r2
 80033a8:	2203      	movs	r2, #3
 80033aa:	400a      	ands	r2, r1
 80033ac:	00d2      	lsls	r2, r2, #3
 80033ae:	21ff      	movs	r1, #255	; 0xff
 80033b0:	4091      	lsls	r1, r2
 80033b2:	000a      	movs	r2, r1
 80033b4:	43d2      	mvns	r2, r2
 80033b6:	401a      	ands	r2, r3
 80033b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	019b      	lsls	r3, r3, #6
 80033be:	22ff      	movs	r2, #255	; 0xff
 80033c0:	401a      	ands	r2, r3
 80033c2:	1dfb      	adds	r3, r7, #7
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	0018      	movs	r0, r3
 80033c8:	2303      	movs	r3, #3
 80033ca:	4003      	ands	r3, r0
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033d0:	481f      	ldr	r0, [pc, #124]	; (8003450 <__NVIC_SetPriority+0xd4>)
 80033d2:	1dfb      	adds	r3, r7, #7
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	b25b      	sxtb	r3, r3
 80033d8:	089b      	lsrs	r3, r3, #2
 80033da:	430a      	orrs	r2, r1
 80033dc:	33c0      	adds	r3, #192	; 0xc0
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80033e2:	e031      	b.n	8003448 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033e4:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <__NVIC_SetPriority+0xd8>)
 80033e6:	1dfb      	adds	r3, r7, #7
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	0019      	movs	r1, r3
 80033ec:	230f      	movs	r3, #15
 80033ee:	400b      	ands	r3, r1
 80033f0:	3b08      	subs	r3, #8
 80033f2:	089b      	lsrs	r3, r3, #2
 80033f4:	3306      	adds	r3, #6
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	18d3      	adds	r3, r2, r3
 80033fa:	3304      	adds	r3, #4
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	1dfa      	adds	r2, r7, #7
 8003400:	7812      	ldrb	r2, [r2, #0]
 8003402:	0011      	movs	r1, r2
 8003404:	2203      	movs	r2, #3
 8003406:	400a      	ands	r2, r1
 8003408:	00d2      	lsls	r2, r2, #3
 800340a:	21ff      	movs	r1, #255	; 0xff
 800340c:	4091      	lsls	r1, r2
 800340e:	000a      	movs	r2, r1
 8003410:	43d2      	mvns	r2, r2
 8003412:	401a      	ands	r2, r3
 8003414:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	019b      	lsls	r3, r3, #6
 800341a:	22ff      	movs	r2, #255	; 0xff
 800341c:	401a      	ands	r2, r3
 800341e:	1dfb      	adds	r3, r7, #7
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	0018      	movs	r0, r3
 8003424:	2303      	movs	r3, #3
 8003426:	4003      	ands	r3, r0
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800342c:	4809      	ldr	r0, [pc, #36]	; (8003454 <__NVIC_SetPriority+0xd8>)
 800342e:	1dfb      	adds	r3, r7, #7
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	001c      	movs	r4, r3
 8003434:	230f      	movs	r3, #15
 8003436:	4023      	ands	r3, r4
 8003438:	3b08      	subs	r3, #8
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	430a      	orrs	r2, r1
 800343e:	3306      	adds	r3, #6
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	18c3      	adds	r3, r0, r3
 8003444:	3304      	adds	r3, #4
 8003446:	601a      	str	r2, [r3, #0]
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b003      	add	sp, #12
 800344e:	bd90      	pop	{r4, r7, pc}
 8003450:	e000e100 	.word	0xe000e100
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	4a0c      	ldr	r2, [pc, #48]	; (8003498 <SysTick_Config+0x40>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346a:	2301      	movs	r3, #1
 800346c:	e010      	b.n	8003490 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <SysTick_Config+0x44>)
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	3a01      	subs	r2, #1
 8003474:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003476:	2301      	movs	r3, #1
 8003478:	425b      	negs	r3, r3
 800347a:	2103      	movs	r1, #3
 800347c:	0018      	movs	r0, r3
 800347e:	f7ff ff7d 	bl	800337c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <SysTick_Config+0x44>)
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <SysTick_Config+0x44>)
 800348a:	2207      	movs	r2, #7
 800348c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800348e:	2300      	movs	r3, #0
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}
 8003498:	00ffffff 	.word	0x00ffffff
 800349c:	e000e010 	.word	0xe000e010

080034a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	210f      	movs	r1, #15
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	1c02      	adds	r2, r0, #0
 80034b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	187b      	adds	r3, r7, r1
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	b25b      	sxtb	r3, r3
 80034ba:	0011      	movs	r1, r2
 80034bc:	0018      	movs	r0, r3
 80034be:	f7ff ff5d 	bl	800337c <__NVIC_SetPriority>
}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b004      	add	sp, #16
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	0002      	movs	r2, r0
 80034d2:	1dfb      	adds	r3, r7, #7
 80034d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d6:	1dfb      	adds	r3, r7, #7
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	b25b      	sxtb	r3, r3
 80034dc:	0018      	movs	r0, r3
 80034de:	f7ff ff33 	bl	8003348 <__NVIC_EnableIRQ>
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b002      	add	sp, #8
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7ff ffaf 	bl	8003458 <SysTick_Config>
 80034fa:	0003      	movs	r3, r0
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b002      	add	sp, #8
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e036      	b.n	8003588 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2221      	movs	r2, #33	; 0x21
 800351e:	2102      	movs	r1, #2
 8003520:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_DMA_Init+0x8c>)
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800353a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f946 	bl	80037fc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2221      	movs	r2, #33	; 0x21
 800357a:	2101      	movs	r1, #1
 800357c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	2100      	movs	r1, #0
 8003584:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}  
 8003588:	0018      	movs	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	b004      	add	sp, #16
 800358e:	bd80      	pop	{r7, pc}
 8003590:	ffffc00f 	.word	0xffffc00f

08003594 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80035a2:	2317      	movs	r3, #23
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	5c9b      	ldrb	r3, [r3, r2]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_DMA_Start_IT+0x24>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e04f      	b.n	8003658 <HAL_DMA_Start_IT+0xc4>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	2101      	movs	r1, #1
 80035be:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2221      	movs	r2, #33	; 0x21
 80035c4:	5c9b      	ldrb	r3, [r3, r2]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d13a      	bne.n	8003642 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2221      	movs	r2, #33	; 0x21
 80035d0:	2102      	movs	r1, #2
 80035d2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2101      	movs	r1, #1
 80035e6:	438a      	bics	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f8d7 	bl	80037a4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	210e      	movs	r1, #14
 800360a:	430a      	orrs	r2, r1
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e00f      	b.n	8003630 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	210a      	movs	r1, #10
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2104      	movs	r1, #4
 800362c:	438a      	bics	r2, r1
 800362e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2101      	movs	r1, #1
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e007      	b.n	8003652 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	2100      	movs	r1, #0
 8003648:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800364a:	2317      	movs	r3, #23
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	2202      	movs	r2, #2
 8003650:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8003652:	2317      	movs	r3, #23
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	781b      	ldrb	r3, [r3, #0]
} 
 8003658:	0018      	movs	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	b006      	add	sp, #24
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	2204      	movs	r2, #4
 800367e:	409a      	lsls	r2, r3
 8003680:	0013      	movs	r3, r2
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4013      	ands	r3, r2
 8003686:	d024      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x72>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2204      	movs	r2, #4
 800368c:	4013      	ands	r3, r2
 800368e:	d020      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2220      	movs	r2, #32
 8003698:	4013      	ands	r3, r2
 800369a:	d107      	bne.n	80036ac <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2104      	movs	r1, #4
 80036a8:	438a      	bics	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	2104      	movs	r1, #4
 80036b6:	4091      	lsls	r1, r2
 80036b8:	000a      	movs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d100      	bne.n	80036c6 <HAL_DMA_IRQHandler+0x66>
 80036c4:	e06a      	b.n	800379c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	0010      	movs	r0, r2
 80036ce:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80036d0:	e064      	b.n	800379c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	2202      	movs	r2, #2
 80036d8:	409a      	lsls	r2, r3
 80036da:	0013      	movs	r3, r2
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4013      	ands	r3, r2
 80036e0:	d02b      	beq.n	800373a <HAL_DMA_IRQHandler+0xda>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2202      	movs	r2, #2
 80036e6:	4013      	ands	r3, r2
 80036e8:	d027      	beq.n	800373a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2220      	movs	r2, #32
 80036f2:	4013      	ands	r3, r2
 80036f4:	d10b      	bne.n	800370e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	210a      	movs	r1, #10
 8003702:	438a      	bics	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2221      	movs	r2, #33	; 0x21
 800370a:	2101      	movs	r1, #1
 800370c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003716:	2102      	movs	r1, #2
 8003718:	4091      	lsls	r1, r2
 800371a:	000a      	movs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	2100      	movs	r1, #0
 8003724:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	2b00      	cmp	r3, #0
 800372c:	d036      	beq.n	800379c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	0010      	movs	r0, r2
 8003736:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003738:	e030      	b.n	800379c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2208      	movs	r2, #8
 8003740:	409a      	lsls	r2, r3
 8003742:	0013      	movs	r3, r2
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4013      	ands	r3, r2
 8003748:	d028      	beq.n	800379c <HAL_DMA_IRQHandler+0x13c>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2208      	movs	r2, #8
 800374e:	4013      	ands	r3, r2
 8003750:	d024      	beq.n	800379c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	210e      	movs	r1, #14
 800375e:	438a      	bics	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	2101      	movs	r1, #1
 800376c:	4091      	lsls	r1, r2
 800376e:	000a      	movs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2221      	movs	r2, #33	; 0x21
 800377c:	2101      	movs	r1, #1
 800377e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	2100      	movs	r1, #0
 8003786:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	0010      	movs	r0, r2
 8003798:	4798      	blx	r3
    }
   }
}  
 800379a:	e7ff      	b.n	800379c <HAL_DMA_IRQHandler+0x13c>
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b004      	add	sp, #16
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	2101      	movs	r1, #1
 80037bc:	4091      	lsls	r1, r2
 80037be:	000a      	movs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b10      	cmp	r3, #16
 80037d0:	d108      	bne.n	80037e4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037e2:	e007      	b.n	80037f4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	60da      	str	r2, [r3, #12]
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b004      	add	sp, #16
 80037fa:	bd80      	pop	{r7, pc}

080037fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a08      	ldr	r2, [pc, #32]	; (800382c <DMA_CalcBaseAndBitshift+0x30>)
 800380a:	4694      	mov	ip, r2
 800380c:	4463      	add	r3, ip
 800380e:	2114      	movs	r1, #20
 8003810:	0018      	movs	r0, r3
 8003812:	f7fc fc79 	bl	8000108 <__udivsi3>
 8003816:	0003      	movs	r3, r0
 8003818:	009a      	lsls	r2, r3, #2
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a03      	ldr	r2, [pc, #12]	; (8003830 <DMA_CalcBaseAndBitshift+0x34>)
 8003822:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b002      	add	sp, #8
 800382a:	bd80      	pop	{r7, pc}
 800382c:	bffdfff8 	.word	0xbffdfff8
 8003830:	40020000 	.word	0x40020000

08003834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003842:	e14f      	b.n	8003ae4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2101      	movs	r1, #1
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4091      	lsls	r1, r2
 800384e:	000a      	movs	r2, r1
 8003850:	4013      	ands	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d100      	bne.n	800385c <HAL_GPIO_Init+0x28>
 800385a:	e140      	b.n	8003ade <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d003      	beq.n	800386c <HAL_GPIO_Init+0x38>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b12      	cmp	r3, #18
 800386a:	d123      	bne.n	80038b4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	08da      	lsrs	r2, r3, #3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3208      	adds	r2, #8
 8003874:	0092      	lsls	r2, r2, #2
 8003876:	58d3      	ldr	r3, [r2, r3]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2207      	movs	r2, #7
 800387e:	4013      	ands	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	220f      	movs	r2, #15
 8003884:	409a      	lsls	r2, r3
 8003886:	0013      	movs	r3, r2
 8003888:	43da      	mvns	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2107      	movs	r1, #7
 8003898:	400b      	ands	r3, r1
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	409a      	lsls	r2, r3
 800389e:	0013      	movs	r3, r2
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	08da      	lsrs	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3208      	adds	r2, #8
 80038ae:	0092      	lsls	r2, r2, #2
 80038b0:	6939      	ldr	r1, [r7, #16]
 80038b2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	2203      	movs	r2, #3
 80038c0:	409a      	lsls	r2, r3
 80038c2:	0013      	movs	r3, r2
 80038c4:	43da      	mvns	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2203      	movs	r2, #3
 80038d2:	401a      	ands	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	409a      	lsls	r2, r3
 80038da:	0013      	movs	r3, r2
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d00b      	beq.n	8003908 <HAL_GPIO_Init+0xd4>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d007      	beq.n	8003908 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038fc:	2b11      	cmp	r3, #17
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b12      	cmp	r3, #18
 8003906:	d130      	bne.n	800396a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	2203      	movs	r2, #3
 8003914:	409a      	lsls	r2, r3
 8003916:	0013      	movs	r3, r2
 8003918:	43da      	mvns	r2, r3
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4013      	ands	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	409a      	lsls	r2, r3
 800392a:	0013      	movs	r3, r2
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800393e:	2201      	movs	r2, #1
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	409a      	lsls	r2, r3
 8003944:	0013      	movs	r3, r2
 8003946:	43da      	mvns	r2, r3
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4013      	ands	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	2201      	movs	r2, #1
 8003956:	401a      	ands	r2, r3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	409a      	lsls	r2, r3
 800395c:	0013      	movs	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	2203      	movs	r2, #3
 8003976:	409a      	lsls	r2, r3
 8003978:	0013      	movs	r3, r2
 800397a:	43da      	mvns	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	409a      	lsls	r2, r3
 800398c:	0013      	movs	r3, r2
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	055b      	lsls	r3, r3, #21
 80039a2:	4013      	ands	r3, r2
 80039a4:	d100      	bne.n	80039a8 <HAL_GPIO_Init+0x174>
 80039a6:	e09a      	b.n	8003ade <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a8:	4b54      	ldr	r3, [pc, #336]	; (8003afc <HAL_GPIO_Init+0x2c8>)
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	4b53      	ldr	r3, [pc, #332]	; (8003afc <HAL_GPIO_Init+0x2c8>)
 80039ae:	2101      	movs	r1, #1
 80039b0:	430a      	orrs	r2, r1
 80039b2:	619a      	str	r2, [r3, #24]
 80039b4:	4b51      	ldr	r3, [pc, #324]	; (8003afc <HAL_GPIO_Init+0x2c8>)
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2201      	movs	r2, #1
 80039ba:	4013      	ands	r3, r2
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039c0:	4a4f      	ldr	r2, [pc, #316]	; (8003b00 <HAL_GPIO_Init+0x2cc>)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	3302      	adds	r3, #2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	589b      	ldr	r3, [r3, r2]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2203      	movs	r2, #3
 80039d2:	4013      	ands	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	220f      	movs	r2, #15
 80039d8:	409a      	lsls	r2, r3
 80039da:	0013      	movs	r3, r2
 80039dc:	43da      	mvns	r2, r3
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4013      	ands	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	2390      	movs	r3, #144	; 0x90
 80039e8:	05db      	lsls	r3, r3, #23
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d013      	beq.n	8003a16 <HAL_GPIO_Init+0x1e2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a44      	ldr	r2, [pc, #272]	; (8003b04 <HAL_GPIO_Init+0x2d0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00d      	beq.n	8003a12 <HAL_GPIO_Init+0x1de>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a43      	ldr	r2, [pc, #268]	; (8003b08 <HAL_GPIO_Init+0x2d4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d007      	beq.n	8003a0e <HAL_GPIO_Init+0x1da>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a42      	ldr	r2, [pc, #264]	; (8003b0c <HAL_GPIO_Init+0x2d8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <HAL_GPIO_Init+0x1d6>
 8003a06:	2303      	movs	r3, #3
 8003a08:	e006      	b.n	8003a18 <HAL_GPIO_Init+0x1e4>
 8003a0a:	2305      	movs	r3, #5
 8003a0c:	e004      	b.n	8003a18 <HAL_GPIO_Init+0x1e4>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e002      	b.n	8003a18 <HAL_GPIO_Init+0x1e4>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <HAL_GPIO_Init+0x1e4>
 8003a16:	2300      	movs	r3, #0
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	2103      	movs	r1, #3
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	0092      	lsls	r2, r2, #2
 8003a20:	4093      	lsls	r3, r2
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a28:	4935      	ldr	r1, [pc, #212]	; (8003b00 <HAL_GPIO_Init+0x2cc>)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	3302      	adds	r3, #2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a36:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	025b      	lsls	r3, r3, #9
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a5a:	4b2d      	ldr	r3, [pc, #180]	; (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003a60:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	43da      	mvns	r2, r3
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	2380      	movs	r3, #128	; 0x80
 8003a76:	029b      	lsls	r3, r3, #10
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a84:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a8a:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	43da      	mvns	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	035b      	lsls	r3, r3, #13
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003aae:	4b18      	ldr	r3, [pc, #96]	; (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003ab4:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	43da      	mvns	r2, r3
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	039b      	lsls	r3, r3, #14
 8003acc:	4013      	ands	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	40da      	lsrs	r2, r3
 8003aec:	1e13      	subs	r3, r2, #0
 8003aee:	d000      	beq.n	8003af2 <HAL_GPIO_Init+0x2be>
 8003af0:	e6a8      	b.n	8003844 <HAL_GPIO_Init+0x10>
  } 
}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b006      	add	sp, #24
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40010000 	.word	0x40010000
 8003b04:	48000400 	.word	0x48000400
 8003b08:	48000800 	.word	0x48000800
 8003b0c:	48000c00 	.word	0x48000c00
 8003b10:	40010400 	.word	0x40010400

08003b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e303      	b.n	800412e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d100      	bne.n	8003b32 <HAL_RCC_OscConfig+0x1e>
 8003b30:	e08d      	b.n	8003c4e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b32:	4bc4      	ldr	r3, [pc, #784]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	220c      	movs	r2, #12
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d00e      	beq.n	8003b5c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b3e:	4bc1      	ldr	r3, [pc, #772]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	220c      	movs	r2, #12
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d116      	bne.n	8003b78 <HAL_RCC_OscConfig+0x64>
 8003b4a:	4bbe      	ldr	r3, [pc, #760]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	025b      	lsls	r3, r3, #9
 8003b52:	401a      	ands	r2, r3
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	025b      	lsls	r3, r3, #9
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d10d      	bne.n	8003b78 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5c:	4bb9      	ldr	r3, [pc, #740]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	029b      	lsls	r3, r3, #10
 8003b64:	4013      	ands	r3, r2
 8003b66:	d100      	bne.n	8003b6a <HAL_RCC_OscConfig+0x56>
 8003b68:	e070      	b.n	8003c4c <HAL_RCC_OscConfig+0x138>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d000      	beq.n	8003b74 <HAL_RCC_OscConfig+0x60>
 8003b72:	e06b      	b.n	8003c4c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e2da      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d107      	bne.n	8003b90 <HAL_RCC_OscConfig+0x7c>
 8003b80:	4bb0      	ldr	r3, [pc, #704]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4baf      	ldr	r3, [pc, #700]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003b86:	2180      	movs	r1, #128	; 0x80
 8003b88:	0249      	lsls	r1, r1, #9
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e02f      	b.n	8003bf0 <HAL_RCC_OscConfig+0xdc>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x9e>
 8003b98:	4baa      	ldr	r3, [pc, #680]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4ba9      	ldr	r3, [pc, #676]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003b9e:	49aa      	ldr	r1, [pc, #680]	; (8003e48 <HAL_RCC_OscConfig+0x334>)
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	4ba7      	ldr	r3, [pc, #668]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4ba6      	ldr	r3, [pc, #664]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003baa:	49a8      	ldr	r1, [pc, #672]	; (8003e4c <HAL_RCC_OscConfig+0x338>)
 8003bac:	400a      	ands	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	e01e      	b.n	8003bf0 <HAL_RCC_OscConfig+0xdc>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_RCC_OscConfig+0xc4>
 8003bba:	4ba2      	ldr	r3, [pc, #648]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4ba1      	ldr	r3, [pc, #644]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003bc0:	2180      	movs	r1, #128	; 0x80
 8003bc2:	02c9      	lsls	r1, r1, #11
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	4b9e      	ldr	r3, [pc, #632]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4b9d      	ldr	r3, [pc, #628]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003bce:	2180      	movs	r1, #128	; 0x80
 8003bd0:	0249      	lsls	r1, r1, #9
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0xdc>
 8003bd8:	4b9a      	ldr	r3, [pc, #616]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b99      	ldr	r3, [pc, #612]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003bde:	499a      	ldr	r1, [pc, #616]	; (8003e48 <HAL_RCC_OscConfig+0x334>)
 8003be0:	400a      	ands	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	4b97      	ldr	r3, [pc, #604]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b96      	ldr	r3, [pc, #600]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003bea:	4998      	ldr	r1, [pc, #608]	; (8003e4c <HAL_RCC_OscConfig+0x338>)
 8003bec:	400a      	ands	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d014      	beq.n	8003c22 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fef4 	bl	80029e4 <HAL_GetTick>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c02:	f7fe feef 	bl	80029e4 <HAL_GetTick>
 8003c06:	0002      	movs	r2, r0
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b64      	cmp	r3, #100	; 0x64
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e28c      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c14:	4b8b      	ldr	r3, [pc, #556]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	029b      	lsls	r3, r3, #10
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0xee>
 8003c20:	e015      	b.n	8003c4e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c22:	f7fe fedf 	bl	80029e4 <HAL_GetTick>
 8003c26:	0003      	movs	r3, r0
 8003c28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c2c:	f7fe feda 	bl	80029e4 <HAL_GetTick>
 8003c30:	0002      	movs	r2, r0
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	; 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e277      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3e:	4b81      	ldr	r3, [pc, #516]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	029b      	lsls	r3, r3, #10
 8003c46:	4013      	ands	r3, r2
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x118>
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c4c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2202      	movs	r2, #2
 8003c54:	4013      	ands	r3, r2
 8003c56:	d100      	bne.n	8003c5a <HAL_RCC_OscConfig+0x146>
 8003c58:	e069      	b.n	8003d2e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c5a:	4b7a      	ldr	r3, [pc, #488]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	220c      	movs	r2, #12
 8003c60:	4013      	ands	r3, r2
 8003c62:	d00b      	beq.n	8003c7c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c64:	4b77      	ldr	r3, [pc, #476]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	220c      	movs	r2, #12
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d11c      	bne.n	8003caa <HAL_RCC_OscConfig+0x196>
 8003c70:	4b74      	ldr	r3, [pc, #464]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	025b      	lsls	r3, r3, #9
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d116      	bne.n	8003caa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7c:	4b71      	ldr	r3, [pc, #452]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2202      	movs	r2, #2
 8003c82:	4013      	ands	r3, r2
 8003c84:	d005      	beq.n	8003c92 <HAL_RCC_OscConfig+0x17e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e24d      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c92:	4b6c      	ldr	r3, [pc, #432]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	22f8      	movs	r2, #248	; 0xf8
 8003c98:	4393      	bics	r3, r2
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	00da      	lsls	r2, r3, #3
 8003ca2:	4b68      	ldr	r3, [pc, #416]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca8:	e041      	b.n	8003d2e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d024      	beq.n	8003cfc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb2:	4b64      	ldr	r3, [pc, #400]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b63      	ldr	r3, [pc, #396]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fe fe91 	bl	80029e4 <HAL_GetTick>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc8:	f7fe fe8c 	bl	80029e4 <HAL_GetTick>
 8003ccc:	0002      	movs	r2, r0
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e229      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cda:	4b5a      	ldr	r3, [pc, #360]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d0f1      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce4:	4b57      	ldr	r3, [pc, #348]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	22f8      	movs	r2, #248	; 0xf8
 8003cea:	4393      	bics	r3, r2
 8003cec:	0019      	movs	r1, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00da      	lsls	r2, r3, #3
 8003cf4:	4b53      	ldr	r3, [pc, #332]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e018      	b.n	8003d2e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfc:	4b51      	ldr	r3, [pc, #324]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003d02:	2101      	movs	r1, #1
 8003d04:	438a      	bics	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fe fe6c 	bl	80029e4 <HAL_GetTick>
 8003d0c:	0003      	movs	r3, r0
 8003d0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fe fe67 	bl	80029e4 <HAL_GetTick>
 8003d16:	0002      	movs	r2, r0
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e204      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d24:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d1f1      	bne.n	8003d12 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2208      	movs	r2, #8
 8003d34:	4013      	ands	r3, r2
 8003d36:	d036      	beq.n	8003da6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d019      	beq.n	8003d74 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d40:	4b40      	ldr	r3, [pc, #256]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d44:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003d46:	2101      	movs	r1, #1
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4c:	f7fe fe4a 	bl	80029e4 <HAL_GetTick>
 8003d50:	0003      	movs	r3, r0
 8003d52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d56:	f7fe fe45 	bl	80029e4 <HAL_GetTick>
 8003d5a:	0002      	movs	r2, r0
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1e2      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d68:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d0f1      	beq.n	8003d56 <HAL_RCC_OscConfig+0x242>
 8003d72:	e018      	b.n	8003da6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d74:	4b33      	ldr	r3, [pc, #204]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d78:	4b32      	ldr	r3, [pc, #200]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	438a      	bics	r2, r1
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d80:	f7fe fe30 	bl	80029e4 <HAL_GetTick>
 8003d84:	0003      	movs	r3, r0
 8003d86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d8a:	f7fe fe2b 	bl	80029e4 <HAL_GetTick>
 8003d8e:	0002      	movs	r2, r0
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e1c8      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9c:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	2202      	movs	r2, #2
 8003da2:	4013      	ands	r3, r2
 8003da4:	d1f1      	bne.n	8003d8a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2204      	movs	r2, #4
 8003dac:	4013      	ands	r3, r2
 8003dae:	d100      	bne.n	8003db2 <HAL_RCC_OscConfig+0x29e>
 8003db0:	e0b6      	b.n	8003f20 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db2:	231f      	movs	r3, #31
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dba:	4b22      	ldr	r3, [pc, #136]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	055b      	lsls	r3, r3, #21
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d111      	bne.n	8003dea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc6:	4b1f      	ldr	r3, [pc, #124]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003dc8:	69da      	ldr	r2, [r3, #28]
 8003dca:	4b1e      	ldr	r3, [pc, #120]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	0549      	lsls	r1, r1, #21
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	61da      	str	r2, [r3, #28]
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	055b      	lsls	r3, r3, #21
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003de2:	231f      	movs	r3, #31
 8003de4:	18fb      	adds	r3, r7, r3
 8003de6:	2201      	movs	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dea:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <HAL_RCC_OscConfig+0x33c>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	4013      	ands	r3, r2
 8003df4:	d11a      	bne.n	8003e2c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df6:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <HAL_RCC_OscConfig+0x33c>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <HAL_RCC_OscConfig+0x33c>)
 8003dfc:	2180      	movs	r1, #128	; 0x80
 8003dfe:	0049      	lsls	r1, r1, #1
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e04:	f7fe fdee 	bl	80029e4 <HAL_GetTick>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0e:	f7fe fde9 	bl	80029e4 <HAL_GetTick>
 8003e12:	0002      	movs	r2, r0
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b64      	cmp	r3, #100	; 0x64
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e186      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCC_OscConfig+0x33c>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10f      	bne.n	8003e54 <HAL_RCC_OscConfig+0x340>
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003e36:	6a1a      	ldr	r2, [r3, #32]
 8003e38:	4b02      	ldr	r3, [pc, #8]	; (8003e44 <HAL_RCC_OscConfig+0x330>)
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	621a      	str	r2, [r3, #32]
 8003e40:	e036      	b.n	8003eb0 <HAL_RCC_OscConfig+0x39c>
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	40021000 	.word	0x40021000
 8003e48:	fffeffff 	.word	0xfffeffff
 8003e4c:	fffbffff 	.word	0xfffbffff
 8003e50:	40007000 	.word	0x40007000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10c      	bne.n	8003e76 <HAL_RCC_OscConfig+0x362>
 8003e5c:	4bb6      	ldr	r3, [pc, #728]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003e5e:	6a1a      	ldr	r2, [r3, #32]
 8003e60:	4bb5      	ldr	r3, [pc, #724]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003e62:	2101      	movs	r1, #1
 8003e64:	438a      	bics	r2, r1
 8003e66:	621a      	str	r2, [r3, #32]
 8003e68:	4bb3      	ldr	r3, [pc, #716]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003e6a:	6a1a      	ldr	r2, [r3, #32]
 8003e6c:	4bb2      	ldr	r3, [pc, #712]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003e6e:	2104      	movs	r1, #4
 8003e70:	438a      	bics	r2, r1
 8003e72:	621a      	str	r2, [r3, #32]
 8003e74:	e01c      	b.n	8003eb0 <HAL_RCC_OscConfig+0x39c>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x384>
 8003e7e:	4bae      	ldr	r3, [pc, #696]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	4bad      	ldr	r3, [pc, #692]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003e84:	2104      	movs	r1, #4
 8003e86:	430a      	orrs	r2, r1
 8003e88:	621a      	str	r2, [r3, #32]
 8003e8a:	4bab      	ldr	r3, [pc, #684]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003e8c:	6a1a      	ldr	r2, [r3, #32]
 8003e8e:	4baa      	ldr	r3, [pc, #680]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003e90:	2101      	movs	r1, #1
 8003e92:	430a      	orrs	r2, r1
 8003e94:	621a      	str	r2, [r3, #32]
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0x39c>
 8003e98:	4ba7      	ldr	r3, [pc, #668]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003e9a:	6a1a      	ldr	r2, [r3, #32]
 8003e9c:	4ba6      	ldr	r3, [pc, #664]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	621a      	str	r2, [r3, #32]
 8003ea4:	4ba4      	ldr	r3, [pc, #656]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003ea6:	6a1a      	ldr	r2, [r3, #32]
 8003ea8:	4ba3      	ldr	r3, [pc, #652]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003eaa:	2104      	movs	r1, #4
 8003eac:	438a      	bics	r2, r1
 8003eae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d014      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb8:	f7fe fd94 	bl	80029e4 <HAL_GetTick>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec0:	e009      	b.n	8003ed6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7fe fd8f 	bl	80029e4 <HAL_GetTick>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	4a9b      	ldr	r2, [pc, #620]	; (800413c <HAL_RCC_OscConfig+0x628>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e12b      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed6:	4b98      	ldr	r3, [pc, #608]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	2202      	movs	r2, #2
 8003edc:	4013      	ands	r3, r2
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x3ae>
 8003ee0:	e013      	b.n	8003f0a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fd7f 	bl	80029e4 <HAL_GetTick>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eea:	e009      	b.n	8003f00 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fe fd7a 	bl	80029e4 <HAL_GetTick>
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	4a91      	ldr	r2, [pc, #580]	; (800413c <HAL_RCC_OscConfig+0x628>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e116      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f00:	4b8d      	ldr	r3, [pc, #564]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	2202      	movs	r2, #2
 8003f06:	4013      	ands	r3, r2
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f0a:	231f      	movs	r3, #31
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f14:	4b88      	ldr	r3, [pc, #544]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	4b87      	ldr	r3, [pc, #540]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003f1a:	4989      	ldr	r1, [pc, #548]	; (8004140 <HAL_RCC_OscConfig+0x62c>)
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2210      	movs	r2, #16
 8003f26:	4013      	ands	r3, r2
 8003f28:	d063      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d12a      	bne.n	8003f88 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f32:	4b81      	ldr	r3, [pc, #516]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f36:	4b80      	ldr	r3, [pc, #512]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003f38:	2104      	movs	r1, #4
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003f3e:	4b7e      	ldr	r3, [pc, #504]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f42:	4b7d      	ldr	r3, [pc, #500]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003f44:	2101      	movs	r1, #1
 8003f46:	430a      	orrs	r2, r1
 8003f48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4a:	f7fe fd4b 	bl	80029e4 <HAL_GetTick>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f54:	f7fe fd46 	bl	80029e4 <HAL_GetTick>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e0e3      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f66:	4b74      	ldr	r3, [pc, #464]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d0f1      	beq.n	8003f54 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f70:	4b71      	ldr	r3, [pc, #452]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	22f8      	movs	r2, #248	; 0xf8
 8003f76:	4393      	bics	r3, r2
 8003f78:	0019      	movs	r1, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	00da      	lsls	r2, r3, #3
 8003f80:	4b6d      	ldr	r3, [pc, #436]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003f82:	430a      	orrs	r2, r1
 8003f84:	635a      	str	r2, [r3, #52]	; 0x34
 8003f86:	e034      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	3305      	adds	r3, #5
 8003f8e:	d111      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003f90:	4b69      	ldr	r3, [pc, #420]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f94:	4b68      	ldr	r3, [pc, #416]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003f96:	2104      	movs	r1, #4
 8003f98:	438a      	bics	r2, r1
 8003f9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f9c:	4b66      	ldr	r3, [pc, #408]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	22f8      	movs	r2, #248	; 0xf8
 8003fa2:	4393      	bics	r3, r2
 8003fa4:	0019      	movs	r1, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	00da      	lsls	r2, r3, #3
 8003fac:	4b62      	ldr	r3, [pc, #392]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8003fb2:	e01e      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fb4:	4b60      	ldr	r3, [pc, #384]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb8:	4b5f      	ldr	r3, [pc, #380]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003fba:	2104      	movs	r1, #4
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003fc0:	4b5d      	ldr	r3, [pc, #372]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc4:	4b5c      	ldr	r3, [pc, #368]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	438a      	bics	r2, r1
 8003fca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fcc:	f7fe fd0a 	bl	80029e4 <HAL_GetTick>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003fd6:	f7fe fd05 	bl	80029e4 <HAL_GetTick>
 8003fda:	0002      	movs	r2, r0
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e0a2      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fe8:	4b53      	ldr	r3, [pc, #332]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fec:	2202      	movs	r2, #2
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d1f1      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d100      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4e8>
 8003ffa:	e097      	b.n	800412c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffc:	4b4e      	ldr	r3, [pc, #312]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	220c      	movs	r2, #12
 8004002:	4013      	ands	r3, r2
 8004004:	2b08      	cmp	r3, #8
 8004006:	d100      	bne.n	800400a <HAL_RCC_OscConfig+0x4f6>
 8004008:	e06b      	b.n	80040e2 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d14c      	bne.n	80040ac <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	4b49      	ldr	r3, [pc, #292]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4b48      	ldr	r3, [pc, #288]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8004018:	494a      	ldr	r1, [pc, #296]	; (8004144 <HAL_RCC_OscConfig+0x630>)
 800401a:	400a      	ands	r2, r1
 800401c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401e:	f7fe fce1 	bl	80029e4 <HAL_GetTick>
 8004022:	0003      	movs	r3, r0
 8004024:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004028:	f7fe fcdc 	bl	80029e4 <HAL_GetTick>
 800402c:	0002      	movs	r2, r0
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e079      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403a:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	049b      	lsls	r3, r3, #18
 8004042:	4013      	ands	r3, r2
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004046:	4b3c      	ldr	r3, [pc, #240]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	220f      	movs	r2, #15
 800404c:	4393      	bics	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	4b38      	ldr	r3, [pc, #224]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8004056:	430a      	orrs	r2, r1
 8004058:	62da      	str	r2, [r3, #44]	; 0x2c
 800405a:	4b37      	ldr	r3, [pc, #220]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4a3a      	ldr	r2, [pc, #232]	; (8004148 <HAL_RCC_OscConfig+0x634>)
 8004060:	4013      	ands	r3, r2
 8004062:	0019      	movs	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	431a      	orrs	r2, r3
 800406e:	4b32      	ldr	r3, [pc, #200]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8004070:	430a      	orrs	r2, r1
 8004072:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004074:	4b30      	ldr	r3, [pc, #192]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b2f      	ldr	r3, [pc, #188]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	0449      	lsls	r1, r1, #17
 800407e:	430a      	orrs	r2, r1
 8004080:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7fe fcaf 	bl	80029e4 <HAL_GetTick>
 8004086:	0003      	movs	r3, r0
 8004088:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408c:	f7fe fcaa 	bl	80029e4 <HAL_GetTick>
 8004090:	0002      	movs	r2, r0
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e047      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800409e:	4b26      	ldr	r3, [pc, #152]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	049b      	lsls	r3, r3, #18
 80040a6:	4013      	ands	r3, r2
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x578>
 80040aa:	e03f      	b.n	800412c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ac:	4b22      	ldr	r3, [pc, #136]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4b21      	ldr	r3, [pc, #132]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 80040b2:	4924      	ldr	r1, [pc, #144]	; (8004144 <HAL_RCC_OscConfig+0x630>)
 80040b4:	400a      	ands	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe fc94 	bl	80029e4 <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c2:	f7fe fc8f 	bl	80029e4 <HAL_GetTick>
 80040c6:	0002      	movs	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e02c      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d4:	4b18      	ldr	r3, [pc, #96]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	049b      	lsls	r3, r3, #18
 80040dc:	4013      	ands	r3, r2
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0x5ae>
 80040e0:	e024      	b.n	800412c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e01f      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80040f4:	4b10      	ldr	r3, [pc, #64]	; (8004138 <HAL_RCC_OscConfig+0x624>)
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	025b      	lsls	r3, r3, #9
 8004100:	401a      	ands	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	429a      	cmp	r2, r3
 8004108:	d10e      	bne.n	8004128 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	220f      	movs	r2, #15
 800410e:	401a      	ands	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004114:	429a      	cmp	r2, r3
 8004116:	d107      	bne.n	8004128 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	23f0      	movs	r3, #240	; 0xf0
 800411c:	039b      	lsls	r3, r3, #14
 800411e:	401a      	ands	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	0018      	movs	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	b008      	add	sp, #32
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	40021000 	.word	0x40021000
 800413c:	00001388 	.word	0x00001388
 8004140:	efffffff 	.word	0xefffffff
 8004144:	feffffff 	.word	0xfeffffff
 8004148:	ffc2ffff 	.word	0xffc2ffff

0800414c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0b3      	b.n	80042c8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004160:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <HAL_RCC_ClockConfig+0x184>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2201      	movs	r2, #1
 8004166:	4013      	ands	r3, r2
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d911      	bls.n	8004192 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416e:	4b58      	ldr	r3, [pc, #352]	; (80042d0 <HAL_RCC_ClockConfig+0x184>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2201      	movs	r2, #1
 8004174:	4393      	bics	r3, r2
 8004176:	0019      	movs	r1, r3
 8004178:	4b55      	ldr	r3, [pc, #340]	; (80042d0 <HAL_RCC_ClockConfig+0x184>)
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004180:	4b53      	ldr	r3, [pc, #332]	; (80042d0 <HAL_RCC_ClockConfig+0x184>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2201      	movs	r2, #1
 8004186:	4013      	ands	r3, r2
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d001      	beq.n	8004192 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e09a      	b.n	80042c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2202      	movs	r2, #2
 8004198:	4013      	ands	r3, r2
 800419a:	d015      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2204      	movs	r2, #4
 80041a2:	4013      	ands	r3, r2
 80041a4:	d006      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80041a6:	4b4b      	ldr	r3, [pc, #300]	; (80042d4 <HAL_RCC_ClockConfig+0x188>)
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	4b4a      	ldr	r3, [pc, #296]	; (80042d4 <HAL_RCC_ClockConfig+0x188>)
 80041ac:	21e0      	movs	r1, #224	; 0xe0
 80041ae:	00c9      	lsls	r1, r1, #3
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b4:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_RCC_ClockConfig+0x188>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	22f0      	movs	r2, #240	; 0xf0
 80041ba:	4393      	bics	r3, r2
 80041bc:	0019      	movs	r1, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	4b44      	ldr	r3, [pc, #272]	; (80042d4 <HAL_RCC_ClockConfig+0x188>)
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2201      	movs	r2, #1
 80041ce:	4013      	ands	r3, r2
 80041d0:	d040      	beq.n	8004254 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	4b3e      	ldr	r3, [pc, #248]	; (80042d4 <HAL_RCC_ClockConfig+0x188>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	029b      	lsls	r3, r3, #10
 80041e2:	4013      	ands	r3, r2
 80041e4:	d114      	bne.n	8004210 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e06e      	b.n	80042c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d107      	bne.n	8004202 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f2:	4b38      	ldr	r3, [pc, #224]	; (80042d4 <HAL_RCC_ClockConfig+0x188>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	049b      	lsls	r3, r3, #18
 80041fa:	4013      	ands	r3, r2
 80041fc:	d108      	bne.n	8004210 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e062      	b.n	80042c8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	4b34      	ldr	r3, [pc, #208]	; (80042d4 <HAL_RCC_ClockConfig+0x188>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2202      	movs	r2, #2
 8004208:	4013      	ands	r3, r2
 800420a:	d101      	bne.n	8004210 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e05b      	b.n	80042c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004210:	4b30      	ldr	r3, [pc, #192]	; (80042d4 <HAL_RCC_ClockConfig+0x188>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2203      	movs	r2, #3
 8004216:	4393      	bics	r3, r2
 8004218:	0019      	movs	r1, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	4b2d      	ldr	r3, [pc, #180]	; (80042d4 <HAL_RCC_ClockConfig+0x188>)
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004224:	f7fe fbde 	bl	80029e4 <HAL_GetTick>
 8004228:	0003      	movs	r3, r0
 800422a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422c:	e009      	b.n	8004242 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422e:	f7fe fbd9 	bl	80029e4 <HAL_GetTick>
 8004232:	0002      	movs	r2, r0
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	4a27      	ldr	r2, [pc, #156]	; (80042d8 <HAL_RCC_ClockConfig+0x18c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e042      	b.n	80042c8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <HAL_RCC_ClockConfig+0x188>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	220c      	movs	r2, #12
 8004248:	401a      	ands	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	429a      	cmp	r2, r3
 8004252:	d1ec      	bne.n	800422e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <HAL_RCC_ClockConfig+0x184>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2201      	movs	r2, #1
 800425a:	4013      	ands	r3, r2
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d211      	bcs.n	8004286 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <HAL_RCC_ClockConfig+0x184>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2201      	movs	r2, #1
 8004268:	4393      	bics	r3, r2
 800426a:	0019      	movs	r1, r3
 800426c:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <HAL_RCC_ClockConfig+0x184>)
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004274:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <HAL_RCC_ClockConfig+0x184>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2201      	movs	r2, #1
 800427a:	4013      	ands	r3, r2
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d001      	beq.n	8004286 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e020      	b.n	80042c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2204      	movs	r2, #4
 800428c:	4013      	ands	r3, r2
 800428e:	d009      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004290:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <HAL_RCC_ClockConfig+0x188>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4a11      	ldr	r2, [pc, #68]	; (80042dc <HAL_RCC_ClockConfig+0x190>)
 8004296:	4013      	ands	r3, r2
 8004298:	0019      	movs	r1, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <HAL_RCC_ClockConfig+0x188>)
 80042a0:	430a      	orrs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042a4:	f000 f820 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80042a8:	0001      	movs	r1, r0
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <HAL_RCC_ClockConfig+0x188>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	091b      	lsrs	r3, r3, #4
 80042b0:	220f      	movs	r2, #15
 80042b2:	4013      	ands	r3, r2
 80042b4:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <HAL_RCC_ClockConfig+0x194>)
 80042b6:	5cd3      	ldrb	r3, [r2, r3]
 80042b8:	000a      	movs	r2, r1
 80042ba:	40da      	lsrs	r2, r3
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <HAL_RCC_ClockConfig+0x198>)
 80042be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80042c0:	2000      	movs	r0, #0
 80042c2:	f7fe fb49 	bl	8002958 <HAL_InitTick>
  
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b004      	add	sp, #16
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40022000 	.word	0x40022000
 80042d4:	40021000 	.word	0x40021000
 80042d8:	00001388 	.word	0x00001388
 80042dc:	fffff8ff 	.word	0xfffff8ff
 80042e0:	08005308 	.word	0x08005308
 80042e4:	20000008 	.word	0x20000008

080042e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	b590      	push	{r4, r7, lr}
 80042ea:	b08f      	sub	sp, #60	; 0x3c
 80042ec:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80042ee:	2314      	movs	r3, #20
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	4a2b      	ldr	r2, [pc, #172]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042f6:	c313      	stmia	r3!, {r0, r1, r4}
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80042fc:	1d3b      	adds	r3, r7, #4
 80042fe:	4a29      	ldr	r2, [pc, #164]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004300:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004302:	c313      	stmia	r3!, {r0, r1, r4}
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800430c:	2300      	movs	r3, #0
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004310:	2300      	movs	r3, #0
 8004312:	637b      	str	r3, [r7, #52]	; 0x34
 8004314:	2300      	movs	r3, #0
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800431c:	4b22      	ldr	r3, [pc, #136]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	220c      	movs	r2, #12
 8004326:	4013      	ands	r3, r2
 8004328:	2b04      	cmp	r3, #4
 800432a:	d002      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x4a>
 800432c:	2b08      	cmp	r3, #8
 800432e:	d003      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0x50>
 8004330:	e02d      	b.n	800438e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004332:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004334:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004336:	e02d      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	0c9b      	lsrs	r3, r3, #18
 800433c:	220f      	movs	r2, #15
 800433e:	4013      	ands	r3, r2
 8004340:	2214      	movs	r2, #20
 8004342:	18ba      	adds	r2, r7, r2
 8004344:	5cd3      	ldrb	r3, [r2, r3]
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004348:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	220f      	movs	r2, #15
 800434e:	4013      	ands	r3, r2
 8004350:	1d3a      	adds	r2, r7, #4
 8004352:	5cd3      	ldrb	r3, [r2, r3]
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	025b      	lsls	r3, r3, #9
 800435c:	4013      	ands	r3, r2
 800435e:	d009      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004362:	4812      	ldr	r0, [pc, #72]	; (80043ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004364:	f7fb fed0 	bl	8000108 <__udivsi3>
 8004368:	0003      	movs	r3, r0
 800436a:	001a      	movs	r2, r3
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	4353      	muls	r3, r2
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
 8004372:	e009      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004376:	000a      	movs	r2, r1
 8004378:	0152      	lsls	r2, r2, #5
 800437a:	1a52      	subs	r2, r2, r1
 800437c:	0193      	lsls	r3, r2, #6
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	185b      	adds	r3, r3, r1
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800438c:	e002      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800438e:	4b07      	ldr	r3, [pc, #28]	; (80043ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004390:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004392:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b00f      	add	sp, #60	; 0x3c
 800439c:	bd90      	pop	{r4, r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	08005268 	.word	0x08005268
 80043a4:	08005278 	.word	0x08005278
 80043a8:	40021000 	.word	0x40021000
 80043ac:	007a1200 	.word	0x007a1200

080043b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e01e      	b.n	8004400 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	223d      	movs	r2, #61	; 0x3d
 80043c6:	5c9b      	ldrb	r3, [r3, r2]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d107      	bne.n	80043de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	223c      	movs	r2, #60	; 0x3c
 80043d2:	2100      	movs	r1, #0
 80043d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0018      	movs	r0, r3
 80043da:	f7fe f96f 	bl	80026bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	223d      	movs	r2, #61	; 0x3d
 80043e2:	2102      	movs	r1, #2
 80043e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3304      	adds	r3, #4
 80043ee:	0019      	movs	r1, r3
 80043f0:	0010      	movs	r0, r2
 80043f2:	f000 f9f7 	bl	80047e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	223d      	movs	r2, #61	; 0x3d
 80043fa:	2101      	movs	r1, #1
 80043fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	0018      	movs	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	b002      	add	sp, #8
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e01e      	b.n	8004458 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	223d      	movs	r2, #61	; 0x3d
 800441e:	5c9b      	ldrb	r3, [r3, r2]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d107      	bne.n	8004436 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	223c      	movs	r2, #60	; 0x3c
 800442a:	2100      	movs	r1, #0
 800442c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	0018      	movs	r0, r3
 8004432:	f7fe f963 	bl	80026fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	223d      	movs	r2, #61	; 0x3d
 800443a:	2102      	movs	r1, #2
 800443c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3304      	adds	r3, #4
 8004446:	0019      	movs	r1, r3
 8004448:	0010      	movs	r0, r2
 800444a:	f000 f9cb 	bl	80047e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	223d      	movs	r2, #61	; 0x3d
 8004452:	2101      	movs	r1, #1
 8004454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b002      	add	sp, #8
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6839      	ldr	r1, [r7, #0]
 8004470:	2201      	movs	r2, #1
 8004472:	0018      	movs	r0, r3
 8004474:	f000 fccc 	bl	8004e10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1a      	ldr	r2, [pc, #104]	; (80044e8 <HAL_TIM_PWM_Start+0x88>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00e      	beq.n	80044a0 <HAL_TIM_PWM_Start+0x40>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a19      	ldr	r2, [pc, #100]	; (80044ec <HAL_TIM_PWM_Start+0x8c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d009      	beq.n	80044a0 <HAL_TIM_PWM_Start+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a17      	ldr	r2, [pc, #92]	; (80044f0 <HAL_TIM_PWM_Start+0x90>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d004      	beq.n	80044a0 <HAL_TIM_PWM_Start+0x40>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <HAL_TIM_PWM_Start+0x94>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d101      	bne.n	80044a4 <HAL_TIM_PWM_Start+0x44>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <HAL_TIM_PWM_Start+0x46>
 80044a4:	2300      	movs	r3, #0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2180      	movs	r1, #128	; 0x80
 80044b6:	0209      	lsls	r1, r1, #8
 80044b8:	430a      	orrs	r2, r1
 80044ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2207      	movs	r2, #7
 80044c4:	4013      	ands	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b06      	cmp	r3, #6
 80044cc:	d007      	beq.n	80044de <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2101      	movs	r1, #1
 80044da:	430a      	orrs	r2, r1
 80044dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	0018      	movs	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b004      	add	sp, #16
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40012c00 	.word	0x40012c00
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40014400 	.word	0x40014400
 80044f4:	40014800 	.word	0x40014800

080044f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	223c      	movs	r2, #60	; 0x3c
 8004508:	5c9b      	ldrb	r3, [r3, r2]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800450e:	2302      	movs	r3, #2
 8004510:	e0a4      	b.n	800465c <HAL_TIM_PWM_ConfigChannel+0x164>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	223c      	movs	r2, #60	; 0x3c
 8004516:	2101      	movs	r1, #1
 8004518:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	223d      	movs	r2, #61	; 0x3d
 800451e:	2102      	movs	r1, #2
 8004520:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b04      	cmp	r3, #4
 8004526:	d029      	beq.n	800457c <HAL_TIM_PWM_ConfigChannel+0x84>
 8004528:	d802      	bhi.n	8004530 <HAL_TIM_PWM_ConfigChannel+0x38>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800452e:	e08c      	b.n	800464a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8004530:	2b08      	cmp	r3, #8
 8004532:	d046      	beq.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8004534:	2b0c      	cmp	r3, #12
 8004536:	d065      	beq.n	8004604 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8004538:	e087      	b.n	800464a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	0011      	movs	r1, r2
 8004542:	0018      	movs	r0, r3
 8004544:	f000 f9ce 	bl	80048e4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2108      	movs	r1, #8
 8004554:	430a      	orrs	r2, r1
 8004556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2104      	movs	r1, #4
 8004564:	438a      	bics	r2, r1
 8004566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6999      	ldr	r1, [r3, #24]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	619a      	str	r2, [r3, #24]
      break;
 800457a:	e066      	b.n	800464a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	0011      	movs	r1, r2
 8004584:	0018      	movs	r0, r3
 8004586:	f000 fa35 	bl	80049f4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699a      	ldr	r2, [r3, #24]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2180      	movs	r1, #128	; 0x80
 8004596:	0109      	lsls	r1, r1, #4
 8004598:	430a      	orrs	r2, r1
 800459a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	492f      	ldr	r1, [pc, #188]	; (8004664 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80045a8:	400a      	ands	r2, r1
 80045aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6999      	ldr	r1, [r3, #24]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	619a      	str	r2, [r3, #24]
      break;
 80045c0:	e043      	b.n	800464a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	0011      	movs	r1, r2
 80045ca:	0018      	movs	r0, r3
 80045cc:	f000 fa96 	bl	8004afc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2108      	movs	r1, #8
 80045dc:	430a      	orrs	r2, r1
 80045de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69da      	ldr	r2, [r3, #28]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2104      	movs	r1, #4
 80045ec:	438a      	bics	r2, r1
 80045ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69d9      	ldr	r1, [r3, #28]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	61da      	str	r2, [r3, #28]
      break;
 8004602:	e022      	b.n	800464a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	0011      	movs	r1, r2
 800460c:	0018      	movs	r0, r3
 800460e:	f000 fafb 	bl	8004c08 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2180      	movs	r1, #128	; 0x80
 800461e:	0109      	lsls	r1, r1, #4
 8004620:	430a      	orrs	r2, r1
 8004622:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69da      	ldr	r2, [r3, #28]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	490d      	ldr	r1, [pc, #52]	; (8004664 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8004630:	400a      	ands	r2, r1
 8004632:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69d9      	ldr	r1, [r3, #28]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	021a      	lsls	r2, r3, #8
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	61da      	str	r2, [r3, #28]
      break;
 8004648:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	223d      	movs	r2, #61	; 0x3d
 800464e:	2101      	movs	r1, #1
 8004650:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	223c      	movs	r2, #60	; 0x3c
 8004656:	2100      	movs	r1, #0
 8004658:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b004      	add	sp, #16
 8004662:	bd80      	pop	{r7, pc}
 8004664:	fffffbff 	.word	0xfffffbff

08004668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	223c      	movs	r2, #60	; 0x3c
 8004676:	5c9b      	ldrb	r3, [r3, r2]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_TIM_ConfigClockSource+0x18>
 800467c:	2302      	movs	r3, #2
 800467e:	e0ab      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x170>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	223c      	movs	r2, #60	; 0x3c
 8004684:	2101      	movs	r1, #1
 8004686:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	223d      	movs	r2, #61	; 0x3d
 800468c:	2102      	movs	r1, #2
 800468e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2277      	movs	r2, #119	; 0x77
 800469c:	4393      	bics	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a4f      	ldr	r2, [pc, #316]	; (80047e0 <HAL_TIM_ConfigClockSource+0x178>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d100      	bne.n	80046ba <HAL_TIM_ConfigClockSource+0x52>
 80046b8:	e06b      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x12a>
 80046ba:	d80e      	bhi.n	80046da <HAL_TIM_ConfigClockSource+0x72>
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d100      	bne.n	80046c2 <HAL_TIM_ConfigClockSource+0x5a>
 80046c0:	e077      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x14a>
 80046c2:	d803      	bhi.n	80046cc <HAL_TIM_ConfigClockSource+0x64>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d100      	bne.n	80046ca <HAL_TIM_ConfigClockSource+0x62>
 80046c8:	e073      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80046ca:	e07c      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d100      	bne.n	80046d2 <HAL_TIM_ConfigClockSource+0x6a>
 80046d0:	e06f      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x14a>
 80046d2:	2b30      	cmp	r3, #48	; 0x30
 80046d4:	d100      	bne.n	80046d8 <HAL_TIM_ConfigClockSource+0x70>
 80046d6:	e06c      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80046d8:	e075      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80046da:	2b70      	cmp	r3, #112	; 0x70
 80046dc:	d00e      	beq.n	80046fc <HAL_TIM_ConfigClockSource+0x94>
 80046de:	d804      	bhi.n	80046ea <HAL_TIM_ConfigClockSource+0x82>
 80046e0:	2b50      	cmp	r3, #80	; 0x50
 80046e2:	d036      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0xea>
 80046e4:	2b60      	cmp	r3, #96	; 0x60
 80046e6:	d044      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80046e8:	e06d      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80046ea:	2280      	movs	r2, #128	; 0x80
 80046ec:	0152      	lsls	r2, r2, #5
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d068      	beq.n	80047c4 <HAL_TIM_ConfigClockSource+0x15c>
 80046f2:	2280      	movs	r2, #128	; 0x80
 80046f4:	0192      	lsls	r2, r2, #6
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d017      	beq.n	800472a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80046fa:	e064      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6899      	ldr	r1, [r3, #8]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f000 fb60 	bl	8004dd0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2277      	movs	r2, #119	; 0x77
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	609a      	str	r2, [r3, #8]
      break;
 8004728:	e04d      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6899      	ldr	r1, [r3, #8]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f000 fb49 	bl	8004dd0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2180      	movs	r1, #128	; 0x80
 800474a:	01c9      	lsls	r1, r1, #7
 800474c:	430a      	orrs	r2, r1
 800474e:	609a      	str	r2, [r3, #8]
      break;
 8004750:	e039      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	001a      	movs	r2, r3
 8004760:	f000 fabc 	bl	8004cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2150      	movs	r1, #80	; 0x50
 800476a:	0018      	movs	r0, r3
 800476c:	f000 fb16 	bl	8004d9c <TIM_ITRx_SetConfig>
      break;
 8004770:	e029      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	001a      	movs	r2, r3
 8004780:	f000 fada 	bl	8004d38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2160      	movs	r1, #96	; 0x60
 800478a:	0018      	movs	r0, r3
 800478c:	f000 fb06 	bl	8004d9c <TIM_ITRx_SetConfig>
      break;
 8004790:	e019      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	001a      	movs	r2, r3
 80047a0:	f000 fa9c 	bl	8004cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2140      	movs	r1, #64	; 0x40
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 faf6 	bl	8004d9c <TIM_ITRx_SetConfig>
      break;
 80047b0:	e009      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	0019      	movs	r1, r3
 80047bc:	0010      	movs	r0, r2
 80047be:	f000 faed 	bl	8004d9c <TIM_ITRx_SetConfig>
      break;
 80047c2:	e000      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80047c4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	223d      	movs	r2, #61	; 0x3d
 80047ca:	2101      	movs	r1, #1
 80047cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	223c      	movs	r2, #60	; 0x3c
 80047d2:	2100      	movs	r1, #0
 80047d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	0018      	movs	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	b004      	add	sp, #16
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	ffff00ff 	.word	0xffff00ff

080047e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a34      	ldr	r2, [pc, #208]	; (80048c8 <TIM_Base_SetConfig+0xe4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d008      	beq.n	800480e <TIM_Base_SetConfig+0x2a>
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	2380      	movs	r3, #128	; 0x80
 8004800:	05db      	lsls	r3, r3, #23
 8004802:	429a      	cmp	r2, r3
 8004804:	d003      	beq.n	800480e <TIM_Base_SetConfig+0x2a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a30      	ldr	r2, [pc, #192]	; (80048cc <TIM_Base_SetConfig+0xe8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d108      	bne.n	8004820 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2270      	movs	r2, #112	; 0x70
 8004812:	4393      	bics	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a29      	ldr	r2, [pc, #164]	; (80048c8 <TIM_Base_SetConfig+0xe4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d018      	beq.n	800485a <TIM_Base_SetConfig+0x76>
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	05db      	lsls	r3, r3, #23
 800482e:	429a      	cmp	r2, r3
 8004830:	d013      	beq.n	800485a <TIM_Base_SetConfig+0x76>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a25      	ldr	r2, [pc, #148]	; (80048cc <TIM_Base_SetConfig+0xe8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00f      	beq.n	800485a <TIM_Base_SetConfig+0x76>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a24      	ldr	r2, [pc, #144]	; (80048d0 <TIM_Base_SetConfig+0xec>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00b      	beq.n	800485a <TIM_Base_SetConfig+0x76>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a23      	ldr	r2, [pc, #140]	; (80048d4 <TIM_Base_SetConfig+0xf0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d007      	beq.n	800485a <TIM_Base_SetConfig+0x76>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a22      	ldr	r2, [pc, #136]	; (80048d8 <TIM_Base_SetConfig+0xf4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d003      	beq.n	800485a <TIM_Base_SetConfig+0x76>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a21      	ldr	r2, [pc, #132]	; (80048dc <TIM_Base_SetConfig+0xf8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d108      	bne.n	800486c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <TIM_Base_SetConfig+0xfc>)
 800485e:	4013      	ands	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2280      	movs	r2, #128	; 0x80
 8004870:	4393      	bics	r3, r2
 8004872:	001a      	movs	r2, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <TIM_Base_SetConfig+0xe4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_Base_SetConfig+0xce>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a0d      	ldr	r2, [pc, #52]	; (80048d4 <TIM_Base_SetConfig+0xf0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_Base_SetConfig+0xce>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a0c      	ldr	r2, [pc, #48]	; (80048d8 <TIM_Base_SetConfig+0xf4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_Base_SetConfig+0xce>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a0b      	ldr	r2, [pc, #44]	; (80048dc <TIM_Base_SetConfig+0xf8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d103      	bne.n	80048ba <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	615a      	str	r2, [r3, #20]
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b004      	add	sp, #16
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40002000 	.word	0x40002000
 80048d4:	40014000 	.word	0x40014000
 80048d8:	40014400 	.word	0x40014400
 80048dc:	40014800 	.word	0x40014800
 80048e0:	fffffcff 	.word	0xfffffcff

080048e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	2201      	movs	r2, #1
 80048f4:	4393      	bics	r3, r2
 80048f6:	001a      	movs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2270      	movs	r2, #112	; 0x70
 8004912:	4393      	bics	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2203      	movs	r2, #3
 800491a:	4393      	bics	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2202      	movs	r2, #2
 800492c:	4393      	bics	r3, r2
 800492e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a27      	ldr	r2, [pc, #156]	; (80049dc <TIM_OC1_SetConfig+0xf8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00b      	beq.n	800495a <TIM_OC1_SetConfig+0x76>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a26      	ldr	r2, [pc, #152]	; (80049e0 <TIM_OC1_SetConfig+0xfc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d007      	beq.n	800495a <TIM_OC1_SetConfig+0x76>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a25      	ldr	r2, [pc, #148]	; (80049e4 <TIM_OC1_SetConfig+0x100>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <TIM_OC1_SetConfig+0x76>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a24      	ldr	r2, [pc, #144]	; (80049e8 <TIM_OC1_SetConfig+0x104>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d10c      	bne.n	8004974 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2208      	movs	r2, #8
 800495e:	4393      	bics	r3, r2
 8004960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2204      	movs	r2, #4
 8004970:	4393      	bics	r3, r2
 8004972:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a19      	ldr	r2, [pc, #100]	; (80049dc <TIM_OC1_SetConfig+0xf8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00b      	beq.n	8004994 <TIM_OC1_SetConfig+0xb0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <TIM_OC1_SetConfig+0xfc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d007      	beq.n	8004994 <TIM_OC1_SetConfig+0xb0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <TIM_OC1_SetConfig+0x100>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_OC1_SetConfig+0xb0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <TIM_OC1_SetConfig+0x104>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d111      	bne.n	80049b8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4a15      	ldr	r2, [pc, #84]	; (80049ec <TIM_OC1_SetConfig+0x108>)
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <TIM_OC1_SetConfig+0x10c>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b006      	add	sp, #24
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40014400 	.word	0x40014400
 80049e8:	40014800 	.word	0x40014800
 80049ec:	fffffeff 	.word	0xfffffeff
 80049f0:	fffffdff 	.word	0xfffffdff

080049f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	2210      	movs	r2, #16
 8004a04:	4393      	bics	r3, r2
 8004a06:	001a      	movs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a2e      	ldr	r2, [pc, #184]	; (8004adc <TIM_OC2_SetConfig+0xe8>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4a2d      	ldr	r2, [pc, #180]	; (8004ae0 <TIM_OC2_SetConfig+0xec>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	4393      	bics	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a24      	ldr	r2, [pc, #144]	; (8004ae4 <TIM_OC2_SetConfig+0xf0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d10d      	bne.n	8004a72 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2280      	movs	r2, #128	; 0x80
 8004a5a:	4393      	bics	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2240      	movs	r2, #64	; 0x40
 8004a6e:	4393      	bics	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1b      	ldr	r2, [pc, #108]	; (8004ae4 <TIM_OC2_SetConfig+0xf0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00b      	beq.n	8004a92 <TIM_OC2_SetConfig+0x9e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <TIM_OC2_SetConfig+0xf4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d007      	beq.n	8004a92 <TIM_OC2_SetConfig+0x9e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a19      	ldr	r2, [pc, #100]	; (8004aec <TIM_OC2_SetConfig+0xf8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d003      	beq.n	8004a92 <TIM_OC2_SetConfig+0x9e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a18      	ldr	r2, [pc, #96]	; (8004af0 <TIM_OC2_SetConfig+0xfc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d113      	bne.n	8004aba <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4a17      	ldr	r2, [pc, #92]	; (8004af4 <TIM_OC2_SetConfig+0x100>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4a16      	ldr	r2, [pc, #88]	; (8004af8 <TIM_OC2_SetConfig+0x104>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	621a      	str	r2, [r3, #32]
}
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b006      	add	sp, #24
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	ffff8fff 	.word	0xffff8fff
 8004ae0:	fffffcff 	.word	0xfffffcff
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	40014000 	.word	0x40014000
 8004aec:	40014400 	.word	0x40014400
 8004af0:	40014800 	.word	0x40014800
 8004af4:	fffffbff 	.word	0xfffffbff
 8004af8:	fffff7ff 	.word	0xfffff7ff

08004afc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	4a35      	ldr	r2, [pc, #212]	; (8004be0 <TIM_OC3_SetConfig+0xe4>)
 8004b0c:	401a      	ands	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2270      	movs	r2, #112	; 0x70
 8004b28:	4393      	bics	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2203      	movs	r2, #3
 8004b30:	4393      	bics	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	4a28      	ldr	r2, [pc, #160]	; (8004be4 <TIM_OC3_SetConfig+0xe8>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a24      	ldr	r2, [pc, #144]	; (8004be8 <TIM_OC3_SetConfig+0xec>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10d      	bne.n	8004b76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	4a23      	ldr	r2, [pc, #140]	; (8004bec <TIM_OC3_SetConfig+0xf0>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <TIM_OC3_SetConfig+0xf4>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <TIM_OC3_SetConfig+0xec>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00b      	beq.n	8004b96 <TIM_OC3_SetConfig+0x9a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a1c      	ldr	r2, [pc, #112]	; (8004bf4 <TIM_OC3_SetConfig+0xf8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d007      	beq.n	8004b96 <TIM_OC3_SetConfig+0x9a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a1b      	ldr	r2, [pc, #108]	; (8004bf8 <TIM_OC3_SetConfig+0xfc>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d003      	beq.n	8004b96 <TIM_OC3_SetConfig+0x9a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <TIM_OC3_SetConfig+0x100>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d113      	bne.n	8004bbe <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <TIM_OC3_SetConfig+0x104>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <TIM_OC3_SetConfig+0x108>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	621a      	str	r2, [r3, #32]
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b006      	add	sp, #24
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	fffffeff 	.word	0xfffffeff
 8004be4:	fffffdff 	.word	0xfffffdff
 8004be8:	40012c00 	.word	0x40012c00
 8004bec:	fffff7ff 	.word	0xfffff7ff
 8004bf0:	fffffbff 	.word	0xfffffbff
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40014400 	.word	0x40014400
 8004bfc:	40014800 	.word	0x40014800
 8004c00:	ffffefff 	.word	0xffffefff
 8004c04:	ffffdfff 	.word	0xffffdfff

08004c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	4a28      	ldr	r2, [pc, #160]	; (8004cb8 <TIM_OC4_SetConfig+0xb0>)
 8004c18:	401a      	ands	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <TIM_OC4_SetConfig+0xb4>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4a21      	ldr	r2, [pc, #132]	; (8004cc0 <TIM_OC4_SetConfig+0xb8>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	021b      	lsls	r3, r3, #8
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	; (8004cc4 <TIM_OC4_SetConfig+0xbc>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	031b      	lsls	r3, r3, #12
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a19      	ldr	r2, [pc, #100]	; (8004cc8 <TIM_OC4_SetConfig+0xc0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00b      	beq.n	8004c80 <TIM_OC4_SetConfig+0x78>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a18      	ldr	r2, [pc, #96]	; (8004ccc <TIM_OC4_SetConfig+0xc4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d007      	beq.n	8004c80 <TIM_OC4_SetConfig+0x78>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a17      	ldr	r2, [pc, #92]	; (8004cd0 <TIM_OC4_SetConfig+0xc8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d003      	beq.n	8004c80 <TIM_OC4_SetConfig+0x78>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <TIM_OC4_SetConfig+0xcc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d109      	bne.n	8004c94 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <TIM_OC4_SetConfig+0xd0>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	019b      	lsls	r3, r3, #6
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	b006      	add	sp, #24
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	ffffefff 	.word	0xffffefff
 8004cbc:	ffff8fff 	.word	0xffff8fff
 8004cc0:	fffffcff 	.word	0xfffffcff
 8004cc4:	ffffdfff 	.word	0xffffdfff
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40014400 	.word	0x40014400
 8004cd4:	40014800 	.word	0x40014800
 8004cd8:	ffffbfff 	.word	0xffffbfff

08004cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	4393      	bics	r3, r2
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	22f0      	movs	r2, #240	; 0xf0
 8004d06:	4393      	bics	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	220a      	movs	r2, #10
 8004d18:	4393      	bics	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	621a      	str	r2, [r3, #32]
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b006      	add	sp, #24
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	2210      	movs	r2, #16
 8004d4a:	4393      	bics	r3, r2
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	4a0d      	ldr	r2, [pc, #52]	; (8004d98 <TIM_TI2_ConfigInputStage+0x60>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	031b      	lsls	r3, r3, #12
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	22a0      	movs	r2, #160	; 0xa0
 8004d74:	4393      	bics	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	621a      	str	r2, [r3, #32]
}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b006      	add	sp, #24
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	ffff0fff 	.word	0xffff0fff

08004d9c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2270      	movs	r2, #112	; 0x70
 8004db0:	4393      	bics	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	2207      	movs	r2, #7
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	609a      	str	r2, [r3, #8]
}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	b004      	add	sp, #16
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <TIM_ETR_SetConfig+0x3c>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	021a      	lsls	r2, r3, #8
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	609a      	str	r2, [r3, #8]
}
 8004e04:	46c0      	nop			; (mov r8, r8)
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b006      	add	sp, #24
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	ffff00ff 	.word	0xffff00ff

08004e10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	221f      	movs	r2, #31
 8004e20:	4013      	ands	r3, r2
 8004e22:	2201      	movs	r2, #1
 8004e24:	409a      	lsls	r2, r3
 8004e26:	0013      	movs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	43d2      	mvns	r2, r2
 8004e32:	401a      	ands	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a1a      	ldr	r2, [r3, #32]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	211f      	movs	r1, #31
 8004e40:	400b      	ands	r3, r1
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4099      	lsls	r1, r3
 8004e46:	000b      	movs	r3, r1
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b006      	add	sp, #24
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	223c      	movs	r2, #60	; 0x3c
 8004e66:	5c9b      	ldrb	r3, [r3, r2]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e047      	b.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	223c      	movs	r2, #60	; 0x3c
 8004e74:	2101      	movs	r1, #1
 8004e76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	223d      	movs	r2, #61	; 0x3d
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2270      	movs	r2, #112	; 0x70
 8004e94:	4393      	bics	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00f      	beq.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	05db      	lsls	r3, r3, #23
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d009      	beq.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a11      	ldr	r2, [pc, #68]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d004      	beq.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d10c      	bne.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2280      	movs	r2, #128	; 0x80
 8004ed8:	4393      	bics	r3, r2
 8004eda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	223d      	movs	r2, #61	; 0x3d
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	223c      	movs	r2, #60	; 0x3c
 8004efa:	2100      	movs	r1, #0
 8004efc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	0018      	movs	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b004      	add	sp, #16
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40014000 	.word	0x40014000

08004f14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	223c      	movs	r2, #60	; 0x3c
 8004f26:	5c9b      	ldrb	r3, [r3, r2]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e03e      	b.n	8004fae <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	223c      	movs	r2, #60	; 0x3c
 8004f34:	2101      	movs	r1, #1
 8004f36:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	22ff      	movs	r2, #255	; 0xff
 8004f3c:	4393      	bics	r3, r2
 8004f3e:	001a      	movs	r2, r3
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4a1b      	ldr	r2, [pc, #108]	; (8004fb8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004f4c:	401a      	ands	r2, r3
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004f5a:	401a      	ands	r2, r3
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4a16      	ldr	r2, [pc, #88]	; (8004fc0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004f68:	401a      	ands	r2, r3
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4a13      	ldr	r2, [pc, #76]	; (8004fc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004f76:	401a      	ands	r2, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4a11      	ldr	r2, [pc, #68]	; (8004fc8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004f84:	401a      	ands	r2, r3
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4a0e      	ldr	r2, [pc, #56]	; (8004fcc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004f92:	401a      	ands	r2, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	223c      	movs	r2, #60	; 0x3c
 8004fa8:	2100      	movs	r1, #0
 8004faa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	0018      	movs	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b004      	add	sp, #16
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	fffffcff 	.word	0xfffffcff
 8004fbc:	fffffbff 	.word	0xfffffbff
 8004fc0:	fffff7ff 	.word	0xfffff7ff
 8004fc4:	ffffefff 	.word	0xffffefff
 8004fc8:	ffffdfff 	.word	0xffffdfff
 8004fcc:	ffffbfff 	.word	0xffffbfff

08004fd0 <__errno>:
 8004fd0:	4b01      	ldr	r3, [pc, #4]	; (8004fd8 <__errno+0x8>)
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	4770      	bx	lr
 8004fd6:	46c0      	nop			; (mov r8, r8)
 8004fd8:	20000014 	.word	0x20000014

08004fdc <__libc_init_array>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	2600      	movs	r6, #0
 8004fe0:	4d0c      	ldr	r5, [pc, #48]	; (8005014 <__libc_init_array+0x38>)
 8004fe2:	4c0d      	ldr	r4, [pc, #52]	; (8005018 <__libc_init_array+0x3c>)
 8004fe4:	1b64      	subs	r4, r4, r5
 8004fe6:	10a4      	asrs	r4, r4, #2
 8004fe8:	42a6      	cmp	r6, r4
 8004fea:	d109      	bne.n	8005000 <__libc_init_array+0x24>
 8004fec:	2600      	movs	r6, #0
 8004fee:	f000 f92f 	bl	8005250 <_init>
 8004ff2:	4d0a      	ldr	r5, [pc, #40]	; (800501c <__libc_init_array+0x40>)
 8004ff4:	4c0a      	ldr	r4, [pc, #40]	; (8005020 <__libc_init_array+0x44>)
 8004ff6:	1b64      	subs	r4, r4, r5
 8004ff8:	10a4      	asrs	r4, r4, #2
 8004ffa:	42a6      	cmp	r6, r4
 8004ffc:	d105      	bne.n	800500a <__libc_init_array+0x2e>
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	00b3      	lsls	r3, r6, #2
 8005002:	58eb      	ldr	r3, [r5, r3]
 8005004:	4798      	blx	r3
 8005006:	3601      	adds	r6, #1
 8005008:	e7ee      	b.n	8004fe8 <__libc_init_array+0xc>
 800500a:	00b3      	lsls	r3, r6, #2
 800500c:	58eb      	ldr	r3, [r5, r3]
 800500e:	4798      	blx	r3
 8005010:	3601      	adds	r6, #1
 8005012:	e7f2      	b.n	8004ffa <__libc_init_array+0x1e>
 8005014:	08005320 	.word	0x08005320
 8005018:	08005320 	.word	0x08005320
 800501c:	08005320 	.word	0x08005320
 8005020:	08005324 	.word	0x08005324

08005024 <memset>:
 8005024:	0003      	movs	r3, r0
 8005026:	1812      	adds	r2, r2, r0
 8005028:	4293      	cmp	r3, r2
 800502a:	d100      	bne.n	800502e <memset+0xa>
 800502c:	4770      	bx	lr
 800502e:	7019      	strb	r1, [r3, #0]
 8005030:	3301      	adds	r3, #1
 8005032:	e7f9      	b.n	8005028 <memset+0x4>

08005034 <sqrt>:
 8005034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005036:	b08f      	sub	sp, #60	; 0x3c
 8005038:	0004      	movs	r4, r0
 800503a:	000d      	movs	r5, r1
 800503c:	f000 f854 	bl	80050e8 <__ieee754_sqrt>
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <sqrt+0xac>)
 8005042:	9000      	str	r0, [sp, #0]
 8005044:	9101      	str	r1, [sp, #4]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	b25b      	sxtb	r3, r3
 800504a:	9302      	str	r3, [sp, #8]
 800504c:	3301      	adds	r3, #1
 800504e:	d033      	beq.n	80050b8 <sqrt+0x84>
 8005050:	0022      	movs	r2, r4
 8005052:	002b      	movs	r3, r5
 8005054:	0020      	movs	r0, r4
 8005056:	0029      	movs	r1, r5
 8005058:	f7fc fe1e 	bl	8001c98 <__aeabi_dcmpun>
 800505c:	9003      	str	r0, [sp, #12]
 800505e:	2800      	cmp	r0, #0
 8005060:	d12a      	bne.n	80050b8 <sqrt+0x84>
 8005062:	2600      	movs	r6, #0
 8005064:	2700      	movs	r7, #0
 8005066:	0032      	movs	r2, r6
 8005068:	003b      	movs	r3, r7
 800506a:	0020      	movs	r0, r4
 800506c:	0029      	movs	r1, r5
 800506e:	f7fb f8ed 	bl	800024c <__aeabi_dcmplt>
 8005072:	2800      	cmp	r0, #0
 8005074:	d020      	beq.n	80050b8 <sqrt+0x84>
 8005076:	2301      	movs	r3, #1
 8005078:	9304      	str	r3, [sp, #16]
 800507a:	4b1a      	ldr	r3, [pc, #104]	; (80050e4 <sqrt+0xb0>)
 800507c:	9408      	str	r4, [sp, #32]
 800507e:	9509      	str	r5, [sp, #36]	; 0x24
 8005080:	9305      	str	r3, [sp, #20]
 8005082:	9b03      	ldr	r3, [sp, #12]
 8005084:	9406      	str	r4, [sp, #24]
 8005086:	9507      	str	r5, [sp, #28]
 8005088:	930c      	str	r3, [sp, #48]	; 0x30
 800508a:	9b02      	ldr	r3, [sp, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d117      	bne.n	80050c0 <sqrt+0x8c>
 8005090:	960a      	str	r6, [sp, #40]	; 0x28
 8005092:	970b      	str	r7, [sp, #44]	; 0x2c
 8005094:	a804      	add	r0, sp, #16
 8005096:	f000 f8d9 	bl	800524c <matherr>
 800509a:	2800      	cmp	r0, #0
 800509c:	d01b      	beq.n	80050d6 <sqrt+0xa2>
 800509e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050a0:	9302      	str	r3, [sp, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d004      	beq.n	80050b0 <sqrt+0x7c>
 80050a6:	f7ff ff93 	bl	8004fd0 <__errno>
 80050aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050ac:	9302      	str	r3, [sp, #8]
 80050ae:	6003      	str	r3, [r0, #0]
 80050b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	9401      	str	r4, [sp, #4]
 80050b8:	9800      	ldr	r0, [sp, #0]
 80050ba:	9901      	ldr	r1, [sp, #4]
 80050bc:	b00f      	add	sp, #60	; 0x3c
 80050be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c0:	003b      	movs	r3, r7
 80050c2:	0032      	movs	r2, r6
 80050c4:	0030      	movs	r0, r6
 80050c6:	0039      	movs	r1, r7
 80050c8:	f7fb fc22 	bl	8000910 <__aeabi_ddiv>
 80050cc:	9b02      	ldr	r3, [sp, #8]
 80050ce:	900a      	str	r0, [sp, #40]	; 0x28
 80050d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d1de      	bne.n	8005094 <sqrt+0x60>
 80050d6:	f7ff ff7b 	bl	8004fd0 <__errno>
 80050da:	2321      	movs	r3, #33	; 0x21
 80050dc:	6003      	str	r3, [r0, #0]
 80050de:	e7de      	b.n	800509e <sqrt+0x6a>
 80050e0:	20000078 	.word	0x20000078
 80050e4:	08005318 	.word	0x08005318

080050e8 <__ieee754_sqrt>:
 80050e8:	4b55      	ldr	r3, [pc, #340]	; (8005240 <__ieee754_sqrt+0x158>)
 80050ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050ec:	001a      	movs	r2, r3
 80050ee:	0005      	movs	r5, r0
 80050f0:	000c      	movs	r4, r1
 80050f2:	400a      	ands	r2, r1
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d10f      	bne.n	8005118 <__ieee754_sqrt+0x30>
 80050f8:	0002      	movs	r2, r0
 80050fa:	000b      	movs	r3, r1
 80050fc:	f7fc f812 	bl	8001124 <__aeabi_dmul>
 8005100:	0002      	movs	r2, r0
 8005102:	000b      	movs	r3, r1
 8005104:	0028      	movs	r0, r5
 8005106:	0021      	movs	r1, r4
 8005108:	f7fb f8e6 	bl	80002d8 <__aeabi_dadd>
 800510c:	0005      	movs	r5, r0
 800510e:	000c      	movs	r4, r1
 8005110:	0028      	movs	r0, r5
 8005112:	0021      	movs	r1, r4
 8005114:	b003      	add	sp, #12
 8005116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005118:	0002      	movs	r2, r0
 800511a:	2900      	cmp	r1, #0
 800511c:	dc10      	bgt.n	8005140 <__ieee754_sqrt+0x58>
 800511e:	004b      	lsls	r3, r1, #1
 8005120:	085b      	lsrs	r3, r3, #1
 8005122:	4303      	orrs	r3, r0
 8005124:	d0f4      	beq.n	8005110 <__ieee754_sqrt+0x28>
 8005126:	2000      	movs	r0, #0
 8005128:	4281      	cmp	r1, r0
 800512a:	d100      	bne.n	800512e <__ieee754_sqrt+0x46>
 800512c:	e07f      	b.n	800522e <__ieee754_sqrt+0x146>
 800512e:	000b      	movs	r3, r1
 8005130:	0028      	movs	r0, r5
 8005132:	f7fc fa69 	bl	8001608 <__aeabi_dsub>
 8005136:	0002      	movs	r2, r0
 8005138:	000b      	movs	r3, r1
 800513a:	f7fb fbe9 	bl	8000910 <__aeabi_ddiv>
 800513e:	e7e5      	b.n	800510c <__ieee754_sqrt+0x24>
 8005140:	1508      	asrs	r0, r1, #20
 8005142:	d074      	beq.n	800522e <__ieee754_sqrt+0x146>
 8005144:	4b3f      	ldr	r3, [pc, #252]	; (8005244 <__ieee754_sqrt+0x15c>)
 8005146:	0309      	lsls	r1, r1, #12
 8005148:	18c0      	adds	r0, r0, r3
 800514a:	2380      	movs	r3, #128	; 0x80
 800514c:	0b09      	lsrs	r1, r1, #12
 800514e:	035b      	lsls	r3, r3, #13
 8005150:	4319      	orrs	r1, r3
 8005152:	07c3      	lsls	r3, r0, #31
 8005154:	d503      	bpl.n	800515e <__ieee754_sqrt+0x76>
 8005156:	0fd3      	lsrs	r3, r2, #31
 8005158:	0049      	lsls	r1, r1, #1
 800515a:	18c9      	adds	r1, r1, r3
 800515c:	0052      	lsls	r2, r2, #1
 800515e:	2400      	movs	r4, #0
 8005160:	1043      	asrs	r3, r0, #1
 8005162:	0049      	lsls	r1, r1, #1
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	2580      	movs	r5, #128	; 0x80
 8005168:	0fd3      	lsrs	r3, r2, #31
 800516a:	18cb      	adds	r3, r1, r3
 800516c:	0020      	movs	r0, r4
 800516e:	2116      	movs	r1, #22
 8005170:	0052      	lsls	r2, r2, #1
 8005172:	03ad      	lsls	r5, r5, #14
 8005174:	1946      	adds	r6, r0, r5
 8005176:	429e      	cmp	r6, r3
 8005178:	dc02      	bgt.n	8005180 <__ieee754_sqrt+0x98>
 800517a:	1970      	adds	r0, r6, r5
 800517c:	1b9b      	subs	r3, r3, r6
 800517e:	1964      	adds	r4, r4, r5
 8005180:	0fd6      	lsrs	r6, r2, #31
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	3901      	subs	r1, #1
 8005186:	199b      	adds	r3, r3, r6
 8005188:	0052      	lsls	r2, r2, #1
 800518a:	086d      	lsrs	r5, r5, #1
 800518c:	2900      	cmp	r1, #0
 800518e:	d1f1      	bne.n	8005174 <__ieee754_sqrt+0x8c>
 8005190:	2520      	movs	r5, #32
 8005192:	2680      	movs	r6, #128	; 0x80
 8005194:	46ac      	mov	ip, r5
 8005196:	9100      	str	r1, [sp, #0]
 8005198:	0636      	lsls	r6, r6, #24
 800519a:	9d00      	ldr	r5, [sp, #0]
 800519c:	1977      	adds	r7, r6, r5
 800519e:	4283      	cmp	r3, r0
 80051a0:	dc02      	bgt.n	80051a8 <__ieee754_sqrt+0xc0>
 80051a2:	d112      	bne.n	80051ca <__ieee754_sqrt+0xe2>
 80051a4:	4297      	cmp	r7, r2
 80051a6:	d810      	bhi.n	80051ca <__ieee754_sqrt+0xe2>
 80051a8:	19bd      	adds	r5, r7, r6
 80051aa:	9500      	str	r5, [sp, #0]
 80051ac:	0005      	movs	r5, r0
 80051ae:	2f00      	cmp	r7, #0
 80051b0:	da03      	bge.n	80051ba <__ieee754_sqrt+0xd2>
 80051b2:	9d00      	ldr	r5, [sp, #0]
 80051b4:	43ed      	mvns	r5, r5
 80051b6:	0fed      	lsrs	r5, r5, #31
 80051b8:	1945      	adds	r5, r0, r5
 80051ba:	1a1b      	subs	r3, r3, r0
 80051bc:	42ba      	cmp	r2, r7
 80051be:	4180      	sbcs	r0, r0
 80051c0:	4240      	negs	r0, r0
 80051c2:	1a1b      	subs	r3, r3, r0
 80051c4:	0028      	movs	r0, r5
 80051c6:	1bd2      	subs	r2, r2, r7
 80051c8:	1989      	adds	r1, r1, r6
 80051ca:	0fd5      	lsrs	r5, r2, #31
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	18eb      	adds	r3, r5, r3
 80051d0:	2501      	movs	r5, #1
 80051d2:	426d      	negs	r5, r5
 80051d4:	44ac      	add	ip, r5
 80051d6:	4665      	mov	r5, ip
 80051d8:	0052      	lsls	r2, r2, #1
 80051da:	0876      	lsrs	r6, r6, #1
 80051dc:	2d00      	cmp	r5, #0
 80051de:	d1dc      	bne.n	800519a <__ieee754_sqrt+0xb2>
 80051e0:	4313      	orrs	r3, r2
 80051e2:	d003      	beq.n	80051ec <__ieee754_sqrt+0x104>
 80051e4:	1c4b      	adds	r3, r1, #1
 80051e6:	d127      	bne.n	8005238 <__ieee754_sqrt+0x150>
 80051e8:	4661      	mov	r1, ip
 80051ea:	3401      	adds	r4, #1
 80051ec:	4b16      	ldr	r3, [pc, #88]	; (8005248 <__ieee754_sqrt+0x160>)
 80051ee:	1060      	asrs	r0, r4, #1
 80051f0:	18c0      	adds	r0, r0, r3
 80051f2:	0849      	lsrs	r1, r1, #1
 80051f4:	07e3      	lsls	r3, r4, #31
 80051f6:	d502      	bpl.n	80051fe <__ieee754_sqrt+0x116>
 80051f8:	2380      	movs	r3, #128	; 0x80
 80051fa:	061b      	lsls	r3, r3, #24
 80051fc:	4319      	orrs	r1, r3
 80051fe:	9b01      	ldr	r3, [sp, #4]
 8005200:	000d      	movs	r5, r1
 8005202:	051c      	lsls	r4, r3, #20
 8005204:	1823      	adds	r3, r4, r0
 8005206:	001c      	movs	r4, r3
 8005208:	e782      	b.n	8005110 <__ieee754_sqrt+0x28>
 800520a:	0ad1      	lsrs	r1, r2, #11
 800520c:	3b15      	subs	r3, #21
 800520e:	0552      	lsls	r2, r2, #21
 8005210:	2900      	cmp	r1, #0
 8005212:	d0fa      	beq.n	800520a <__ieee754_sqrt+0x122>
 8005214:	2480      	movs	r4, #128	; 0x80
 8005216:	0364      	lsls	r4, r4, #13
 8005218:	4221      	tst	r1, r4
 800521a:	d00a      	beq.n	8005232 <__ieee754_sqrt+0x14a>
 800521c:	2420      	movs	r4, #32
 800521e:	0016      	movs	r6, r2
 8005220:	1a24      	subs	r4, r4, r0
 8005222:	40e6      	lsrs	r6, r4
 8005224:	1e45      	subs	r5, r0, #1
 8005226:	4082      	lsls	r2, r0
 8005228:	4331      	orrs	r1, r6
 800522a:	1b58      	subs	r0, r3, r5
 800522c:	e78a      	b.n	8005144 <__ieee754_sqrt+0x5c>
 800522e:	2300      	movs	r3, #0
 8005230:	e7ee      	b.n	8005210 <__ieee754_sqrt+0x128>
 8005232:	0049      	lsls	r1, r1, #1
 8005234:	3001      	adds	r0, #1
 8005236:	e7ef      	b.n	8005218 <__ieee754_sqrt+0x130>
 8005238:	2301      	movs	r3, #1
 800523a:	3101      	adds	r1, #1
 800523c:	4399      	bics	r1, r3
 800523e:	e7d5      	b.n	80051ec <__ieee754_sqrt+0x104>
 8005240:	7ff00000 	.word	0x7ff00000
 8005244:	fffffc01 	.word	0xfffffc01
 8005248:	3fe00000 	.word	0x3fe00000

0800524c <matherr>:
 800524c:	2000      	movs	r0, #0
 800524e:	4770      	bx	lr

08005250 <_init>:
 8005250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005256:	bc08      	pop	{r3}
 8005258:	469e      	mov	lr, r3
 800525a:	4770      	bx	lr

0800525c <_fini>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005262:	bc08      	pop	{r3}
 8005264:	469e      	mov	lr, r3
 8005266:	4770      	bx	lr
