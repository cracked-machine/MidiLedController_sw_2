
MidiLedController_sw_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004708  08004708  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004708  08004708  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004708  08004708  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800470c  0800470c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000014  08004724  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004724  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d499  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000275f  00000000  00000000  0002d4d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d70  00000000  00000000  0002fc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c08  00000000  00000000  000309a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000115d7  00000000  00000000  000315b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d386  00000000  00000000  00042b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005d423  00000000  00000000  0004ff0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ad330  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd8  00000000  00000000  000ad3ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004654 	.word	0x08004654

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08004654 	.word	0x08004654

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f004 fa08 	bl	8004644 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000234:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000236:	4a27      	ldr	r2, [pc, #156]	; (80002d4 <MX_ADC_Init+0xb4>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800023a:	4b25      	ldr	r3, [pc, #148]	; (80002d0 <MX_ADC_Init+0xb0>)
 800023c:	2200      	movs	r2, #0
 800023e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000240:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000246:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800024c:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <MX_ADC_Init+0xb0>)
 800024e:	2201      	movs	r2, #1
 8000250:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000252:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000254:	2204      	movs	r2, #4
 8000256:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000258:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <MX_ADC_Init+0xb0>)
 800025a:	2200      	movs	r2, #0
 800025c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000260:	2200      	movs	r2, #0
 8000262:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000266:	2201      	movs	r2, #1
 8000268:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <MX_ADC_Init+0xb0>)
 800026c:	2200      	movs	r2, #0
 800026e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000272:	22c2      	movs	r2, #194	; 0xc2
 8000274:	32ff      	adds	r2, #255	; 0xff
 8000276:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <MX_ADC_Init+0xb0>)
 800027a:	2200      	movs	r2, #0
 800027c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000280:	2224      	movs	r2, #36	; 0x24
 8000282:	2101      	movs	r1, #1
 8000284:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000286:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <MX_ADC_Init+0xb0>)
 8000288:	2200      	movs	r2, #0
 800028a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <MX_ADC_Init+0xb0>)
 800028e:	0018      	movs	r0, r3
 8000290:	f001 f8da 	bl	8001448 <HAL_ADC_Init>
 8000294:	1e03      	subs	r3, r0, #0
 8000296:	d001      	beq.n	800029c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000298:	f000 fa99 	bl	80007ce <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2280      	movs	r2, #128	; 0x80
 80002a6:	0152      	lsls	r2, r2, #5
 80002a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2280      	movs	r2, #128	; 0x80
 80002ae:	0552      	lsls	r2, r2, #21
 80002b0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002b2:	1d3a      	adds	r2, r7, #4
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <MX_ADC_Init+0xb0>)
 80002b6:	0011      	movs	r1, r2
 80002b8:	0018      	movs	r0, r3
 80002ba:	f001 fa9f 	bl	80017fc <HAL_ADC_ConfigChannel>
 80002be:	1e03      	subs	r3, r0, #0
 80002c0:	d001      	beq.n	80002c6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80002c2:	f000 fa84 	bl	80007ce <Error_Handler>
  }

}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	46bd      	mov	sp, r7
 80002ca:	b004      	add	sp, #16
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	20000084 	.word	0x20000084
 80002d4:	40012400 	.word	0x40012400

080002d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e0:	2314      	movs	r3, #20
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	0018      	movs	r0, r3
 80002e6:	2314      	movs	r3, #20
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f004 f9aa 	bl	8004644 <memset>
  if(adcHandle->Instance==ADC1)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a2d      	ldr	r2, [pc, #180]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d154      	bne.n	80003a4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002fa:	4b2d      	ldr	r3, [pc, #180]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 80002fc:	699a      	ldr	r2, [r3, #24]
 80002fe:	4b2c      	ldr	r3, [pc, #176]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000300:	2180      	movs	r1, #128	; 0x80
 8000302:	0089      	lsls	r1, r1, #2
 8000304:	430a      	orrs	r2, r1
 8000306:	619a      	str	r2, [r3, #24]
 8000308:	4b29      	ldr	r3, [pc, #164]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800030a:	699a      	ldr	r2, [r3, #24]
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	4013      	ands	r3, r2
 8000312:	613b      	str	r3, [r7, #16]
 8000314:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000316:	4b26      	ldr	r3, [pc, #152]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000318:	695a      	ldr	r2, [r3, #20]
 800031a:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800031c:	2180      	movs	r1, #128	; 0x80
 800031e:	0289      	lsls	r1, r1, #10
 8000320:	430a      	orrs	r2, r1
 8000322:	615a      	str	r2, [r3, #20]
 8000324:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000326:	695a      	ldr	r2, [r3, #20]
 8000328:	2380      	movs	r3, #128	; 0x80
 800032a:	029b      	lsls	r3, r3, #10
 800032c:	4013      	ands	r3, r2
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000332:	2114      	movs	r1, #20
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2201      	movs	r2, #1
 8000338:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2203      	movs	r2, #3
 800033e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000346:	187a      	adds	r2, r7, r1
 8000348:	2390      	movs	r3, #144	; 0x90
 800034a:	05db      	lsls	r3, r3, #23
 800034c:	0011      	movs	r1, r2
 800034e:	0018      	movs	r0, r3
 8000350:	f001 ff76 	bl	8002240 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000354:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 8000356:	4a18      	ldr	r2, [pc, #96]	; (80003b8 <HAL_ADC_MspInit+0xe0>)
 8000358:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 8000368:	2280      	movs	r2, #128	; 0x80
 800036a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 800036e:	2280      	movs	r2, #128	; 0x80
 8000370:	0092      	lsls	r2, r2, #2
 8000372:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	0112      	lsls	r2, r2, #4
 800037a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800037c:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 800037e:	2220      	movs	r2, #32
 8000380:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 8000384:	2200      	movs	r2, #0
 8000386:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 800038a:	0018      	movs	r0, r3
 800038c:	f001 fdc0 	bl	8001f10 <HAL_DMA_Init>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000394:	f000 fa1b 	bl	80007ce <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a06      	ldr	r2, [pc, #24]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 800039c:	631a      	str	r2, [r3, #48]	; 0x30
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b00a      	add	sp, #40	; 0x28
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40012400 	.word	0x40012400
 80003b0:	40021000 	.word	0x40021000
 80003b4:	20000040 	.word	0x20000040
 80003b8:	40020008 	.word	0x40020008

080003bc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_DMA_Init+0x38>)
 80003c4:	695a      	ldr	r2, [r3, #20]
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_DMA_Init+0x38>)
 80003c8:	2101      	movs	r1, #1
 80003ca:	430a      	orrs	r2, r1
 80003cc:	615a      	str	r2, [r3, #20]
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_DMA_Init+0x38>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	2201      	movs	r2, #1
 80003d4:	4013      	ands	r3, r2
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80003da:	2200      	movs	r2, #0
 80003dc:	2101      	movs	r1, #1
 80003de:	2009      	movs	r0, #9
 80003e0:	f001 fd64 	bl	8001eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003e4:	2009      	movs	r0, #9
 80003e6:	f001 fd76 	bl	8001ed6 <HAL_NVIC_EnableIRQ>

}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b002      	add	sp, #8
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	40021000 	.word	0x40021000

080003f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003f8:	b590      	push	{r4, r7, lr}
 80003fa:	b089      	sub	sp, #36	; 0x24
 80003fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	240c      	movs	r4, #12
 8000400:	193b      	adds	r3, r7, r4
 8000402:	0018      	movs	r0, r3
 8000404:	2314      	movs	r3, #20
 8000406:	001a      	movs	r2, r3
 8000408:	2100      	movs	r1, #0
 800040a:	f004 f91b 	bl	8004644 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_GPIO_Init+0x78>)
 8000410:	695a      	ldr	r2, [r3, #20]
 8000412:	4b17      	ldr	r3, [pc, #92]	; (8000470 <MX_GPIO_Init+0x78>)
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	0289      	lsls	r1, r1, #10
 8000418:	430a      	orrs	r2, r1
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <MX_GPIO_Init+0x78>)
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	029b      	lsls	r3, r3, #10
 8000424:	4013      	ands	r3, r2
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_GPIO_Init+0x78>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <MX_GPIO_Init+0x78>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	02c9      	lsls	r1, r1, #11
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <MX_GPIO_Init+0x78>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	02db      	lsls	r3, r3, #11
 8000440:	4013      	ands	r3, r2
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CONFIG1_Pin|CONFIG2_Pin|CONFIG3_Pin|CONFIG4_Pin;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	22f0      	movs	r2, #240	; 0xf0
 800044a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2200      	movs	r2, #0
 8000450:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2201      	movs	r2, #1
 8000456:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	193a      	adds	r2, r7, r4
 800045a:	2390      	movs	r3, #144	; 0x90
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	0011      	movs	r1, r2
 8000460:	0018      	movs	r0, r3
 8000462:	f001 feed 	bl	8002240 <HAL_GPIO_Init>

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b009      	add	sp, #36	; 0x24
 800046c:	bd90      	pop	{r4, r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40021000 	.word	0x40021000

08000474 <setMidiChannel>:
		  pwm_fade_up = 1;
	  }
}

void setMidiChannel()
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	bootconfig = 0;
 8000478:	4b47      	ldr	r3, [pc, #284]	; (8000598 <setMidiChannel+0x124>)
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
	// discover config dip switch settings
	if(HAL_GPIO_ReadPin(GPIOA, CONFIG1_Pin))
 800047e:	2390      	movs	r3, #144	; 0x90
 8000480:	05db      	lsls	r3, r3, #23
 8000482:	2110      	movs	r1, #16
 8000484:	0018      	movs	r0, r3
 8000486:	f002 f84b 	bl	8002520 <HAL_GPIO_ReadPin>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d007      	beq.n	800049e <setMidiChannel+0x2a>
	{
	  bootconfig |= (1 << 0);
 800048e:	4b42      	ldr	r3, [pc, #264]	; (8000598 <setMidiChannel+0x124>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	b2db      	uxtb	r3, r3
 8000494:	2201      	movs	r2, #1
 8000496:	4313      	orrs	r3, r2
 8000498:	b2da      	uxtb	r2, r3
 800049a:	4b3f      	ldr	r3, [pc, #252]	; (8000598 <setMidiChannel+0x124>)
 800049c:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOA, CONFIG2_Pin))
 800049e:	2390      	movs	r3, #144	; 0x90
 80004a0:	05db      	lsls	r3, r3, #23
 80004a2:	2120      	movs	r1, #32
 80004a4:	0018      	movs	r0, r3
 80004a6:	f002 f83b 	bl	8002520 <HAL_GPIO_ReadPin>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d007      	beq.n	80004be <setMidiChannel+0x4a>
	{
	  bootconfig |= (1 << 1);
 80004ae:	4b3a      	ldr	r3, [pc, #232]	; (8000598 <setMidiChannel+0x124>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	2202      	movs	r2, #2
 80004b6:	4313      	orrs	r3, r2
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4b37      	ldr	r3, [pc, #220]	; (8000598 <setMidiChannel+0x124>)
 80004bc:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOA, CONFIG3_Pin))
 80004be:	2390      	movs	r3, #144	; 0x90
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	2140      	movs	r1, #64	; 0x40
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 f82b 	bl	8002520 <HAL_GPIO_ReadPin>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d007      	beq.n	80004de <setMidiChannel+0x6a>
	{
	  bootconfig |= (1 << 2);
 80004ce:	4b32      	ldr	r3, [pc, #200]	; (8000598 <setMidiChannel+0x124>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	2204      	movs	r2, #4
 80004d6:	4313      	orrs	r3, r2
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b2f      	ldr	r3, [pc, #188]	; (8000598 <setMidiChannel+0x124>)
 80004dc:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOA, CONFIG4_Pin))
 80004de:	2390      	movs	r3, #144	; 0x90
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	0018      	movs	r0, r3
 80004e6:	f002 f81b 	bl	8002520 <HAL_GPIO_ReadPin>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d007      	beq.n	80004fe <setMidiChannel+0x8a>
	{
	  bootconfig |= (1 << 3);
 80004ee:	4b2a      	ldr	r3, [pc, #168]	; (8000598 <setMidiChannel+0x124>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	2208      	movs	r2, #8
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	4b27      	ldr	r3, [pc, #156]	; (8000598 <setMidiChannel+0x124>)
 80004fc:	701a      	strb	r2, [r3, #0]
	}

	// set MIDI channel
	switch(bootconfig)
 80004fe:	4b26      	ldr	r3, [pc, #152]	; (8000598 <setMidiChannel+0x124>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	2b0f      	cmp	r3, #15
 8000506:	d844      	bhi.n	8000592 <setMidiChannel+0x11e>
 8000508:	009a      	lsls	r2, r3, #2
 800050a:	4b24      	ldr	r3, [pc, #144]	; (800059c <setMidiChannel+0x128>)
 800050c:	18d3      	adds	r3, r2, r3
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	469f      	mov	pc, r3
	{
		case 0:
			enabledNoteOnCmd = CH1_NOTE_ON;
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <setMidiChannel+0x12c>)
 8000514:	2290      	movs	r2, #144	; 0x90
 8000516:	601a      	str	r2, [r3, #0]
			break;
 8000518:	e03b      	b.n	8000592 <setMidiChannel+0x11e>
		case 1:
			enabledNoteOnCmd = CH2_NOTE_ON;
 800051a:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <setMidiChannel+0x12c>)
 800051c:	2291      	movs	r2, #145	; 0x91
 800051e:	601a      	str	r2, [r3, #0]
			break;
 8000520:	e037      	b.n	8000592 <setMidiChannel+0x11e>
		case 2:
			enabledNoteOnCmd = CH3_NOTE_ON;
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <setMidiChannel+0x12c>)
 8000524:	2292      	movs	r2, #146	; 0x92
 8000526:	601a      	str	r2, [r3, #0]
			break;
 8000528:	e033      	b.n	8000592 <setMidiChannel+0x11e>
		case 3:
			enabledNoteOnCmd = CH4_NOTE_ON;
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <setMidiChannel+0x12c>)
 800052c:	2293      	movs	r2, #147	; 0x93
 800052e:	601a      	str	r2, [r3, #0]
			break;
 8000530:	e02f      	b.n	8000592 <setMidiChannel+0x11e>
		case 4:
			enabledNoteOnCmd = CH5_NOTE_ON;
 8000532:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <setMidiChannel+0x12c>)
 8000534:	2294      	movs	r2, #148	; 0x94
 8000536:	601a      	str	r2, [r3, #0]
			break;
 8000538:	e02b      	b.n	8000592 <setMidiChannel+0x11e>
		case 5:
			enabledNoteOnCmd = CH6_NOTE_ON;
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <setMidiChannel+0x12c>)
 800053c:	2295      	movs	r2, #149	; 0x95
 800053e:	601a      	str	r2, [r3, #0]
			break;
 8000540:	e027      	b.n	8000592 <setMidiChannel+0x11e>
		case 6:
			enabledNoteOnCmd = CH7_NOTE_ON;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <setMidiChannel+0x12c>)
 8000544:	2296      	movs	r2, #150	; 0x96
 8000546:	601a      	str	r2, [r3, #0]
			break;
 8000548:	e023      	b.n	8000592 <setMidiChannel+0x11e>
		case 7:
			enabledNoteOnCmd = CH8_NOTE_ON;
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <setMidiChannel+0x12c>)
 800054c:	2297      	movs	r2, #151	; 0x97
 800054e:	601a      	str	r2, [r3, #0]
			break;
 8000550:	e01f      	b.n	8000592 <setMidiChannel+0x11e>
		case 8:
			enabledNoteOnCmd = CH9_NOTE_ON;
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <setMidiChannel+0x12c>)
 8000554:	2298      	movs	r2, #152	; 0x98
 8000556:	601a      	str	r2, [r3, #0]
			break;
 8000558:	e01b      	b.n	8000592 <setMidiChannel+0x11e>
		case 9:
			enabledNoteOnCmd = CH10_NOTE_ON;
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <setMidiChannel+0x12c>)
 800055c:	2299      	movs	r2, #153	; 0x99
 800055e:	601a      	str	r2, [r3, #0]
			break;
 8000560:	e017      	b.n	8000592 <setMidiChannel+0x11e>
		case 10:
			enabledNoteOnCmd = CH11_NOTE_ON;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <setMidiChannel+0x12c>)
 8000564:	229a      	movs	r2, #154	; 0x9a
 8000566:	601a      	str	r2, [r3, #0]
			break;
 8000568:	e013      	b.n	8000592 <setMidiChannel+0x11e>
		case 11:
			enabledNoteOnCmd = CH12_NOTE_ON;
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <setMidiChannel+0x12c>)
 800056c:	229b      	movs	r2, #155	; 0x9b
 800056e:	601a      	str	r2, [r3, #0]
			break;
 8000570:	e00f      	b.n	8000592 <setMidiChannel+0x11e>
		case 12:
			enabledNoteOnCmd = CH13_NOTE_ON;
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <setMidiChannel+0x12c>)
 8000574:	229c      	movs	r2, #156	; 0x9c
 8000576:	601a      	str	r2, [r3, #0]
			break;
 8000578:	e00b      	b.n	8000592 <setMidiChannel+0x11e>
		case 13:
			enabledNoteOnCmd = CH14_NOTE_ON;
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <setMidiChannel+0x12c>)
 800057c:	229d      	movs	r2, #157	; 0x9d
 800057e:	601a      	str	r2, [r3, #0]
			break;
 8000580:	e007      	b.n	8000592 <setMidiChannel+0x11e>
		case 14:
			enabledNoteOnCmd = CH15_NOTE_ON;
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <setMidiChannel+0x12c>)
 8000584:	229e      	movs	r2, #158	; 0x9e
 8000586:	601a      	str	r2, [r3, #0]
			break;
 8000588:	e003      	b.n	8000592 <setMidiChannel+0x11e>
		case 15:
			enabledNoteOnCmd = CH16_NOTE_ON;
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <setMidiChannel+0x12c>)
 800058c:	229f      	movs	r2, #159	; 0x9f
 800058e:	601a      	str	r2, [r3, #0]
			break;
 8000590:	46c0      	nop			; (mov r8, r8)

	}

}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200001c4 	.word	0x200001c4
 800059c:	0800468c 	.word	0x0800468c
 80005a0:	20000004 	.word	0x20000004

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 feea 	bl	8001380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f8b2 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f7ff ff22 	bl	80003f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b4:	f7ff ff02 	bl	80003bc <MX_DMA_Init>
  MX_TIM1_Init();
 80005b8:	f000 fa38 	bl	8000a2c <MX_TIM1_Init>
  MX_TIM3_Init();
 80005bc:	f000 fb68 	bl	8000c90 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005c0:	f000 fafe 	bl	8000bc0 <MX_TIM2_Init>
  MX_ADC_Init();
 80005c4:	f7ff fe2c 	bl	8000220 <MX_ADC_Init>
  MX_USART1_UART_Init();
 80005c8:	f000 fe2a 	bl	8001220 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80005cc:	f000 fbde 	bl	8000d8c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // discover boot config flags (set using onboard DIP4)
  setMidiChannel(bootconfig);
 80005d0:	4b46      	ldr	r3, [pc, #280]	; (80006ec <main+0x148>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ff4c 	bl	8000474 <setMidiChannel>

  // setup all output channel timer PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);		// #1
 80005dc:	4b44      	ldr	r3, [pc, #272]	; (80006f0 <main+0x14c>)
 80005de:	2100      	movs	r1, #0
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 fd61 	bl	80030a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);		// #2
 80005e6:	4b42      	ldr	r3, [pc, #264]	; (80006f0 <main+0x14c>)
 80005e8:	2104      	movs	r1, #4
 80005ea:	0018      	movs	r0, r3
 80005ec:	f002 fd5c 	bl	80030a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		// #3
 80005f0:	4b40      	ldr	r3, [pc, #256]	; (80006f4 <main+0x150>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	0018      	movs	r0, r3
 80005f6:	f002 fd57 	bl	80030a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);		// #4
 80005fa:	4b3e      	ldr	r3, [pc, #248]	; (80006f4 <main+0x150>)
 80005fc:	2104      	movs	r1, #4
 80005fe:	0018      	movs	r0, r3
 8000600:	f002 fd52 	bl	80030a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);		// #5
 8000604:	4b3b      	ldr	r3, [pc, #236]	; (80006f4 <main+0x150>)
 8000606:	2108      	movs	r1, #8
 8000608:	0018      	movs	r0, r3
 800060a:	f002 fd4d 	bl	80030a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);		// #6
 800060e:	4b39      	ldr	r3, [pc, #228]	; (80006f4 <main+0x150>)
 8000610:	210c      	movs	r1, #12
 8000612:	0018      	movs	r0, r3
 8000614:	f002 fd48 	bl	80030a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);		// #7
 8000618:	4b37      	ldr	r3, [pc, #220]	; (80006f8 <main+0x154>)
 800061a:	2100      	movs	r1, #0
 800061c:	0018      	movs	r0, r3
 800061e:	f002 fd43 	bl	80030a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);		// #8
 8000622:	4b35      	ldr	r3, [pc, #212]	; (80006f8 <main+0x154>)
 8000624:	2104      	movs	r1, #4
 8000626:	0018      	movs	r0, r3
 8000628:	f002 fd3e 	bl	80030a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// #9
 800062c:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <main+0x154>)
 800062e:	2108      	movs	r1, #8
 8000630:	0018      	movs	r0, r3
 8000632:	f002 fd39 	bl	80030a8 <HAL_TIM_PWM_Start>

  // Capture/Compare output enable
  TIM2->CCER |= TIM_CCER_CC1E;
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	6a1a      	ldr	r2, [r3, #32]
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	2101      	movs	r1, #1
 8000642:	430a      	orrs	r2, r1
 8000644:	621a      	str	r2, [r3, #32]
  TIM2->CCER |= TIM_CCER_CC2E;
 8000646:	2380      	movs	r3, #128	; 0x80
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	6a1a      	ldr	r2, [r3, #32]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	2110      	movs	r1, #16
 8000652:	430a      	orrs	r2, r1
 8000654:	621a      	str	r2, [r3, #32]

  TIM3->CCER |= TIM_CCER_CC1E;
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <main+0x158>)
 8000658:	6a1a      	ldr	r2, [r3, #32]
 800065a:	4b28      	ldr	r3, [pc, #160]	; (80006fc <main+0x158>)
 800065c:	2101      	movs	r1, #1
 800065e:	430a      	orrs	r2, r1
 8000660:	621a      	str	r2, [r3, #32]
  TIM3->CCER |= TIM_CCER_CC2E;
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <main+0x158>)
 8000664:	6a1a      	ldr	r2, [r3, #32]
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <main+0x158>)
 8000668:	2110      	movs	r1, #16
 800066a:	430a      	orrs	r2, r1
 800066c:	621a      	str	r2, [r3, #32]
  TIM3->CCER |= TIM_CCER_CC3E;
 800066e:	4b23      	ldr	r3, [pc, #140]	; (80006fc <main+0x158>)
 8000670:	6a1a      	ldr	r2, [r3, #32]
 8000672:	4b22      	ldr	r3, [pc, #136]	; (80006fc <main+0x158>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	0049      	lsls	r1, r1, #1
 8000678:	430a      	orrs	r2, r1
 800067a:	621a      	str	r2, [r3, #32]
  TIM3->CCER |= TIM_CCER_CC4E;
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <main+0x158>)
 800067e:	6a1a      	ldr	r2, [r3, #32]
 8000680:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <main+0x158>)
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	0149      	lsls	r1, r1, #5
 8000686:	430a      	orrs	r2, r1
 8000688:	621a      	str	r2, [r3, #32]

  TIM1->CCER |= TIM_CCER_CC1E;
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <main+0x15c>)
 800068c:	6a1a      	ldr	r2, [r3, #32]
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <main+0x15c>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	621a      	str	r2, [r3, #32]
  TIM1->CCER |= TIM_CCER_CC2E;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <main+0x15c>)
 8000698:	6a1a      	ldr	r2, [r3, #32]
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <main+0x15c>)
 800069c:	2110      	movs	r1, #16
 800069e:	430a      	orrs	r2, r1
 80006a0:	621a      	str	r2, [r3, #32]
  TIM1->CCER |= TIM_CCER_CC3E;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <main+0x15c>)
 80006a4:	6a1a      	ldr	r2, [r3, #32]
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <main+0x15c>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0049      	lsls	r1, r1, #1
 80006ac:	430a      	orrs	r2, r1
 80006ae:	621a      	str	r2, [r3, #32]

  // set the counter reset
  TIM1->ARR = pwm_arr;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <main+0x160>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <main+0x15c>)
 80006b6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->ARR = pwm_arr;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <main+0x160>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->ARR = pwm_arr;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <main+0x160>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <main+0x158>)
 80006c8:	62da      	str	r2, [r3, #44]	; 0x2c

  HAL_ADCEx_Calibration_Start(&hadc);
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <main+0x164>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 faa3 	bl	8001c18 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, adc_data_in, ADC_MAX_DATA_POINTS);
 80006d2:	490e      	ldr	r1, [pc, #56]	; (800070c <main+0x168>)
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <main+0x164>)
 80006d6:	2240      	movs	r2, #64	; 0x40
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 fff5 	bl	80016c8 <HAL_ADC_Start_DMA>

  // enable USART receive and interrupt
  USART1->CR1 |= USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <main+0x16c>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <main+0x16c>)
 80006e4:	2125      	movs	r1, #37	; 0x25
 80006e6:	430a      	orrs	r2, r1
 80006e8:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <main+0x146>
 80006ec:	200001c4 	.word	0x200001c4
 80006f0:	20000248 	.word	0x20000248
 80006f4:	200001c8 	.word	0x200001c8
 80006f8:	20000208 	.word	0x20000208
 80006fc:	40000400 	.word	0x40000400
 8000700:	40012c00 	.word	0x40012c00
 8000704:	20000000 	.word	0x20000000
 8000708:	20000084 	.word	0x20000084
 800070c:	200000c4 	.word	0x200000c4
 8000710:	40013800 	.word	0x40013800

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b097      	sub	sp, #92	; 0x5c
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	2428      	movs	r4, #40	; 0x28
 800071c:	193b      	adds	r3, r7, r4
 800071e:	0018      	movs	r0, r3
 8000720:	2330      	movs	r3, #48	; 0x30
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f003 ff8d 	bl	8004644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072a:	2318      	movs	r3, #24
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	0018      	movs	r0, r3
 8000730:	2310      	movs	r3, #16
 8000732:	001a      	movs	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	f003 ff85 	bl	8004644 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	0018      	movs	r0, r3
 800073e:	2314      	movs	r3, #20
 8000740:	001a      	movs	r2, r3
 8000742:	2100      	movs	r1, #0
 8000744:	f003 ff7e 	bl	8004644 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000748:	0021      	movs	r1, r4
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2212      	movs	r2, #18
 800074e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2201      	movs	r2, #1
 8000754:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2201      	movs	r2, #1
 800075a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2210      	movs	r2, #16
 8000760:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2210      	movs	r2, #16
 8000766:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	187b      	adds	r3, r7, r1
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fef3 	bl	800255c <HAL_RCC_OscConfig>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800077a:	f000 f828 	bl	80007ce <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	2118      	movs	r1, #24
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2207      	movs	r2, #7
 8000784:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2100      	movs	r1, #0
 800079c:	0018      	movs	r0, r3
 800079e:	f002 f9f9 	bl	8002b94 <HAL_RCC_ClockConfig>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007a6:	f000 f812 	bl	80007ce <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2201      	movs	r2, #1
 80007ae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	0018      	movs	r0, r3
 80007ba:	f002 fb1d 	bl	8002df8 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007c2:	f000 f804 	bl	80007ce <Error_Handler>
  }
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b017      	add	sp, #92	; 0x5c
 80007cc:	bd90      	pop	{r4, r7, pc}

080007ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_MspInit+0x44>)
 80007e0:	699a      	ldr	r2, [r3, #24]
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_MspInit+0x44>)
 80007e4:	2101      	movs	r1, #1
 80007e6:	430a      	orrs	r2, r1
 80007e8:	619a      	str	r2, [r3, #24]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <HAL_MspInit+0x44>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4013      	ands	r3, r2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_MspInit+0x44>)
 80007f8:	69da      	ldr	r2, [r3, #28]
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_MspInit+0x44>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0549      	lsls	r1, r1, #21
 8000800:	430a      	orrs	r2, r1
 8000802:	61da      	str	r2, [r3, #28]
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_MspInit+0x44>)
 8000806:	69da      	ldr	r2, [r3, #28]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	055b      	lsls	r3, r3, #21
 800080c:	4013      	ands	r3, r2
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40021000 	.word	0x40021000

08000820 <pwm_switch_on>:
extern TIM_HandleTypeDef htim16;
/* USER CODE BEGIN EV */


void pwm_switch_on()
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0

	// prevent TIM16 (the output channel reset timer) from premature fire
	TIM16->SR |= TIM_SR_UIF;
 8000826:	4b43      	ldr	r3, [pc, #268]	; (8000934 <pwm_switch_on+0x114>)
 8000828:	691a      	ldr	r2, [r3, #16]
 800082a:	4b42      	ldr	r3, [pc, #264]	; (8000934 <pwm_switch_on+0x114>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	611a      	str	r2, [r3, #16]

	if ((USART1->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
 8000832:	4b41      	ldr	r3, [pc, #260]	; (8000938 <pwm_switch_on+0x118>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	2220      	movs	r2, #32
 8000838:	4013      	ands	r3, r2
 800083a:	2b20      	cmp	r3, #32
 800083c:	d000      	beq.n	8000840 <pwm_switch_on+0x20>
 800083e:	e075      	b.n	800092c <pwm_switch_on+0x10c>
	{
		newMidiByte = (uint8_t)(USART1->RDR); 	// grab first MIDI byte from USART
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <pwm_switch_on+0x118>)
 8000842:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000844:	b29b      	uxth	r3, r3
 8000846:	b2db      	uxtb	r3, r3
 8000848:	001a      	movs	r2, r3
 800084a:	4b3c      	ldr	r3, [pc, #240]	; (800093c <pwm_switch_on+0x11c>)
 800084c:	601a      	str	r2, [r3, #0]

		if(newMidiByte > MIDI_MAX_NOTE) 		// catch initial MIDI command e.g. Note On
 800084e:	4b3b      	ldr	r3, [pc, #236]	; (800093c <pwm_switch_on+0x11c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b7f      	cmp	r3, #127	; 0x7f
 8000854:	dd0d      	ble.n	8000872 <pwm_switch_on+0x52>
		{
			if(newMidiByte == enabledNoteOnCmd)
 8000856:	4b39      	ldr	r3, [pc, #228]	; (800093c <pwm_switch_on+0x11c>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4b39      	ldr	r3, [pc, #228]	; (8000940 <pwm_switch_on+0x120>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d164      	bne.n	800092c <pwm_switch_on+0x10c>
			{
				lastMidiCmd = enabledNoteOnCmd;		// remember note on cmd for next iteration
 8000862:	4b37      	ldr	r3, [pc, #220]	; (8000940 <pwm_switch_on+0x120>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b37      	ldr	r3, [pc, #220]	; (8000944 <pwm_switch_on+0x124>)
 8000868:	601a      	str	r2, [r3, #0]
													// to support MIDI "Running Status"
				runningStatus = 0;
 800086a:	4b37      	ldr	r3, [pc, #220]	; (8000948 <pwm_switch_on+0x128>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim16);
			}
		}
	}

}
 8000870:	e05c      	b.n	800092c <pwm_switch_on+0x10c>
			if(lastMidiCmd == enabledNoteOnCmd)
 8000872:	4b34      	ldr	r3, [pc, #208]	; (8000944 <pwm_switch_on+0x124>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b32      	ldr	r3, [pc, #200]	; (8000940 <pwm_switch_on+0x120>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	429a      	cmp	r2, r3
 800087c:	d156      	bne.n	800092c <pwm_switch_on+0x10c>
				for(int m=0; m < 2; m++)			// grab second and third MIDI byte from USART
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	e012      	b.n	80008aa <pwm_switch_on+0x8a>
					while((USART1->ISR & USART_ISR_RXNE) != USART_ISR_RXNE){  }
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <pwm_switch_on+0x118>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	2220      	movs	r2, #32
 800088c:	4013      	ands	r3, r2
 800088e:	2b20      	cmp	r3, #32
 8000890:	d1f9      	bne.n	8000886 <pwm_switch_on+0x66>
					midiData[m] = (uint8_t)(USART1->RDR);
 8000892:	4b29      	ldr	r3, [pc, #164]	; (8000938 <pwm_switch_on+0x118>)
 8000894:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000896:	b29b      	uxth	r3, r3
 8000898:	b2d9      	uxtb	r1, r3
 800089a:	4a2c      	ldr	r2, [pc, #176]	; (800094c <pwm_switch_on+0x12c>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	18d3      	adds	r3, r2, r3
 80008a0:	1c0a      	adds	r2, r1, #0
 80008a2:	701a      	strb	r2, [r3, #0]
				for(int m=0; m < 2; m++)			// grab second and third MIDI byte from USART
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3301      	adds	r3, #1
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	dde9      	ble.n	8000884 <pwm_switch_on+0x64>
				uint32_t rootpwm = 32;		// hardcoded (missing pot)
 80008b0:	2320      	movs	r3, #32
 80008b2:	603b      	str	r3, [r7, #0]
				if(rootpwm == 0) { rootpwm = 1; }
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d101      	bne.n	80008be <pwm_switch_on+0x9e>
 80008ba:	2301      	movs	r3, #1
 80008bc:	603b      	str	r3, [r7, #0]
				switch(newMidiByte)					// switch on out chan for the MIDI note
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <pwm_switch_on+0x11c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b24      	subs	r3, #36	; 0x24
 80008c4:	2b08      	cmp	r3, #8
 80008c6:	d82a      	bhi.n	800091e <pwm_switch_on+0xfe>
 80008c8:	009a      	lsls	r2, r3, #2
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <pwm_switch_on+0x130>)
 80008cc:	18d3      	adds	r3, r2, r3
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	469f      	mov	pc, r3
						TIM2->CCR1 = rootpwm;
 80008d2:	2380      	movs	r3, #128	; 0x80
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
						break;
 80008da:	e020      	b.n	800091e <pwm_switch_on+0xfe>
						TIM2->CCR2 = rootpwm;
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	639a      	str	r2, [r3, #56]	; 0x38
						break;
 80008e4:	e01b      	b.n	800091e <pwm_switch_on+0xfe>
						TIM3->CCR1 = rootpwm;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <pwm_switch_on+0x134>)
 80008e8:	683a      	ldr	r2, [r7, #0]
 80008ea:	635a      	str	r2, [r3, #52]	; 0x34
						break;
 80008ec:	e017      	b.n	800091e <pwm_switch_on+0xfe>
						TIM3->CCR2 = rootpwm;
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <pwm_switch_on+0x134>)
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	639a      	str	r2, [r3, #56]	; 0x38
						break;
 80008f4:	e013      	b.n	800091e <pwm_switch_on+0xfe>
						TIM3->CCR3 = rootpwm;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <pwm_switch_on+0x134>)
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	63da      	str	r2, [r3, #60]	; 0x3c
						break;
 80008fc:	e00f      	b.n	800091e <pwm_switch_on+0xfe>
						TIM3->CCR4 = rootpwm;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <pwm_switch_on+0x134>)
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	641a      	str	r2, [r3, #64]	; 0x40
						break;
 8000904:	e00b      	b.n	800091e <pwm_switch_on+0xfe>
						TIM1->CCR1 = rootpwm;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <pwm_switch_on+0x138>)
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	635a      	str	r2, [r3, #52]	; 0x34
						break;
 800090c:	e007      	b.n	800091e <pwm_switch_on+0xfe>
						TIM1->CCR2 = rootpwm;
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <pwm_switch_on+0x138>)
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	639a      	str	r2, [r3, #56]	; 0x38
						break;
 8000914:	e003      	b.n	800091e <pwm_switch_on+0xfe>
						TIM1->CCR3 = rootpwm;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <pwm_switch_on+0x138>)
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	63da      	str	r2, [r3, #60]	; 0x3c
						break;
 800091c:	46c0      	nop			; (mov r8, r8)
				runningStatus = 1;
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <pwm_switch_on+0x128>)
 8000920:	2201      	movs	r2, #1
 8000922:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim16);
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <pwm_switch_on+0x13c>)
 8000926:	0018      	movs	r0, r3
 8000928:	f002 fb70 	bl	800300c <HAL_TIM_Base_Start_IT>
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b002      	add	sp, #8
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40014400 	.word	0x40014400
 8000938:	40013800 	.word	0x40013800
 800093c:	20000030 	.word	0x20000030
 8000940:	20000004 	.word	0x20000004
 8000944:	20000034 	.word	0x20000034
 8000948:	20000038 	.word	0x20000038
 800094c:	2000003c 	.word	0x2000003c
 8000950:	080046cc 	.word	0x080046cc
 8000954:	40000400 	.word	0x40000400
 8000958:	40012c00 	.word	0x40012c00
 800095c:	20000288 	.word	0x20000288

08000960 <pwm_switch_off>:


void pwm_switch_off()
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	  TIM2->CCR1 = 0;
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	2200      	movs	r2, #0
 800096a:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 = 0;
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	2200      	movs	r2, #0
 8000972:	639a      	str	r2, [r3, #56]	; 0x38

	  TIM3->CCR1 = 0;
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <pwm_switch_off+0x44>)
 8000976:	2200      	movs	r2, #0
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR2 = 0;
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <pwm_switch_off+0x44>)
 800097c:	2200      	movs	r2, #0
 800097e:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR3 = 0;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <pwm_switch_off+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR4 = 0;
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <pwm_switch_off+0x44>)
 8000988:	2200      	movs	r2, #0
 800098a:	641a      	str	r2, [r3, #64]	; 0x40

	  TIM1->CCR1 = 0;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <pwm_switch_off+0x48>)
 800098e:	2200      	movs	r2, #0
 8000990:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR2 = 0;
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <pwm_switch_off+0x48>)
 8000994:	2200      	movs	r2, #0
 8000996:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM1->CCR3 = 0;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <pwm_switch_off+0x48>)
 800099a:	2200      	movs	r2, #0
 800099c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40000400 	.word	0x40000400
 80009a8:	40012c00 	.word	0x40012c00

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 fd1c 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <DMA1_Channel1_IRQHandler+0x14>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f001 fb40 	bl	800206c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000040 	.word	0x20000040

080009f8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	pwm_switch_off();
 80009fc:	f7ff ffb0 	bl	8000960 <pwm_switch_off>
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <TIM16_IRQHandler+0x18>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f002 fbe1 	bl	80031ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	20000288 	.word	0x20000288

08000a14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	pwm_switch_on();
 8000a18:	f7ff ff02 	bl	8000820 <pwm_switch_on>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b096      	sub	sp, #88	; 0x58
 8000a30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	2348      	movs	r3, #72	; 0x48
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	2310      	movs	r3, #16
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f003 fe01 	bl	8004644 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	2340      	movs	r3, #64	; 0x40
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	0018      	movs	r0, r3
 8000a48:	2308      	movs	r3, #8
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f003 fdf9 	bl	8004644 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a52:	2324      	movs	r3, #36	; 0x24
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	0018      	movs	r0, r3
 8000a58:	231c      	movs	r3, #28
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f003 fdf1 	bl	8004644 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	0018      	movs	r0, r3
 8000a66:	2320      	movs	r3, #32
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f003 fdea 	bl	8004644 <memset>

  htim1.Instance = TIM1;
 8000a70:	4b51      	ldr	r3, [pc, #324]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000a72:	4a52      	ldr	r2, [pc, #328]	; (8000bbc <MX_TIM1_Init+0x190>)
 8000a74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000a76:	4b50      	ldr	r3, [pc, #320]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b4e      	ldr	r3, [pc, #312]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000a82:	4b4d      	ldr	r3, [pc, #308]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000a84:	22ff      	movs	r2, #255	; 0xff
 8000a86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b4b      	ldr	r3, [pc, #300]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a8e:	4b4a      	ldr	r3, [pc, #296]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b48      	ldr	r3, [pc, #288]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a9a:	4b47      	ldr	r3, [pc, #284]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f002 fa89 	bl	8002fb4 <HAL_TIM_Base_Init>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000aa6:	f7ff fe92 	bl	80007ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aaa:	2148      	movs	r1, #72	; 0x48
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	0152      	lsls	r2, r2, #5
 8000ab2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ab4:	187a      	adds	r2, r7, r1
 8000ab6:	4b40      	ldr	r3, [pc, #256]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f002 fd54 	bl	8003568 <HAL_TIM_ConfigClockSource>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000ac4:	f7ff fe83 	bl	80007ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ac8:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f002 fac0 	bl	8003050 <HAL_TIM_PWM_Init>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000ad4:	f7ff fe7b 	bl	80007ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ae6:	187a      	adds	r2, r7, r1
 8000ae8:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f003 f95b 	bl	8003da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000af6:	f7ff fe6a 	bl	80007ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afa:	2124      	movs	r1, #36	; 0x24
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2260      	movs	r2, #96	; 0x60
 8000b00:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b26:	1879      	adds	r1, r7, r1
 8000b28:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f002 fc63 	bl	80033f8 <HAL_TIM_PWM_ConfigChannel>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000b36:	f7ff fe4a 	bl	80007ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b3a:	2324      	movs	r3, #36	; 0x24
 8000b3c:	18f9      	adds	r1, r7, r3
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000b40:	2204      	movs	r2, #4
 8000b42:	0018      	movs	r0, r3
 8000b44:	f002 fc58 	bl	80033f8 <HAL_TIM_PWM_ConfigChannel>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000b4c:	f7ff fe3f 	bl	80007ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b50:	2324      	movs	r3, #36	; 0x24
 8000b52:	18f9      	adds	r1, r7, r3
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000b56:	2208      	movs	r2, #8
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f002 fc4d 	bl	80033f8 <HAL_TIM_PWM_ConfigChannel>
 8000b5e:	1e03      	subs	r3, r0, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000b62:	f7ff fe34 	bl	80007ce <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	0192      	lsls	r2, r2, #6
 8000b8a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b92:	1d3a      	adds	r2, r7, #4
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000b96:	0011      	movs	r1, r2
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f003 f963 	bl	8003e64 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000ba2:	f7ff fe14 	bl	80007ce <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <MX_TIM1_Init+0x18c>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 f98f 	bl	8000ecc <HAL_TIM_MspPostInit>

}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b016      	add	sp, #88	; 0x58
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	20000208 	.word	0x20000208
 8000bbc:	40012c00 	.word	0x40012c00

08000bc0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc6:	2320      	movs	r3, #32
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	0018      	movs	r0, r3
 8000bcc:	2308      	movs	r3, #8
 8000bce:	001a      	movs	r2, r3
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	f003 fd37 	bl	8004644 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	0018      	movs	r0, r3
 8000bda:	231c      	movs	r3, #28
 8000bdc:	001a      	movs	r2, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	f003 fd30 	bl	8004644 <memset>

  htim2.Instance = TIM2;
 8000be4:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_TIM2_Init+0xcc>)
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	05d2      	lsls	r2, r2, #23
 8000bea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_TIM2_Init+0xcc>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_TIM2_Init+0xcc>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_TIM2_Init+0xcc>)
 8000bfa:	2240      	movs	r2, #64	; 0x40
 8000bfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfe:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <MX_TIM2_Init+0xcc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_TIM2_Init+0xcc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <MX_TIM2_Init+0xcc>)
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f002 fa1f 	bl	8003050 <HAL_TIM_PWM_Init>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c16:	f7ff fdda 	bl	80007ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c28:	187a      	adds	r2, r7, r1
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_TIM2_Init+0xcc>)
 8000c2c:	0011      	movs	r1, r2
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f003 f8ba 	bl	8003da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	1e03      	subs	r3, r0, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000c38:	f7ff fdc9 	bl	80007ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2260      	movs	r2, #96	; 0x60
 8000c40:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c54:	1d39      	adds	r1, r7, #4
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <MX_TIM2_Init+0xcc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f002 fbcc 	bl	80033f8 <HAL_TIM_PWM_ConfigChannel>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000c64:	f7ff fdb3 	bl	80007ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c68:	1d39      	adds	r1, r7, #4
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_TIM2_Init+0xcc>)
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f002 fbc2 	bl	80033f8 <HAL_TIM_PWM_ConfigChannel>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000c78:	f7ff fda9 	bl	80007ce <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <MX_TIM2_Init+0xcc>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f924 	bl	8000ecc <HAL_TIM_MspPostInit>

}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b00a      	add	sp, #40	; 0x28
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000248 	.word	0x20000248

08000c90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c96:	2320      	movs	r3, #32
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f003 fccf 	bl	8004644 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	0018      	movs	r0, r3
 8000caa:	231c      	movs	r3, #28
 8000cac:	001a      	movs	r2, r3
 8000cae:	2100      	movs	r1, #0
 8000cb0:	f003 fcc8 	bl	8004644 <memset>

  htim3.Instance = TIM3;
 8000cb4:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <MX_TIM3_Init+0xf4>)
 8000cb6:	4a34      	ldr	r2, [pc, #208]	; (8000d88 <MX_TIM3_Init+0xf8>)
 8000cb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000cba:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <MX_TIM3_Init+0xf4>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <MX_TIM3_Init+0xf4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <MX_TIM3_Init+0xf4>)
 8000cc8:	22ff      	movs	r2, #255	; 0xff
 8000cca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <MX_TIM3_Init+0xf4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <MX_TIM3_Init+0xf4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <MX_TIM3_Init+0xf4>)
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f002 f9b8 	bl	8003050 <HAL_TIM_PWM_Init>
 8000ce0:	1e03      	subs	r3, r0, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ce4:	f7ff fd73 	bl	80007ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce8:	2120      	movs	r1, #32
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cf6:	187a      	adds	r2, r7, r1
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_TIM3_Init+0xf4>)
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f003 f853 	bl	8003da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000d06:	f7ff fd62 	bl	80007ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2260      	movs	r2, #96	; 0x60
 8000d0e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d22:	1d39      	adds	r1, r7, #4
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_TIM3_Init+0xf4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f002 fb65 	bl	80033f8 <HAL_TIM_PWM_ConfigChannel>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000d32:	f7ff fd4c 	bl	80007ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d36:	1d39      	adds	r1, r7, #4
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_TIM3_Init+0xf4>)
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f002 fb5b 	bl	80033f8 <HAL_TIM_PWM_ConfigChannel>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000d46:	f7ff fd42 	bl	80007ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d4a:	1d39      	adds	r1, r7, #4
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <MX_TIM3_Init+0xf4>)
 8000d4e:	2208      	movs	r2, #8
 8000d50:	0018      	movs	r0, r3
 8000d52:	f002 fb51 	bl	80033f8 <HAL_TIM_PWM_ConfigChannel>
 8000d56:	1e03      	subs	r3, r0, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8000d5a:	f7ff fd38 	bl	80007ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d5e:	1d39      	adds	r1, r7, #4
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_TIM3_Init+0xf4>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	0018      	movs	r0, r3
 8000d66:	f002 fb47 	bl	80033f8 <HAL_TIM_PWM_ConfigChannel>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8000d6e:	f7ff fd2e 	bl	80007ce <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <MX_TIM3_Init+0xf4>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f000 f8a9 	bl	8000ecc <HAL_TIM_MspPostInit>

}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b00a      	add	sp, #40	; 0x28
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	200001c8 	.word	0x200001c8
 8000d88:	40000400 	.word	0x40000400

08000d8c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_TIM16_Init+0x58>)
 8000d92:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <MX_TIM16_Init+0x5c>)
 8000d94:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_TIM16_Init+0x58>)
 8000d98:	2240      	movs	r2, #64	; 0x40
 8000d9a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_TIM16_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_TIM16_Init+0x58>)
 8000da4:	4a11      	ldr	r2, [pc, #68]	; (8000dec <MX_TIM16_Init+0x60>)
 8000da6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_TIM16_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <MX_TIM16_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_TIM16_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_TIM16_Init+0x58>)
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f002 f8f9 	bl	8002fb4 <HAL_TIM_Base_Init>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000dc6:	f7ff fd02 	bl	80007ce <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_TIM16_Init+0x58>)
 8000dcc:	2108      	movs	r1, #8
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f002 f9b6 	bl	8003140 <HAL_TIM_OnePulse_Init>
 8000dd4:	1e03      	subs	r3, r0, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM16_Init+0x50>
  {
    Error_Handler();
 8000dd8:	f7ff fcf9 	bl	80007ce <Error_Handler>
  }

}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	20000288 	.word	0x20000288
 8000de8:	40014400 	.word	0x40014400
 8000dec:	0000ffff 	.word	0x0000ffff

08000df0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <HAL_TIM_Base_MspInit+0x70>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d10e      	bne.n	8000e20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_TIM_Base_MspInit+0x74>)
 8000e04:	699a      	ldr	r2, [r3, #24]
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_TIM_Base_MspInit+0x74>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	0109      	lsls	r1, r1, #4
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	619a      	str	r2, [r3, #24]
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_TIM_Base_MspInit+0x74>)
 8000e12:	699a      	ldr	r2, [r3, #24]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000e1e:	e01a      	b.n	8000e56 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM16)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_TIM_Base_MspInit+0x78>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d115      	bne.n	8000e56 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_TIM_Base_MspInit+0x74>)
 8000e2c:	699a      	ldr	r2, [r3, #24]
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_TIM_Base_MspInit+0x74>)
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	0289      	lsls	r1, r1, #10
 8000e34:	430a      	orrs	r2, r1
 8000e36:	619a      	str	r2, [r3, #24]
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_TIM_Base_MspInit+0x74>)
 8000e3a:	699a      	ldr	r2, [r3, #24]
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	029b      	lsls	r3, r3, #10
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2015      	movs	r0, #21
 8000e4c:	f001 f82e 	bl	8001eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000e50:	2015      	movs	r0, #21
 8000e52:	f001 f840 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b004      	add	sp, #16
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	40012c00 	.word	0x40012c00
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40014400 	.word	0x40014400

08000e6c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	05db      	lsls	r3, r3, #23
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d10c      	bne.n	8000e9a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x58>)
 8000e82:	69da      	ldr	r2, [r3, #28]
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x58>)
 8000e86:	2101      	movs	r1, #1
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	61da      	str	r2, [r3, #28]
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x58>)
 8000e8e:	69db      	ldr	r3, [r3, #28]
 8000e90:	2201      	movs	r2, #1
 8000e92:	4013      	ands	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e98:	e010      	b.n	8000ebc <HAL_TIM_PWM_MspInit+0x50>
  else if(tim_pwmHandle->Instance==TIM3)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d10b      	bne.n	8000ebc <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x58>)
 8000ea6:	69da      	ldr	r2, [r3, #28]
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x58>)
 8000eaa:	2102      	movs	r1, #2
 8000eac:	430a      	orrs	r2, r1
 8000eae:	61da      	str	r2, [r3, #28]
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x58>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b004      	add	sp, #16
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40000400 	.word	0x40000400

08000ecc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b08d      	sub	sp, #52	; 0x34
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	231c      	movs	r3, #28
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	0018      	movs	r0, r3
 8000eda:	2314      	movs	r3, #20
 8000edc:	001a      	movs	r2, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f003 fbb0 	bl	8004644 <memset>
  if(timHandle->Instance==TIM1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a54      	ldr	r2, [pc, #336]	; (800103c <HAL_TIM_MspPostInit+0x170>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d126      	bne.n	8000f3c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b54      	ldr	r3, [pc, #336]	; (8001040 <HAL_TIM_MspPostInit+0x174>)
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	4b53      	ldr	r3, [pc, #332]	; (8001040 <HAL_TIM_MspPostInit+0x174>)
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	0289      	lsls	r1, r1, #10
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	615a      	str	r2, [r3, #20]
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <HAL_TIM_MspPostInit+0x174>)
 8000efe:	695a      	ldr	r2, [r3, #20]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	029b      	lsls	r3, r3, #10
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f0a:	211c      	movs	r1, #28
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	22e0      	movs	r2, #224	; 0xe0
 8000f10:	00d2      	lsls	r2, r2, #3
 8000f12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2202      	movs	r2, #2
 8000f18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2202      	movs	r2, #2
 8000f2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	187a      	adds	r2, r7, r1
 8000f2e:	2390      	movs	r3, #144	; 0x90
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f001 f983 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f3a:	e07a      	b.n	8001032 <HAL_TIM_MspPostInit+0x166>
  else if(timHandle->Instance==TIM2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	05db      	lsls	r3, r3, #23
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d14b      	bne.n	8000fe0 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <HAL_TIM_MspPostInit+0x174>)
 8000f4a:	695a      	ldr	r2, [r3, #20]
 8000f4c:	4b3c      	ldr	r3, [pc, #240]	; (8001040 <HAL_TIM_MspPostInit+0x174>)
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	0289      	lsls	r1, r1, #10
 8000f52:	430a      	orrs	r2, r1
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <HAL_TIM_MspPostInit+0x174>)
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	029b      	lsls	r3, r3, #10
 8000f5e:	4013      	ands	r3, r2
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	4b36      	ldr	r3, [pc, #216]	; (8001040 <HAL_TIM_MspPostInit+0x174>)
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	4b35      	ldr	r3, [pc, #212]	; (8001040 <HAL_TIM_MspPostInit+0x174>)
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	02c9      	lsls	r1, r1, #11
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	615a      	str	r2, [r3, #20]
 8000f72:	4b33      	ldr	r3, [pc, #204]	; (8001040 <HAL_TIM_MspPostInit+0x174>)
 8000f74:	695a      	ldr	r2, [r3, #20]
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	02db      	lsls	r3, r3, #11
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f80:	211c      	movs	r1, #28
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	0212      	lsls	r2, r2, #8
 8000f88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	000c      	movs	r4, r1
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2202      	movs	r2, #2
 8000f90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	193a      	adds	r2, r7, r4
 8000fa6:	2390      	movs	r3, #144	; 0x90
 8000fa8:	05db      	lsls	r3, r3, #23
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 f947 	bl	8002240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fb2:	0021      	movs	r1, r4
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2202      	movs	r2, #2
 8000fd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	; (8001044 <HAL_TIM_MspPostInit+0x178>)
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	0010      	movs	r0, r2
 8000fda:	f001 f931 	bl	8002240 <HAL_GPIO_Init>
}
 8000fde:	e028      	b.n	8001032 <HAL_TIM_MspPostInit+0x166>
  else if(timHandle->Instance==TIM3)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a18      	ldr	r2, [pc, #96]	; (8001048 <HAL_TIM_MspPostInit+0x17c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d123      	bne.n	8001032 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_TIM_MspPostInit+0x174>)
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_TIM_MspPostInit+0x174>)
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	02c9      	lsls	r1, r1, #11
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	615a      	str	r2, [r3, #20]
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_TIM_MspPostInit+0x174>)
 8000ffa:	695a      	ldr	r2, [r3, #20]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	02db      	lsls	r3, r3, #11
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001006:	211c      	movs	r1, #28
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2233      	movs	r2, #51	; 0x33
 800100c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2202      	movs	r2, #2
 8001012:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2201      	movs	r2, #1
 8001024:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	187b      	adds	r3, r7, r1
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_TIM_MspPostInit+0x178>)
 800102a:	0019      	movs	r1, r3
 800102c:	0010      	movs	r0, r2
 800102e:	f001 f907 	bl	8002240 <HAL_GPIO_Init>
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b00d      	add	sp, #52	; 0x34
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	40012c00 	.word	0x40012c00
 8001040:	40021000 	.word	0x40021000
 8001044:	48000400 	.word	0x48000400
 8001048:	40000400 	.word	0x40000400

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	0002      	movs	r2, r0
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b7f      	cmp	r3, #127	; 0x7f
 800105e:	d809      	bhi.n	8001074 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001060:	1dfb      	adds	r3, r7, #7
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	001a      	movs	r2, r3
 8001066:	231f      	movs	r3, #31
 8001068:	401a      	ands	r2, r3
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_EnableIRQ+0x30>)
 800106c:	2101      	movs	r1, #1
 800106e:	4091      	lsls	r1, r2
 8001070:	000a      	movs	r2, r1
 8001072:	601a      	str	r2, [r3, #0]
  }
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}
 800107c:	e000e100 	.word	0xe000e100

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	0002      	movs	r2, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b7f      	cmp	r3, #127	; 0x7f
 8001094:	d828      	bhi.n	80010e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001096:	4a2f      	ldr	r2, [pc, #188]	; (8001154 <__NVIC_SetPriority+0xd4>)
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b25b      	sxtb	r3, r3
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	33c0      	adds	r3, #192	; 0xc0
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	589b      	ldr	r3, [r3, r2]
 80010a6:	1dfa      	adds	r2, r7, #7
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	0011      	movs	r1, r2
 80010ac:	2203      	movs	r2, #3
 80010ae:	400a      	ands	r2, r1
 80010b0:	00d2      	lsls	r2, r2, #3
 80010b2:	21ff      	movs	r1, #255	; 0xff
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	43d2      	mvns	r2, r2
 80010ba:	401a      	ands	r2, r3
 80010bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	019b      	lsls	r3, r3, #6
 80010c2:	22ff      	movs	r2, #255	; 0xff
 80010c4:	401a      	ands	r2, r3
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	0018      	movs	r0, r3
 80010cc:	2303      	movs	r3, #3
 80010ce:	4003      	ands	r3, r0
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d4:	481f      	ldr	r0, [pc, #124]	; (8001154 <__NVIC_SetPriority+0xd4>)
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	430a      	orrs	r2, r1
 80010e0:	33c0      	adds	r3, #192	; 0xc0
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010e6:	e031      	b.n	800114c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <__NVIC_SetPriority+0xd8>)
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	0019      	movs	r1, r3
 80010f0:	230f      	movs	r3, #15
 80010f2:	400b      	ands	r3, r1
 80010f4:	3b08      	subs	r3, #8
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3306      	adds	r3, #6
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	3304      	adds	r3, #4
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1dfa      	adds	r2, r7, #7
 8001104:	7812      	ldrb	r2, [r2, #0]
 8001106:	0011      	movs	r1, r2
 8001108:	2203      	movs	r2, #3
 800110a:	400a      	ands	r2, r1
 800110c:	00d2      	lsls	r2, r2, #3
 800110e:	21ff      	movs	r1, #255	; 0xff
 8001110:	4091      	lsls	r1, r2
 8001112:	000a      	movs	r2, r1
 8001114:	43d2      	mvns	r2, r2
 8001116:	401a      	ands	r2, r3
 8001118:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	019b      	lsls	r3, r3, #6
 800111e:	22ff      	movs	r2, #255	; 0xff
 8001120:	401a      	ands	r2, r3
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	0018      	movs	r0, r3
 8001128:	2303      	movs	r3, #3
 800112a:	4003      	ands	r3, r0
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001130:	4809      	ldr	r0, [pc, #36]	; (8001158 <__NVIC_SetPriority+0xd8>)
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	001c      	movs	r4, r3
 8001138:	230f      	movs	r3, #15
 800113a:	4023      	ands	r3, r4
 800113c:	3b08      	subs	r3, #8
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	430a      	orrs	r2, r1
 8001142:	3306      	adds	r3, #6
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	18c3      	adds	r3, r0, r3
 8001148:	3304      	adds	r3, #4
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b003      	add	sp, #12
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2201      	movs	r2, #1
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	601a      	str	r2, [r3, #0]
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}

08001178 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN feature is supported), CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported) and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <LL_USART_ConfigAsyncMode+0x2c>)
 8001186:	401a      	ands	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
#endif /* USART_LIN_SUPPORT */
#if defined(USART_SMARTCARD_SUPPORT)
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	222a      	movs	r2, #42	; 0x2a
 8001192:	4393      	bics	r3, r2
 8001194:	001a      	movs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	ffffb7ff 	.word	0xffffb7ff

080011a8 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	4a03      	ldr	r2, [pc, #12]	; (80011c4 <LL_USART_DisableIT_CTS+0x1c>)
 80011b6:	401a      	ands	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	609a      	str	r2, [r3, #8]
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b002      	add	sp, #8
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	fffffbff 	.word	0xfffffbff

080011c8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80011d2:	6959      	ldr	r1, [r3, #20]
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	430a      	orrs	r2, r1
 80011da:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4013      	ands	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b004      	add	sp, #16
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000

080011f4 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <LL_APB1_GRP2_EnableClock+0x28>)
 80011fe:	6999      	ldr	r1, [r3, #24]
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <LL_APB1_GRP2_EnableClock+0x28>)
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	430a      	orrs	r2, r1
 8001206:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <LL_APB1_GRP2_EnableClock+0x28>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4013      	ands	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b004      	add	sp, #16
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40021000 	.word	0x40021000

08001220 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b08f      	sub	sp, #60	; 0x3c
 8001224:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001226:	241c      	movs	r4, #28
 8001228:	193b      	adds	r3, r7, r4
 800122a:	0018      	movs	r0, r3
 800122c:	231c      	movs	r3, #28
 800122e:	001a      	movs	r2, r3
 8001230:	2100      	movs	r1, #0
 8001232:	f003 fa07 	bl	8004644 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	0018      	movs	r0, r3
 800123a:	2318      	movs	r3, #24
 800123c:	001a      	movs	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	f003 fa00 	bl	8004644 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	01db      	lsls	r3, r3, #7
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff ffd3 	bl	80011f4 <LL_APB1_GRP2_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	02db      	lsls	r3, r3, #11
 8001252:	0018      	movs	r0, r3
 8001254:	f7ff ffb8 	bl	80011c8 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration  
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2202      	movs	r2, #2
 8001262:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2203      	movs	r2, #3
 8001268:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4a28      	ldr	r2, [pc, #160]	; (8001320 <MX_USART1_UART_Init+0x100>)
 8001280:	0019      	movs	r1, r3
 8001282:	0010      	movs	r0, r2
 8001284:	f002 ff1a 	bl	80040bc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2202      	movs	r2, #2
 8001292:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2203      	movs	r2, #3
 8001298:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <MX_USART1_UART_Init+0x100>)
 80012b0:	0019      	movs	r1, r3
 80012b2:	0010      	movs	r0, r2
 80012b4:	f002 ff02 	bl	80040bc <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 80012b8:	2100      	movs	r1, #0
 80012ba:	201b      	movs	r0, #27
 80012bc:	f7ff fee0 	bl	8001080 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80012c0:	201b      	movs	r0, #27
 80012c2:	f7ff fec3 	bl	800104c <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 31250;
 80012c6:	0021      	movs	r1, r4
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	4a16      	ldr	r2, [pc, #88]	; (8001324 <MX_USART1_UART_Init+0x104>)
 80012cc:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2200      	movs	r2, #0
 80012d2:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	220c      	movs	r2, #12
 80012e4:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <MX_USART1_UART_Init+0x108>)
 80012f6:	0019      	movs	r1, r3
 80012f8:	0010      	movs	r0, r2
 80012fa:	f003 f917 	bl	800452c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <MX_USART1_UART_Init+0x108>)
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff ff51 	bl	80011a8 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_USART1_UART_Init+0x108>)
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff ff35 	bl	8001178 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_USART1_UART_Init+0x108>)
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff23 	bl	800115c <LL_USART_Enable>

}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b00f      	add	sp, #60	; 0x3c
 800131c:	bd90      	pop	{r4, r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	48000400 	.word	0x48000400
 8001324:	00007a12 	.word	0x00007a12
 8001328:	40013800 	.word	0x40013800

0800132c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800132e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <LoopForever+0x6>)
  ldr r1, =_edata
 8001332:	490e      	ldr	r1, [pc, #56]	; (800136c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <LoopForever+0xe>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001348:	4c0b      	ldr	r4, [pc, #44]	; (8001378 <LoopForever+0x16>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001356:	f7ff fb64 	bl	8000a22 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800135a:	f003 f94f 	bl	80045fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800135e:	f7ff f921 	bl	80005a4 <main>

08001362 <LoopForever>:

LoopForever:
    b LoopForever
 8001362:	e7fe      	b.n	8001362 <LoopForever>
  ldr   r0, =_estack
 8001364:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001370:	08004710 	.word	0x08004710
  ldr r2, =_sbss
 8001374:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001378:	200002cc 	.word	0x200002cc

0800137c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC1_COMP_IRQHandler>
	...

08001380 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <HAL_Init+0x24>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_Init+0x24>)
 800138a:	2110      	movs	r1, #16
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001390:	2000      	movs	r0, #0
 8001392:	f000 f809 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001396:	f7ff fa1f 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	40022000 	.word	0x40022000

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_InitTick+0x5c>)
 80013b2:	681c      	ldr	r4, [r3, #0]
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_InitTick+0x60>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	0019      	movs	r1, r3
 80013ba:	23fa      	movs	r3, #250	; 0xfa
 80013bc:	0098      	lsls	r0, r3, #2
 80013be:	f7fe fea3 	bl	8000108 <__udivsi3>
 80013c2:	0003      	movs	r3, r0
 80013c4:	0019      	movs	r1, r3
 80013c6:	0020      	movs	r0, r4
 80013c8:	f7fe fe9e 	bl	8000108 <__udivsi3>
 80013cc:	0003      	movs	r3, r0
 80013ce:	0018      	movs	r0, r3
 80013d0:	f000 fd91 	bl	8001ef6 <HAL_SYSTICK_Config>
 80013d4:	1e03      	subs	r3, r0, #0
 80013d6:	d001      	beq.n	80013dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e00f      	b.n	80013fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d80b      	bhi.n	80013fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	2301      	movs	r3, #1
 80013e6:	425b      	negs	r3, r3
 80013e8:	2200      	movs	r2, #0
 80013ea:	0018      	movs	r0, r3
 80013ec:	f000 fd5e 	bl	8001eac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_InitTick+0x64>)
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b003      	add	sp, #12
 8001402:	bd90      	pop	{r4, r7, pc}
 8001404:	20000008 	.word	0x20000008
 8001408:	20000010 	.word	0x20000010
 800140c:	2000000c 	.word	0x2000000c

08001410 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_IncTick+0x1c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	001a      	movs	r2, r3
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_IncTick+0x20>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	18d2      	adds	r2, r2, r3
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_IncTick+0x20>)
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	20000010 	.word	0x20000010
 8001430:	200002c8 	.word	0x200002c8

08001434 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  return uwTick;
 8001438:	4b02      	ldr	r3, [pc, #8]	; (8001444 <HAL_GetTick+0x10>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	200002c8 	.word	0x200002c8

08001448 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001450:	230f      	movs	r3, #15
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e125      	b.n	80016b2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10a      	bne.n	8001484 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2234      	movs	r2, #52	; 0x34
 8001478:	2100      	movs	r1, #0
 800147a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	0018      	movs	r0, r3
 8001480:	f7fe ff2a 	bl	80002d8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001488:	2210      	movs	r2, #16
 800148a:	4013      	ands	r3, r2
 800148c:	d000      	beq.n	8001490 <HAL_ADC_Init+0x48>
 800148e:	e103      	b.n	8001698 <HAL_ADC_Init+0x250>
 8001490:	230f      	movs	r3, #15
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d000      	beq.n	800149c <HAL_ADC_Init+0x54>
 800149a:	e0fd      	b.n	8001698 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2204      	movs	r2, #4
 80014a4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80014a6:	d000      	beq.n	80014aa <HAL_ADC_Init+0x62>
 80014a8:	e0f6      	b.n	8001698 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	4a83      	ldr	r2, [pc, #524]	; (80016bc <HAL_ADC_Init+0x274>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	2202      	movs	r2, #2
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2203      	movs	r2, #3
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d112      	bne.n	80014ee <HAL_ADC_Init+0xa6>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d009      	beq.n	80014ea <HAL_ADC_Init+0xa2>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	401a      	ands	r2, r3
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_Init+0xa6>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_ADC_Init+0xa8>
 80014ee:	2300      	movs	r3, #0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d116      	bne.n	8001522 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2218      	movs	r2, #24
 80014fc:	4393      	bics	r3, r2
 80014fe:	0019      	movs	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	0899      	lsrs	r1, r3, #2
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4964      	ldr	r1, [pc, #400]	; (80016c0 <HAL_ADC_Init+0x278>)
 800152e:	400a      	ands	r2, r1
 8001530:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7e1b      	ldrb	r3, [r3, #24]
 8001536:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7e5b      	ldrb	r3, [r3, #25]
 800153c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800153e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7e9b      	ldrb	r3, [r3, #26]
 8001544:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001546:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	2b01      	cmp	r3, #1
 800154e:	d002      	beq.n	8001556 <HAL_ADC_Init+0x10e>
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	015b      	lsls	r3, r3, #5
 8001554:	e000      	b.n	8001558 <HAL_ADC_Init+0x110>
 8001556:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001558:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800155e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d101      	bne.n	800156c <HAL_ADC_Init+0x124>
 8001568:	2304      	movs	r3, #4
 800156a:	e000      	b.n	800156e <HAL_ADC_Init+0x126>
 800156c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800156e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2124      	movs	r1, #36	; 0x24
 8001574:	5c5b      	ldrb	r3, [r3, r1]
 8001576:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001578:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	4313      	orrs	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7edb      	ldrb	r3, [r3, #27]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d115      	bne.n	80015b4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7e9b      	ldrb	r3, [r3, #26]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	0252      	lsls	r2, r2, #9
 8001596:	4313      	orrs	r3, r2
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	e00b      	b.n	80015b4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a0:	2220      	movs	r2, #32
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ac:	2201      	movs	r2, #1
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69da      	ldr	r2, [r3, #28]
 80015b8:	23c2      	movs	r3, #194	; 0xc2
 80015ba:	33ff      	adds	r3, #255	; 0xff
 80015bc:	429a      	cmp	r2, r3
 80015be:	d007      	beq.n	80015d0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80015c8:	4313      	orrs	r3, r2
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68d9      	ldr	r1, [r3, #12]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	430a      	orrs	r2, r1
 80015de:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	055b      	lsls	r3, r3, #21
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d01b      	beq.n	8001624 <HAL_ADC_Init+0x1dc>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d017      	beq.n	8001624 <HAL_ADC_Init+0x1dc>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d013      	beq.n	8001624 <HAL_ADC_Init+0x1dc>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	2b03      	cmp	r3, #3
 8001602:	d00f      	beq.n	8001624 <HAL_ADC_Init+0x1dc>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	2b04      	cmp	r3, #4
 800160a:	d00b      	beq.n	8001624 <HAL_ADC_Init+0x1dc>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	2b05      	cmp	r3, #5
 8001612:	d007      	beq.n	8001624 <HAL_ADC_Init+0x1dc>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	2b06      	cmp	r3, #6
 800161a:	d003      	beq.n	8001624 <HAL_ADC_Init+0x1dc>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	2b07      	cmp	r3, #7
 8001622:	d112      	bne.n	800164a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2107      	movs	r1, #7
 8001630:	438a      	bics	r2, r1
 8001632:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6959      	ldr	r1, [r3, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	2207      	movs	r2, #7
 8001640:	401a      	ands	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <HAL_ADC_Init+0x27c>)
 8001652:	4013      	ands	r3, r2
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	429a      	cmp	r2, r3
 8001658:	d10b      	bne.n	8001672 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001664:	2203      	movs	r2, #3
 8001666:	4393      	bics	r3, r2
 8001668:	2201      	movs	r2, #1
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001670:	e01c      	b.n	80016ac <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001676:	2212      	movs	r2, #18
 8001678:	4393      	bics	r3, r2
 800167a:	2210      	movs	r2, #16
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001686:	2201      	movs	r2, #1
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800168e:	230f      	movs	r3, #15
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001696:	e009      	b.n	80016ac <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169c:	2210      	movs	r2, #16
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80016a4:	230f      	movs	r3, #15
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016ac:	230f      	movs	r3, #15
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	781b      	ldrb	r3, [r3, #0]
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b004      	add	sp, #16
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	fffffefd 	.word	0xfffffefd
 80016c0:	fffe0219 	.word	0xfffe0219
 80016c4:	833fffe7 	.word	0x833fffe7

080016c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d4:	2317      	movs	r3, #23
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2204      	movs	r2, #4
 80016e4:	4013      	ands	r3, r2
 80016e6:	d15e      	bne.n	80017a6 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2234      	movs	r2, #52	; 0x34
 80016ec:	5c9b      	ldrb	r3, [r3, r2]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_Start_DMA+0x2e>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e05e      	b.n	80017b4 <HAL_ADC_Start_DMA+0xec>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2234      	movs	r2, #52	; 0x34
 80016fa:	2101      	movs	r1, #1
 80016fc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	7e5b      	ldrb	r3, [r3, #25]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d007      	beq.n	8001716 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001706:	2317      	movs	r3, #23
 8001708:	18fc      	adds	r4, r7, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	0018      	movs	r0, r3
 800170e:	f000 f983 	bl	8001a18 <ADC_Enable>
 8001712:	0003      	movs	r3, r0
 8001714:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001716:	2317      	movs	r3, #23
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d146      	bne.n	80017ae <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001724:	4a25      	ldr	r2, [pc, #148]	; (80017bc <HAL_ADC_Start_DMA+0xf4>)
 8001726:	4013      	ands	r3, r2
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	0052      	lsls	r2, r2, #1
 800172c:	431a      	orrs	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2234      	movs	r2, #52	; 0x34
 800173c:	2100      	movs	r1, #0
 800173e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <HAL_ADC_Start_DMA+0xf8>)
 8001746:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <HAL_ADC_Start_DMA+0xfc>)
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <HAL_ADC_Start_DMA+0x100>)
 8001756:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	221c      	movs	r2, #28
 800175e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2110      	movs	r1, #16
 800176c:	430a      	orrs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2101      	movs	r1, #1
 800177c:	430a      	orrs	r2, r1
 800177e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3340      	adds	r3, #64	; 0x40
 800178a:	0019      	movs	r1, r3
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f000 fc06 	bl	8001fa0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2104      	movs	r1, #4
 80017a0:	430a      	orrs	r2, r1
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	e003      	b.n	80017ae <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017a6:	2317      	movs	r3, #23
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	2202      	movs	r2, #2
 80017ac:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80017ae:	2317      	movs	r3, #23
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	781b      	ldrb	r3, [r3, #0]
}
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b007      	add	sp, #28
 80017ba:	bd90      	pop	{r4, r7, pc}
 80017bc:	fffff0fe 	.word	0xfffff0fe
 80017c0:	08001b11 	.word	0x08001b11
 80017c4:	08001bc5 	.word	0x08001bc5
 80017c8:	08001be3 	.word	0x08001be3

080017cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b002      	add	sp, #8
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001806:	230f      	movs	r3, #15
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	055b      	lsls	r3, r3, #21
 800181a:	429a      	cmp	r2, r3
 800181c:	d011      	beq.n	8001842 <HAL_ADC_ConfigChannel+0x46>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	2b01      	cmp	r3, #1
 8001824:	d00d      	beq.n	8001842 <HAL_ADC_ConfigChannel+0x46>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	2b02      	cmp	r3, #2
 800182c:	d009      	beq.n	8001842 <HAL_ADC_ConfigChannel+0x46>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	2b03      	cmp	r3, #3
 8001834:	d005      	beq.n	8001842 <HAL_ADC_ConfigChannel+0x46>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	2b04      	cmp	r3, #4
 800183c:	d001      	beq.n	8001842 <HAL_ADC_ConfigChannel+0x46>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2234      	movs	r2, #52	; 0x34
 8001846:	5c9b      	ldrb	r3, [r3, r2]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x54>
 800184c:	2302      	movs	r3, #2
 800184e:	e0d0      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x1f6>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2234      	movs	r2, #52	; 0x34
 8001854:	2101      	movs	r1, #1
 8001856:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2204      	movs	r2, #4
 8001860:	4013      	ands	r3, r2
 8001862:	d000      	beq.n	8001866 <HAL_ADC_ConfigChannel+0x6a>
 8001864:	e0b4      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a64      	ldr	r2, [pc, #400]	; (80019fc <HAL_ADC_ConfigChannel+0x200>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d100      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x76>
 8001870:	e082      	b.n	8001978 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	409a      	lsls	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	055b      	lsls	r3, r3, #21
 8001890:	429a      	cmp	r2, r3
 8001892:	d037      	beq.n	8001904 <HAL_ADC_ConfigChannel+0x108>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	2b01      	cmp	r3, #1
 800189a:	d033      	beq.n	8001904 <HAL_ADC_ConfigChannel+0x108>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d02f      	beq.n	8001904 <HAL_ADC_ConfigChannel+0x108>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d02b      	beq.n	8001904 <HAL_ADC_ConfigChannel+0x108>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d027      	beq.n	8001904 <HAL_ADC_ConfigChannel+0x108>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d023      	beq.n	8001904 <HAL_ADC_ConfigChannel+0x108>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	2b06      	cmp	r3, #6
 80018c2:	d01f      	beq.n	8001904 <HAL_ADC_ConfigChannel+0x108>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	2b07      	cmp	r3, #7
 80018ca:	d01b      	beq.n	8001904 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	2107      	movs	r1, #7
 80018d8:	400b      	ands	r3, r1
 80018da:	429a      	cmp	r2, r3
 80018dc:	d012      	beq.n	8001904 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2107      	movs	r1, #7
 80018ea:	438a      	bics	r2, r1
 80018ec:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6959      	ldr	r1, [r3, #20]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2207      	movs	r2, #7
 80018fa:	401a      	ands	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b10      	cmp	r3, #16
 800190a:	d007      	beq.n	800191c <HAL_ADC_ConfigChannel+0x120>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b11      	cmp	r3, #17
 8001912:	d003      	beq.n	800191c <HAL_ADC_ConfigChannel+0x120>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b12      	cmp	r3, #18
 800191a:	d163      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_ADC_ConfigChannel+0x204>)
 800191e:	6819      	ldr	r1, [r3, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b10      	cmp	r3, #16
 8001926:	d009      	beq.n	800193c <HAL_ADC_ConfigChannel+0x140>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b11      	cmp	r3, #17
 800192e:	d102      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x13a>
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	03db      	lsls	r3, r3, #15
 8001934:	e004      	b.n	8001940 <HAL_ADC_ConfigChannel+0x144>
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	045b      	lsls	r3, r3, #17
 800193a:	e001      	b.n	8001940 <HAL_ADC_ConfigChannel+0x144>
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	041b      	lsls	r3, r3, #16
 8001940:	4a2f      	ldr	r2, [pc, #188]	; (8001a00 <HAL_ADC_ConfigChannel+0x204>)
 8001942:	430b      	orrs	r3, r1
 8001944:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b10      	cmp	r3, #16
 800194c:	d14a      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800194e:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <HAL_ADC_ConfigChannel+0x208>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	492d      	ldr	r1, [pc, #180]	; (8001a08 <HAL_ADC_ConfigChannel+0x20c>)
 8001954:	0018      	movs	r0, r3
 8001956:	f7fe fbd7 	bl	8000108 <__udivsi3>
 800195a:	0003      	movs	r3, r0
 800195c:	001a      	movs	r2, r3
 800195e:	0013      	movs	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	189b      	adds	r3, r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001968:	e002      	b.n	8001970 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	3b01      	subs	r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f9      	bne.n	800196a <HAL_ADC_ConfigChannel+0x16e>
 8001976:	e035      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2101      	movs	r1, #1
 8001984:	4099      	lsls	r1, r3
 8001986:	000b      	movs	r3, r1
 8001988:	43d9      	mvns	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	400a      	ands	r2, r1
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b10      	cmp	r3, #16
 8001998:	d007      	beq.n	80019aa <HAL_ADC_ConfigChannel+0x1ae>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b11      	cmp	r3, #17
 80019a0:	d003      	beq.n	80019aa <HAL_ADC_ConfigChannel+0x1ae>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d11c      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_ADC_ConfigChannel+0x204>)
 80019ac:	6819      	ldr	r1, [r3, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b10      	cmp	r3, #16
 80019b4:	d007      	beq.n	80019c6 <HAL_ADC_ConfigChannel+0x1ca>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b11      	cmp	r3, #17
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x1c6>
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <HAL_ADC_ConfigChannel+0x210>)
 80019c0:	e002      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x1cc>
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_ADC_ConfigChannel+0x214>)
 80019c4:	e000      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x1cc>
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <HAL_ADC_ConfigChannel+0x218>)
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <HAL_ADC_ConfigChannel+0x204>)
 80019ca:	400b      	ands	r3, r1
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e009      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d4:	2220      	movs	r2, #32
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80019dc:	230f      	movs	r3, #15
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2234      	movs	r2, #52	; 0x34
 80019e8:	2100      	movs	r1, #0
 80019ea:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80019ec:	230f      	movs	r3, #15
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	781b      	ldrb	r3, [r3, #0]
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b004      	add	sp, #16
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	00001001 	.word	0x00001001
 8001a00:	40012708 	.word	0x40012708
 8001a04:	20000008 	.word	0x20000008
 8001a08:	000f4240 	.word	0x000f4240
 8001a0c:	ffbfffff 	.word	0xffbfffff
 8001a10:	feffffff 	.word	0xfeffffff
 8001a14:	ff7fffff 	.word	0xff7fffff

08001a18 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2203      	movs	r2, #3
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d112      	bne.n	8001a5c <ADC_Enable+0x44>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d009      	beq.n	8001a58 <ADC_Enable+0x40>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	401a      	ands	r2, r3
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d101      	bne.n	8001a5c <ADC_Enable+0x44>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <ADC_Enable+0x46>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d14b      	bne.n	8001afa <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a26      	ldr	r2, [pc, #152]	; (8001b04 <ADC_Enable+0xec>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d00d      	beq.n	8001a8a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a72:	2210      	movs	r2, #16
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	2201      	movs	r2, #1
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e038      	b.n	8001afc <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2101      	movs	r1, #1
 8001a96:	430a      	orrs	r2, r1
 8001a98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <ADC_Enable+0xf0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	491b      	ldr	r1, [pc, #108]	; (8001b0c <ADC_Enable+0xf4>)
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7fe fb31 	bl	8000108 <__udivsi3>
 8001aa6:	0003      	movs	r3, r0
 8001aa8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001aaa:	e002      	b.n	8001ab2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f9      	bne.n	8001aac <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ab8:	f7ff fcbc 	bl	8001434 <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ac0:	e014      	b.n	8001aec <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ac2:	f7ff fcb7 	bl	8001434 <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d90d      	bls.n	8001aec <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e007      	b.n	8001afc <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2201      	movs	r2, #1
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d1e3      	bne.n	8001ac2 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b004      	add	sp, #16
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	80000017 	.word	0x80000017
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	000f4240 	.word	0x000f4240

08001b10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b22:	2250      	movs	r2, #80	; 0x50
 8001b24:	4013      	ands	r3, r2
 8001b26:	d140      	bne.n	8001baa <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	431a      	orrs	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	23c0      	movs	r3, #192	; 0xc0
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4013      	ands	r3, r2
 8001b42:	d12d      	bne.n	8001ba0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d129      	bne.n	8001ba0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2208      	movs	r2, #8
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d122      	bne.n	8001ba0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2204      	movs	r2, #4
 8001b62:	4013      	ands	r3, r2
 8001b64:	d110      	bne.n	8001b88 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	210c      	movs	r1, #12
 8001b72:	438a      	bics	r2, r1
 8001b74:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	4a11      	ldr	r2, [pc, #68]	; (8001bc0 <ADC_DMAConvCplt+0xb0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2201      	movs	r2, #1
 8001b80:	431a      	orrs	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	639a      	str	r2, [r3, #56]	; 0x38
 8001b86:	e00b      	b.n	8001ba0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b98:	2201      	movs	r2, #1
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f7ff fe12 	bl	80017cc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001ba8:	e005      	b.n	8001bb6 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	0010      	movs	r0, r2
 8001bb4:	4798      	blx	r3
}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b004      	add	sp, #16
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	fffffefe 	.word	0xfffffefe

08001bc4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff fe01 	bl	80017dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b004      	add	sp, #16
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf4:	2240      	movs	r2, #64	; 0x40
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	2204      	movs	r2, #4
 8001c02:	431a      	orrs	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7ff fdee 	bl	80017ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c10:	46c0      	nop			; (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b004      	add	sp, #16
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c20:	2317      	movs	r3, #23
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2234      	movs	r2, #52	; 0x34
 8001c34:	5c9b      	ldrb	r3, [r3, r2]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ADCEx_Calibration_Start+0x26>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e084      	b.n	8001d48 <HAL_ADCEx_Calibration_Start+0x130>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2234      	movs	r2, #52	; 0x34
 8001c42:	2101      	movs	r1, #1
 8001c44:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d112      	bne.n	8001c7a <HAL_ADCEx_Calibration_Start+0x62>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d009      	beq.n	8001c76 <HAL_ADCEx_Calibration_Start+0x5e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d101      	bne.n	8001c7a <HAL_ADCEx_Calibration_Start+0x62>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_ADCEx_Calibration_Start+0x64>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d152      	bne.n	8001d26 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c84:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <HAL_ADCEx_Calibration_Start+0x138>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	2202      	movs	r2, #2
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2203      	movs	r2, #3
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2103      	movs	r1, #3
 8001ca8:	438a      	bics	r2, r1
 8001caa:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2180      	movs	r1, #128	; 0x80
 8001cb8:	0609      	lsls	r1, r1, #24
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001cbe:	f7ff fbb9 	bl	8001434 <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001cc6:	e014      	b.n	8001cf2 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001cc8:	f7ff fbb4 	bl	8001434 <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d90d      	bls.n	8001cf2 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cda:	2212      	movs	r2, #18
 8001cdc:	4393      	bics	r3, r2
 8001cde:	2210      	movs	r2, #16
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2234      	movs	r2, #52	; 0x34
 8001cea:	2100      	movs	r1, #0
 8001cec:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e02a      	b.n	8001d48 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	0fdb      	lsrs	r3, r3, #31
 8001cfa:	07da      	lsls	r2, r3, #31
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	061b      	lsls	r3, r3, #24
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d0e1      	beq.n	8001cc8 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68d9      	ldr	r1, [r3, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	2203      	movs	r2, #3
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	639a      	str	r2, [r3, #56]	; 0x38
 8001d24:	e009      	b.n	8001d3a <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001d32:	2317      	movs	r3, #23
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2234      	movs	r2, #52	; 0x34
 8001d3e:	2100      	movs	r1, #0
 8001d40:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001d42:	2317      	movs	r3, #23
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	781b      	ldrb	r3, [r3, #0]
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b006      	add	sp, #24
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	fffffefd 	.word	0xfffffefd

08001d54 <__NVIC_EnableIRQ>:
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	1dfb      	adds	r3, r7, #7
 8001d5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	1dfb      	adds	r3, r7, #7
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b7f      	cmp	r3, #127	; 0x7f
 8001d66:	d809      	bhi.n	8001d7c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d68:	1dfb      	adds	r3, r7, #7
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	001a      	movs	r2, r3
 8001d6e:	231f      	movs	r3, #31
 8001d70:	401a      	ands	r2, r3
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__NVIC_EnableIRQ+0x30>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	4091      	lsls	r1, r2
 8001d78:	000a      	movs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
}
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b002      	add	sp, #8
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	0002      	movs	r2, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d9c:	d828      	bhi.n	8001df0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d9e:	4a2f      	ldr	r2, [pc, #188]	; (8001e5c <__NVIC_SetPriority+0xd4>)
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	33c0      	adds	r3, #192	; 0xc0
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	589b      	ldr	r3, [r3, r2]
 8001dae:	1dfa      	adds	r2, r7, #7
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	0011      	movs	r1, r2
 8001db4:	2203      	movs	r2, #3
 8001db6:	400a      	ands	r2, r1
 8001db8:	00d2      	lsls	r2, r2, #3
 8001dba:	21ff      	movs	r1, #255	; 0xff
 8001dbc:	4091      	lsls	r1, r2
 8001dbe:	000a      	movs	r2, r1
 8001dc0:	43d2      	mvns	r2, r2
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	22ff      	movs	r2, #255	; 0xff
 8001dcc:	401a      	ands	r2, r3
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	4003      	ands	r3, r0
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ddc:	481f      	ldr	r0, [pc, #124]	; (8001e5c <__NVIC_SetPriority+0xd4>)
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b25b      	sxtb	r3, r3
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	430a      	orrs	r2, r1
 8001de8:	33c0      	adds	r3, #192	; 0xc0
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	501a      	str	r2, [r3, r0]
}
 8001dee:	e031      	b.n	8001e54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <__NVIC_SetPriority+0xd8>)
 8001df2:	1dfb      	adds	r3, r7, #7
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	0019      	movs	r1, r3
 8001df8:	230f      	movs	r3, #15
 8001dfa:	400b      	ands	r3, r1
 8001dfc:	3b08      	subs	r3, #8
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3306      	adds	r3, #6
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	18d3      	adds	r3, r2, r3
 8001e06:	3304      	adds	r3, #4
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	1dfa      	adds	r2, r7, #7
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	0011      	movs	r1, r2
 8001e10:	2203      	movs	r2, #3
 8001e12:	400a      	ands	r2, r1
 8001e14:	00d2      	lsls	r2, r2, #3
 8001e16:	21ff      	movs	r1, #255	; 0xff
 8001e18:	4091      	lsls	r1, r2
 8001e1a:	000a      	movs	r2, r1
 8001e1c:	43d2      	mvns	r2, r2
 8001e1e:	401a      	ands	r2, r3
 8001e20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	019b      	lsls	r3, r3, #6
 8001e26:	22ff      	movs	r2, #255	; 0xff
 8001e28:	401a      	ands	r2, r3
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	2303      	movs	r3, #3
 8001e32:	4003      	ands	r3, r0
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e38:	4809      	ldr	r0, [pc, #36]	; (8001e60 <__NVIC_SetPriority+0xd8>)
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	001c      	movs	r4, r3
 8001e40:	230f      	movs	r3, #15
 8001e42:	4023      	ands	r3, r4
 8001e44:	3b08      	subs	r3, #8
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	3306      	adds	r3, #6
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	18c3      	adds	r3, r0, r3
 8001e50:	3304      	adds	r3, #4
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b003      	add	sp, #12
 8001e5a:	bd90      	pop	{r4, r7, pc}
 8001e5c:	e000e100 	.word	0xe000e100
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <SysTick_Config+0x40>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e76:	2301      	movs	r3, #1
 8001e78:	e010      	b.n	8001e9c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <SysTick_Config+0x44>)
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	3a01      	subs	r2, #1
 8001e80:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e82:	2301      	movs	r3, #1
 8001e84:	425b      	negs	r3, r3
 8001e86:	2103      	movs	r1, #3
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7ff ff7d 	bl	8001d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <SysTick_Config+0x44>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <SysTick_Config+0x44>)
 8001e96:	2207      	movs	r2, #7
 8001e98:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	00ffffff 	.word	0x00ffffff
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	187b      	adds	r3, r7, r1
 8001eba:	1c02      	adds	r2, r0, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	187b      	adds	r3, r7, r1
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	b25b      	sxtb	r3, r3
 8001ec6:	0011      	movs	r1, r2
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff ff5d 	bl	8001d88 <__NVIC_SetPriority>
}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b004      	add	sp, #16
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	0002      	movs	r2, r0
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee2:	1dfb      	adds	r3, r7, #7
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	b25b      	sxtb	r3, r3
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff ff33 	bl	8001d54 <__NVIC_EnableIRQ>
}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b002      	add	sp, #8
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7ff ffaf 	bl	8001e64 <SysTick_Config>
 8001f06:	0003      	movs	r3, r0
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e036      	b.n	8001f94 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2221      	movs	r2, #33	; 0x21
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <HAL_DMA_Init+0x8c>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	0018      	movs	r0, r3
 8001f78:	f000 f946 	bl	8002208 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2221      	movs	r2, #33	; 0x21
 8001f86:	2101      	movs	r1, #1
 8001f88:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	2100      	movs	r1, #0
 8001f90:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}  
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b004      	add	sp, #16
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	ffffc00f 	.word	0xffffc00f

08001fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001fae:	2317      	movs	r3, #23
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	5c9b      	ldrb	r3, [r3, r2]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_DMA_Start_IT+0x24>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e04f      	b.n	8002064 <HAL_DMA_Start_IT+0xc4>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	2101      	movs	r1, #1
 8001fca:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2221      	movs	r2, #33	; 0x21
 8001fd0:	5c9b      	ldrb	r3, [r3, r2]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d13a      	bne.n	800204e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2221      	movs	r2, #33	; 0x21
 8001fdc:	2102      	movs	r1, #2
 8001fde:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	438a      	bics	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68b9      	ldr	r1, [r7, #8]
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f8d7 	bl	80021b0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d008      	beq.n	800201c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	210e      	movs	r1, #14
 8002016:	430a      	orrs	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	e00f      	b.n	800203c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	210a      	movs	r1, #10
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2104      	movs	r1, #4
 8002038:	438a      	bics	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2101      	movs	r1, #1
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e007      	b.n	800205e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2220      	movs	r2, #32
 8002052:	2100      	movs	r1, #0
 8002054:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002056:	2317      	movs	r3, #23
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	2202      	movs	r2, #2
 800205c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800205e:	2317      	movs	r3, #23
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	781b      	ldrb	r3, [r3, #0]
} 
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	b006      	add	sp, #24
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	2204      	movs	r2, #4
 800208a:	409a      	lsls	r2, r3
 800208c:	0013      	movs	r3, r2
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	d024      	beq.n	80020de <HAL_DMA_IRQHandler+0x72>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2204      	movs	r2, #4
 8002098:	4013      	ands	r3, r2
 800209a:	d020      	beq.n	80020de <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2220      	movs	r2, #32
 80020a4:	4013      	ands	r3, r2
 80020a6:	d107      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2104      	movs	r1, #4
 80020b4:	438a      	bics	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	2104      	movs	r1, #4
 80020c2:	4091      	lsls	r1, r2
 80020c4:	000a      	movs	r2, r1
 80020c6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d100      	bne.n	80020d2 <HAL_DMA_IRQHandler+0x66>
 80020d0:	e06a      	b.n	80021a8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	0010      	movs	r0, r2
 80020da:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80020dc:	e064      	b.n	80021a8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	2202      	movs	r2, #2
 80020e4:	409a      	lsls	r2, r3
 80020e6:	0013      	movs	r3, r2
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4013      	ands	r3, r2
 80020ec:	d02b      	beq.n	8002146 <HAL_DMA_IRQHandler+0xda>
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2202      	movs	r2, #2
 80020f2:	4013      	ands	r3, r2
 80020f4:	d027      	beq.n	8002146 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2220      	movs	r2, #32
 80020fe:	4013      	ands	r3, r2
 8002100:	d10b      	bne.n	800211a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	210a      	movs	r1, #10
 800210e:	438a      	bics	r2, r1
 8002110:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2221      	movs	r2, #33	; 0x21
 8002116:	2101      	movs	r1, #1
 8002118:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	2102      	movs	r1, #2
 8002124:	4091      	lsls	r1, r2
 8002126:	000a      	movs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2220      	movs	r2, #32
 800212e:	2100      	movs	r1, #0
 8002130:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	2b00      	cmp	r3, #0
 8002138:	d036      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	0010      	movs	r0, r2
 8002142:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002144:	e030      	b.n	80021a8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2208      	movs	r2, #8
 800214c:	409a      	lsls	r2, r3
 800214e:	0013      	movs	r3, r2
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	d028      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x13c>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2208      	movs	r2, #8
 800215a:	4013      	ands	r3, r2
 800215c:	d024      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	210e      	movs	r1, #14
 800216a:	438a      	bics	r2, r1
 800216c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	2101      	movs	r1, #1
 8002178:	4091      	lsls	r1, r2
 800217a:	000a      	movs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2221      	movs	r2, #33	; 0x21
 8002188:	2101      	movs	r1, #1
 800218a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	2100      	movs	r1, #0
 8002192:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	0010      	movs	r0, r2
 80021a4:	4798      	blx	r3
    }
   }
}  
 80021a6:	e7ff      	b.n	80021a8 <HAL_DMA_IRQHandler+0x13c>
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b004      	add	sp, #16
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	2101      	movs	r1, #1
 80021c8:	4091      	lsls	r1, r2
 80021ca:	000a      	movs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d108      	bne.n	80021f0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021ee:	e007      	b.n	8002200 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	60da      	str	r2, [r3, #12]
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b004      	add	sp, #16
 8002206:	bd80      	pop	{r7, pc}

08002208 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a08      	ldr	r2, [pc, #32]	; (8002238 <DMA_CalcBaseAndBitshift+0x30>)
 8002216:	4694      	mov	ip, r2
 8002218:	4463      	add	r3, ip
 800221a:	2114      	movs	r1, #20
 800221c:	0018      	movs	r0, r3
 800221e:	f7fd ff73 	bl	8000108 <__udivsi3>
 8002222:	0003      	movs	r3, r0
 8002224:	009a      	lsls	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a03      	ldr	r2, [pc, #12]	; (800223c <DMA_CalcBaseAndBitshift+0x34>)
 800222e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}
 8002238:	bffdfff8 	.word	0xbffdfff8
 800223c:	40020000 	.word	0x40020000

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224e:	e14f      	b.n	80024f0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4091      	lsls	r1, r2
 800225a:	000a      	movs	r2, r1
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d100      	bne.n	8002268 <HAL_GPIO_Init+0x28>
 8002266:	e140      	b.n	80024ea <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x38>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b12      	cmp	r3, #18
 8002276:	d123      	bne.n	80022c0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	08da      	lsrs	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3208      	adds	r2, #8
 8002280:	0092      	lsls	r2, r2, #2
 8002282:	58d3      	ldr	r3, [r2, r3]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2207      	movs	r2, #7
 800228a:	4013      	ands	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	220f      	movs	r2, #15
 8002290:	409a      	lsls	r2, r3
 8002292:	0013      	movs	r3, r2
 8002294:	43da      	mvns	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2107      	movs	r1, #7
 80022a4:	400b      	ands	r3, r1
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	409a      	lsls	r2, r3
 80022aa:	0013      	movs	r3, r2
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	08da      	lsrs	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3208      	adds	r2, #8
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	6939      	ldr	r1, [r7, #16]
 80022be:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	409a      	lsls	r2, r3
 80022ce:	0013      	movs	r3, r2
 80022d0:	43da      	mvns	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2203      	movs	r2, #3
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	409a      	lsls	r2, r3
 80022e6:	0013      	movs	r3, r2
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d00b      	beq.n	8002314 <HAL_GPIO_Init+0xd4>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d007      	beq.n	8002314 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002308:	2b11      	cmp	r3, #17
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b12      	cmp	r3, #18
 8002312:	d130      	bne.n	8002376 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	409a      	lsls	r2, r3
 8002322:	0013      	movs	r3, r2
 8002324:	43da      	mvns	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	409a      	lsls	r2, r3
 8002336:	0013      	movs	r3, r2
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800234a:	2201      	movs	r2, #1
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
 8002350:	0013      	movs	r3, r2
 8002352:	43da      	mvns	r2, r3
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	091b      	lsrs	r3, r3, #4
 8002360:	2201      	movs	r2, #1
 8002362:	401a      	ands	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	409a      	lsls	r2, r3
 8002368:	0013      	movs	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	409a      	lsls	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	43da      	mvns	r2, r3
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	409a      	lsls	r2, r3
 8002398:	0013      	movs	r3, r2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	055b      	lsls	r3, r3, #21
 80023ae:	4013      	ands	r3, r2
 80023b0:	d100      	bne.n	80023b4 <HAL_GPIO_Init+0x174>
 80023b2:	e09a      	b.n	80024ea <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b4:	4b54      	ldr	r3, [pc, #336]	; (8002508 <HAL_GPIO_Init+0x2c8>)
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	4b53      	ldr	r3, [pc, #332]	; (8002508 <HAL_GPIO_Init+0x2c8>)
 80023ba:	2101      	movs	r1, #1
 80023bc:	430a      	orrs	r2, r1
 80023be:	619a      	str	r2, [r3, #24]
 80023c0:	4b51      	ldr	r3, [pc, #324]	; (8002508 <HAL_GPIO_Init+0x2c8>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2201      	movs	r2, #1
 80023c6:	4013      	ands	r3, r2
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023cc:	4a4f      	ldr	r2, [pc, #316]	; (800250c <HAL_GPIO_Init+0x2cc>)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	589b      	ldr	r3, [r3, r2]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2203      	movs	r2, #3
 80023de:	4013      	ands	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	220f      	movs	r2, #15
 80023e4:	409a      	lsls	r2, r3
 80023e6:	0013      	movs	r3, r2
 80023e8:	43da      	mvns	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	2390      	movs	r3, #144	; 0x90
 80023f4:	05db      	lsls	r3, r3, #23
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d013      	beq.n	8002422 <HAL_GPIO_Init+0x1e2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a44      	ldr	r2, [pc, #272]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00d      	beq.n	800241e <HAL_GPIO_Init+0x1de>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a43      	ldr	r2, [pc, #268]	; (8002514 <HAL_GPIO_Init+0x2d4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <HAL_GPIO_Init+0x1da>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a42      	ldr	r2, [pc, #264]	; (8002518 <HAL_GPIO_Init+0x2d8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_GPIO_Init+0x1d6>
 8002412:	2303      	movs	r3, #3
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x1e4>
 8002416:	2305      	movs	r3, #5
 8002418:	e004      	b.n	8002424 <HAL_GPIO_Init+0x1e4>
 800241a:	2302      	movs	r3, #2
 800241c:	e002      	b.n	8002424 <HAL_GPIO_Init+0x1e4>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_GPIO_Init+0x1e4>
 8002422:	2300      	movs	r3, #0
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	2103      	movs	r1, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0092      	lsls	r2, r2, #2
 800242c:	4093      	lsls	r3, r2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002434:	4935      	ldr	r1, [pc, #212]	; (800250c <HAL_GPIO_Init+0x2cc>)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	3302      	adds	r3, #2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002442:	4b36      	ldr	r3, [pc, #216]	; (800251c <HAL_GPIO_Init+0x2dc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	43da      	mvns	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	025b      	lsls	r3, r3, #9
 800245a:	4013      	ands	r3, r2
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_GPIO_Init+0x2dc>)
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800246c:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_GPIO_Init+0x2dc>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	43da      	mvns	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	029b      	lsls	r3, r3, #10
 8002484:	4013      	ands	r3, r2
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_GPIO_Init+0x2dc>)
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002496:	4b21      	ldr	r3, [pc, #132]	; (800251c <HAL_GPIO_Init+0x2dc>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43da      	mvns	r2, r3
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	035b      	lsls	r3, r3, #13
 80024ae:	4013      	ands	r3, r2
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_GPIO_Init+0x2dc>)
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_GPIO_Init+0x2dc>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43da      	mvns	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	039b      	lsls	r3, r3, #14
 80024d8:	4013      	ands	r3, r2
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_GPIO_Init+0x2dc>)
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	40da      	lsrs	r2, r3
 80024f8:	1e13      	subs	r3, r2, #0
 80024fa:	d000      	beq.n	80024fe <HAL_GPIO_Init+0x2be>
 80024fc:	e6a8      	b.n	8002250 <HAL_GPIO_Init+0x10>
  } 
}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b006      	add	sp, #24
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	40021000 	.word	0x40021000
 800250c:	40010000 	.word	0x40010000
 8002510:	48000400 	.word	0x48000400
 8002514:	48000800 	.word	0x48000800
 8002518:	48000c00 	.word	0x48000c00
 800251c:	40010400 	.word	0x40010400

08002520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	000a      	movs	r2, r1
 800252a:	1cbb      	adds	r3, r7, #2
 800252c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	1cba      	adds	r2, r7, #2
 8002534:	8812      	ldrh	r2, [r2, #0]
 8002536:	4013      	ands	r3, r2
 8002538:	d004      	beq.n	8002544 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800253a:	230f      	movs	r3, #15
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e003      	b.n	800254c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002544:	230f      	movs	r3, #15
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800254c:	230f      	movs	r3, #15
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	781b      	ldrb	r3, [r3, #0]
  }
 8002552:	0018      	movs	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	b004      	add	sp, #16
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e303      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2201      	movs	r2, #1
 8002574:	4013      	ands	r3, r2
 8002576:	d100      	bne.n	800257a <HAL_RCC_OscConfig+0x1e>
 8002578:	e08d      	b.n	8002696 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800257a:	4bc4      	ldr	r3, [pc, #784]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	220c      	movs	r2, #12
 8002580:	4013      	ands	r3, r2
 8002582:	2b04      	cmp	r3, #4
 8002584:	d00e      	beq.n	80025a4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002586:	4bc1      	ldr	r3, [pc, #772]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	220c      	movs	r2, #12
 800258c:	4013      	ands	r3, r2
 800258e:	2b08      	cmp	r3, #8
 8002590:	d116      	bne.n	80025c0 <HAL_RCC_OscConfig+0x64>
 8002592:	4bbe      	ldr	r3, [pc, #760]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	025b      	lsls	r3, r3, #9
 800259a:	401a      	ands	r2, r3
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	025b      	lsls	r3, r3, #9
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d10d      	bne.n	80025c0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	4bb9      	ldr	r3, [pc, #740]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	029b      	lsls	r3, r3, #10
 80025ac:	4013      	ands	r3, r2
 80025ae:	d100      	bne.n	80025b2 <HAL_RCC_OscConfig+0x56>
 80025b0:	e070      	b.n	8002694 <HAL_RCC_OscConfig+0x138>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d000      	beq.n	80025bc <HAL_RCC_OscConfig+0x60>
 80025ba:	e06b      	b.n	8002694 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e2da      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d107      	bne.n	80025d8 <HAL_RCC_OscConfig+0x7c>
 80025c8:	4bb0      	ldr	r3, [pc, #704]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4baf      	ldr	r3, [pc, #700]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	0249      	lsls	r1, r1, #9
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e02f      	b.n	8002638 <HAL_RCC_OscConfig+0xdc>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10c      	bne.n	80025fa <HAL_RCC_OscConfig+0x9e>
 80025e0:	4baa      	ldr	r3, [pc, #680]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4ba9      	ldr	r3, [pc, #676]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80025e6:	49aa      	ldr	r1, [pc, #680]	; (8002890 <HAL_RCC_OscConfig+0x334>)
 80025e8:	400a      	ands	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	4ba7      	ldr	r3, [pc, #668]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4ba6      	ldr	r3, [pc, #664]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80025f2:	49a8      	ldr	r1, [pc, #672]	; (8002894 <HAL_RCC_OscConfig+0x338>)
 80025f4:	400a      	ands	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e01e      	b.n	8002638 <HAL_RCC_OscConfig+0xdc>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d10e      	bne.n	8002620 <HAL_RCC_OscConfig+0xc4>
 8002602:	4ba2      	ldr	r3, [pc, #648]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4ba1      	ldr	r3, [pc, #644]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	02c9      	lsls	r1, r1, #11
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	4b9e      	ldr	r3, [pc, #632]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b9d      	ldr	r3, [pc, #628]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002616:	2180      	movs	r1, #128	; 0x80
 8002618:	0249      	lsls	r1, r1, #9
 800261a:	430a      	orrs	r2, r1
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0xdc>
 8002620:	4b9a      	ldr	r3, [pc, #616]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b99      	ldr	r3, [pc, #612]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002626:	499a      	ldr	r1, [pc, #616]	; (8002890 <HAL_RCC_OscConfig+0x334>)
 8002628:	400a      	ands	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	4b97      	ldr	r3, [pc, #604]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b96      	ldr	r3, [pc, #600]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002632:	4998      	ldr	r1, [pc, #608]	; (8002894 <HAL_RCC_OscConfig+0x338>)
 8002634:	400a      	ands	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d014      	beq.n	800266a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe fef8 	bl	8001434 <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264a:	f7fe fef3 	bl	8001434 <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b64      	cmp	r3, #100	; 0x64
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e28c      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265c:	4b8b      	ldr	r3, [pc, #556]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	4013      	ands	r3, r2
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0xee>
 8002668:	e015      	b.n	8002696 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe fee3 	bl	8001434 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fede 	bl	8001434 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e277      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002686:	4b81      	ldr	r3, [pc, #516]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	029b      	lsls	r3, r3, #10
 800268e:	4013      	ands	r3, r2
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x118>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2202      	movs	r2, #2
 800269c:	4013      	ands	r3, r2
 800269e:	d100      	bne.n	80026a2 <HAL_RCC_OscConfig+0x146>
 80026a0:	e069      	b.n	8002776 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026a2:	4b7a      	ldr	r3, [pc, #488]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	220c      	movs	r2, #12
 80026a8:	4013      	ands	r3, r2
 80026aa:	d00b      	beq.n	80026c4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026ac:	4b77      	ldr	r3, [pc, #476]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	220c      	movs	r2, #12
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d11c      	bne.n	80026f2 <HAL_RCC_OscConfig+0x196>
 80026b8:	4b74      	ldr	r3, [pc, #464]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	025b      	lsls	r3, r3, #9
 80026c0:	4013      	ands	r3, r2
 80026c2:	d116      	bne.n	80026f2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c4:	4b71      	ldr	r3, [pc, #452]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2202      	movs	r2, #2
 80026ca:	4013      	ands	r3, r2
 80026cc:	d005      	beq.n	80026da <HAL_RCC_OscConfig+0x17e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d001      	beq.n	80026da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e24d      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026da:	4b6c      	ldr	r3, [pc, #432]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	22f8      	movs	r2, #248	; 0xf8
 80026e0:	4393      	bics	r3, r2
 80026e2:	0019      	movs	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	00da      	lsls	r2, r3, #3
 80026ea:	4b68      	ldr	r3, [pc, #416]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f0:	e041      	b.n	8002776 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d024      	beq.n	8002744 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026fa:	4b64      	ldr	r3, [pc, #400]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b63      	ldr	r3, [pc, #396]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002700:	2101      	movs	r1, #1
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe fe95 	bl	8001434 <HAL_GetTick>
 800270a:	0003      	movs	r3, r0
 800270c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002710:	f7fe fe90 	bl	8001434 <HAL_GetTick>
 8002714:	0002      	movs	r2, r0
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e229      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	4b5a      	ldr	r3, [pc, #360]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2202      	movs	r2, #2
 8002728:	4013      	ands	r3, r2
 800272a:	d0f1      	beq.n	8002710 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	4b57      	ldr	r3, [pc, #348]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	22f8      	movs	r2, #248	; 0xf8
 8002732:	4393      	bics	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00da      	lsls	r2, r3, #3
 800273c:	4b53      	ldr	r3, [pc, #332]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800273e:	430a      	orrs	r2, r1
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e018      	b.n	8002776 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002744:	4b51      	ldr	r3, [pc, #324]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800274a:	2101      	movs	r1, #1
 800274c:	438a      	bics	r2, r1
 800274e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe fe70 	bl	8001434 <HAL_GetTick>
 8002754:	0003      	movs	r3, r0
 8002756:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275a:	f7fe fe6b 	bl	8001434 <HAL_GetTick>
 800275e:	0002      	movs	r2, r0
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e204      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276c:	4b47      	ldr	r3, [pc, #284]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2202      	movs	r2, #2
 8002772:	4013      	ands	r3, r2
 8002774:	d1f1      	bne.n	800275a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2208      	movs	r2, #8
 800277c:	4013      	ands	r3, r2
 800277e:	d036      	beq.n	80027ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d019      	beq.n	80027bc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002788:	4b40      	ldr	r3, [pc, #256]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800278a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800278c:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800278e:	2101      	movs	r1, #1
 8002790:	430a      	orrs	r2, r1
 8002792:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002794:	f7fe fe4e 	bl	8001434 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279e:	f7fe fe49 	bl	8001434 <HAL_GetTick>
 80027a2:	0002      	movs	r2, r0
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e1e2      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b0:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	2202      	movs	r2, #2
 80027b6:	4013      	ands	r3, r2
 80027b8:	d0f1      	beq.n	800279e <HAL_RCC_OscConfig+0x242>
 80027ba:	e018      	b.n	80027ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027bc:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80027be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c0:	4b32      	ldr	r3, [pc, #200]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80027c2:	2101      	movs	r1, #1
 80027c4:	438a      	bics	r2, r1
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7fe fe34 	bl	8001434 <HAL_GetTick>
 80027cc:	0003      	movs	r3, r0
 80027ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d2:	f7fe fe2f 	bl	8001434 <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e1c8      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e4:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_RCC_OscConfig+0x330>)
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	2202      	movs	r2, #2
 80027ea:	4013      	ands	r3, r2
 80027ec:	d1f1      	bne.n	80027d2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2204      	movs	r2, #4
 80027f4:	4013      	ands	r3, r2
 80027f6:	d100      	bne.n	80027fa <HAL_RCC_OscConfig+0x29e>
 80027f8:	e0b6      	b.n	8002968 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fa:	231f      	movs	r3, #31
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002802:	4b22      	ldr	r3, [pc, #136]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002804:	69da      	ldr	r2, [r3, #28]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	055b      	lsls	r3, r3, #21
 800280a:	4013      	ands	r3, r2
 800280c:	d111      	bne.n	8002832 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	4b1f      	ldr	r3, [pc, #124]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	0549      	lsls	r1, r1, #21
 8002818:	430a      	orrs	r2, r1
 800281a:	61da      	str	r2, [r3, #28]
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800281e:	69da      	ldr	r2, [r3, #28]
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	055b      	lsls	r3, r3, #21
 8002824:	4013      	ands	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800282a:	231f      	movs	r3, #31
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_OscConfig+0x33c>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4013      	ands	r3, r2
 800283c:	d11a      	bne.n	8002874 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283e:	4b16      	ldr	r3, [pc, #88]	; (8002898 <HAL_RCC_OscConfig+0x33c>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <HAL_RCC_OscConfig+0x33c>)
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	0049      	lsls	r1, r1, #1
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284c:	f7fe fdf2 	bl	8001434 <HAL_GetTick>
 8002850:	0003      	movs	r3, r0
 8002852:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002856:	f7fe fded 	bl	8001434 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b64      	cmp	r3, #100	; 0x64
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e186      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_OscConfig+0x33c>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4013      	ands	r3, r2
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d10f      	bne.n	800289c <HAL_RCC_OscConfig+0x340>
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_RCC_OscConfig+0x330>)
 800287e:	6a1a      	ldr	r2, [r3, #32]
 8002880:	4b02      	ldr	r3, [pc, #8]	; (800288c <HAL_RCC_OscConfig+0x330>)
 8002882:	2101      	movs	r1, #1
 8002884:	430a      	orrs	r2, r1
 8002886:	621a      	str	r2, [r3, #32]
 8002888:	e036      	b.n	80028f8 <HAL_RCC_OscConfig+0x39c>
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	40021000 	.word	0x40021000
 8002890:	fffeffff 	.word	0xfffeffff
 8002894:	fffbffff 	.word	0xfffbffff
 8002898:	40007000 	.word	0x40007000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10c      	bne.n	80028be <HAL_RCC_OscConfig+0x362>
 80028a4:	4bb6      	ldr	r3, [pc, #728]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80028a6:	6a1a      	ldr	r2, [r3, #32]
 80028a8:	4bb5      	ldr	r3, [pc, #724]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80028aa:	2101      	movs	r1, #1
 80028ac:	438a      	bics	r2, r1
 80028ae:	621a      	str	r2, [r3, #32]
 80028b0:	4bb3      	ldr	r3, [pc, #716]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80028b2:	6a1a      	ldr	r2, [r3, #32]
 80028b4:	4bb2      	ldr	r3, [pc, #712]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80028b6:	2104      	movs	r1, #4
 80028b8:	438a      	bics	r2, r1
 80028ba:	621a      	str	r2, [r3, #32]
 80028bc:	e01c      	b.n	80028f8 <HAL_RCC_OscConfig+0x39c>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x384>
 80028c6:	4bae      	ldr	r3, [pc, #696]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80028c8:	6a1a      	ldr	r2, [r3, #32]
 80028ca:	4bad      	ldr	r3, [pc, #692]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80028cc:	2104      	movs	r1, #4
 80028ce:	430a      	orrs	r2, r1
 80028d0:	621a      	str	r2, [r3, #32]
 80028d2:	4bab      	ldr	r3, [pc, #684]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80028d4:	6a1a      	ldr	r2, [r3, #32]
 80028d6:	4baa      	ldr	r3, [pc, #680]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80028d8:	2101      	movs	r1, #1
 80028da:	430a      	orrs	r2, r1
 80028dc:	621a      	str	r2, [r3, #32]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0x39c>
 80028e0:	4ba7      	ldr	r3, [pc, #668]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80028e2:	6a1a      	ldr	r2, [r3, #32]
 80028e4:	4ba6      	ldr	r3, [pc, #664]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80028e6:	2101      	movs	r1, #1
 80028e8:	438a      	bics	r2, r1
 80028ea:	621a      	str	r2, [r3, #32]
 80028ec:	4ba4      	ldr	r3, [pc, #656]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80028ee:	6a1a      	ldr	r2, [r3, #32]
 80028f0:	4ba3      	ldr	r3, [pc, #652]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80028f2:	2104      	movs	r1, #4
 80028f4:	438a      	bics	r2, r1
 80028f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d014      	beq.n	800292a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002900:	f7fe fd98 	bl	8001434 <HAL_GetTick>
 8002904:	0003      	movs	r3, r0
 8002906:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002908:	e009      	b.n	800291e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe fd93 	bl	8001434 <HAL_GetTick>
 800290e:	0002      	movs	r2, r0
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	4a9b      	ldr	r2, [pc, #620]	; (8002b84 <HAL_RCC_OscConfig+0x628>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e12b      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291e:	4b98      	ldr	r3, [pc, #608]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	2202      	movs	r2, #2
 8002924:	4013      	ands	r3, r2
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x3ae>
 8002928:	e013      	b.n	8002952 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292a:	f7fe fd83 	bl	8001434 <HAL_GetTick>
 800292e:	0003      	movs	r3, r0
 8002930:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002932:	e009      	b.n	8002948 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7fe fd7e 	bl	8001434 <HAL_GetTick>
 8002938:	0002      	movs	r2, r0
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	4a91      	ldr	r2, [pc, #580]	; (8002b84 <HAL_RCC_OscConfig+0x628>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e116      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002948:	4b8d      	ldr	r3, [pc, #564]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	2202      	movs	r2, #2
 800294e:	4013      	ands	r3, r2
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002952:	231f      	movs	r3, #31
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295c:	4b88      	ldr	r3, [pc, #544]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	4b87      	ldr	r3, [pc, #540]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002962:	4989      	ldr	r1, [pc, #548]	; (8002b88 <HAL_RCC_OscConfig+0x62c>)
 8002964:	400a      	ands	r2, r1
 8002966:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2210      	movs	r2, #16
 800296e:	4013      	ands	r3, r2
 8002970:	d063      	beq.n	8002a3a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d12a      	bne.n	80029d0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800297a:	4b81      	ldr	r3, [pc, #516]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 800297c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800297e:	4b80      	ldr	r3, [pc, #512]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002980:	2104      	movs	r1, #4
 8002982:	430a      	orrs	r2, r1
 8002984:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002986:	4b7e      	ldr	r3, [pc, #504]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800298a:	4b7d      	ldr	r3, [pc, #500]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 800298c:	2101      	movs	r1, #1
 800298e:	430a      	orrs	r2, r1
 8002990:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002992:	f7fe fd4f 	bl	8001434 <HAL_GetTick>
 8002996:	0003      	movs	r3, r0
 8002998:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800299c:	f7fe fd4a 	bl	8001434 <HAL_GetTick>
 80029a0:	0002      	movs	r2, r0
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e0e3      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029ae:	4b74      	ldr	r3, [pc, #464]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80029b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b2:	2202      	movs	r2, #2
 80029b4:	4013      	ands	r3, r2
 80029b6:	d0f1      	beq.n	800299c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029b8:	4b71      	ldr	r3, [pc, #452]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80029ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029bc:	22f8      	movs	r2, #248	; 0xf8
 80029be:	4393      	bics	r3, r2
 80029c0:	0019      	movs	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	00da      	lsls	r2, r3, #3
 80029c8:	4b6d      	ldr	r3, [pc, #436]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80029ca:	430a      	orrs	r2, r1
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34
 80029ce:	e034      	b.n	8002a3a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	3305      	adds	r3, #5
 80029d6:	d111      	bne.n	80029fc <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80029d8:	4b69      	ldr	r3, [pc, #420]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80029da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029dc:	4b68      	ldr	r3, [pc, #416]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80029de:	2104      	movs	r1, #4
 80029e0:	438a      	bics	r2, r1
 80029e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029e4:	4b66      	ldr	r3, [pc, #408]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80029e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e8:	22f8      	movs	r2, #248	; 0xf8
 80029ea:	4393      	bics	r3, r2
 80029ec:	0019      	movs	r1, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	00da      	lsls	r2, r3, #3
 80029f4:	4b62      	ldr	r3, [pc, #392]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80029f6:	430a      	orrs	r2, r1
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34
 80029fa:	e01e      	b.n	8002a3a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029fc:	4b60      	ldr	r3, [pc, #384]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 80029fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a00:	4b5f      	ldr	r3, [pc, #380]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002a02:	2104      	movs	r1, #4
 8002a04:	430a      	orrs	r2, r1
 8002a06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a08:	4b5d      	ldr	r3, [pc, #372]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0c:	4b5c      	ldr	r3, [pc, #368]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	438a      	bics	r2, r1
 8002a12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a14:	f7fe fd0e 	bl	8001434 <HAL_GetTick>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a1e:	f7fe fd09 	bl	8001434 <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e0a2      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a30:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	2202      	movs	r2, #2
 8002a36:	4013      	ands	r3, r2
 8002a38:	d1f1      	bne.n	8002a1e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d100      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4e8>
 8002a42:	e097      	b.n	8002b74 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a44:	4b4e      	ldr	r3, [pc, #312]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	220c      	movs	r2, #12
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d100      	bne.n	8002a52 <HAL_RCC_OscConfig+0x4f6>
 8002a50:	e06b      	b.n	8002b2a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d14c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b49      	ldr	r3, [pc, #292]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4b48      	ldr	r3, [pc, #288]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002a60:	494a      	ldr	r1, [pc, #296]	; (8002b8c <HAL_RCC_OscConfig+0x630>)
 8002a62:	400a      	ands	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe fce5 	bl	8001434 <HAL_GetTick>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a70:	f7fe fce0 	bl	8001434 <HAL_GetTick>
 8002a74:	0002      	movs	r2, r0
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e079      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a82:	4b3f      	ldr	r3, [pc, #252]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	049b      	lsls	r3, r3, #18
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a8e:	4b3c      	ldr	r3, [pc, #240]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	220f      	movs	r2, #15
 8002a94:	4393      	bics	r3, r2
 8002a96:	0019      	movs	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9c:	4b38      	ldr	r3, [pc, #224]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aa2:	4b37      	ldr	r3, [pc, #220]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4a3a      	ldr	r2, [pc, #232]	; (8002b90 <HAL_RCC_OscConfig+0x634>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	0019      	movs	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	4b32      	ldr	r3, [pc, #200]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b2f      	ldr	r3, [pc, #188]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002ac2:	2180      	movs	r1, #128	; 0x80
 8002ac4:	0449      	lsls	r1, r1, #17
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7fe fcb3 	bl	8001434 <HAL_GetTick>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe fcae 	bl	8001434 <HAL_GetTick>
 8002ad8:	0002      	movs	r2, r0
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e047      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae6:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	049b      	lsls	r3, r3, #18
 8002aee:	4013      	ands	r3, r2
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x578>
 8002af2:	e03f      	b.n	8002b74 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af4:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002afa:	4924      	ldr	r1, [pc, #144]	; (8002b8c <HAL_RCC_OscConfig+0x630>)
 8002afc:	400a      	ands	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe fc98 	bl	8001434 <HAL_GetTick>
 8002b04:	0003      	movs	r3, r0
 8002b06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0a:	f7fe fc93 	bl	8001434 <HAL_GetTick>
 8002b0e:	0002      	movs	r2, r0
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e02c      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	049b      	lsls	r3, r3, #18
 8002b24:	4013      	ands	r3, r2
 8002b26:	d1f0      	bne.n	8002b0a <HAL_RCC_OscConfig+0x5ae>
 8002b28:	e024      	b.n	8002b74 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e01f      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b36:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b3c:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_RCC_OscConfig+0x624>)
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	025b      	lsls	r3, r3, #9
 8002b48:	401a      	ands	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d10e      	bne.n	8002b70 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	220f      	movs	r2, #15
 8002b56:	401a      	ands	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d107      	bne.n	8002b70 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	23f0      	movs	r3, #240	; 0xf0
 8002b64:	039b      	lsls	r3, r3, #14
 8002b66:	401a      	ands	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b008      	add	sp, #32
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	40021000 	.word	0x40021000
 8002b84:	00001388 	.word	0x00001388
 8002b88:	efffffff 	.word	0xefffffff
 8002b8c:	feffffff 	.word	0xfeffffff
 8002b90:	ffc2ffff 	.word	0xffc2ffff

08002b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0b3      	b.n	8002d10 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b5b      	ldr	r3, [pc, #364]	; (8002d18 <HAL_RCC_ClockConfig+0x184>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2201      	movs	r2, #1
 8002bae:	4013      	ands	r3, r2
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d911      	bls.n	8002bda <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <HAL_RCC_ClockConfig+0x184>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4393      	bics	r3, r2
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <HAL_RCC_ClockConfig+0x184>)
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc8:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <HAL_RCC_ClockConfig+0x184>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	4013      	ands	r3, r2
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d001      	beq.n	8002bda <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e09a      	b.n	8002d10 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2202      	movs	r2, #2
 8002be0:	4013      	ands	r3, r2
 8002be2:	d015      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2204      	movs	r2, #4
 8002bea:	4013      	ands	r3, r2
 8002bec:	d006      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002bee:	4b4b      	ldr	r3, [pc, #300]	; (8002d1c <HAL_RCC_ClockConfig+0x188>)
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	4b4a      	ldr	r3, [pc, #296]	; (8002d1c <HAL_RCC_ClockConfig+0x188>)
 8002bf4:	21e0      	movs	r1, #224	; 0xe0
 8002bf6:	00c9      	lsls	r1, r1, #3
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bfc:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_RCC_ClockConfig+0x188>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	22f0      	movs	r2, #240	; 0xf0
 8002c02:	4393      	bics	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	4b44      	ldr	r3, [pc, #272]	; (8002d1c <HAL_RCC_ClockConfig+0x188>)
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2201      	movs	r2, #1
 8002c16:	4013      	ands	r3, r2
 8002c18:	d040      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	4b3e      	ldr	r3, [pc, #248]	; (8002d1c <HAL_RCC_ClockConfig+0x188>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	029b      	lsls	r3, r3, #10
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d114      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e06e      	b.n	8002d10 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3a:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <HAL_RCC_ClockConfig+0x188>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	049b      	lsls	r3, r3, #18
 8002c42:	4013      	ands	r3, r2
 8002c44:	d108      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e062      	b.n	8002d10 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_RCC_ClockConfig+0x188>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	4013      	ands	r3, r2
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e05b      	b.n	8002d10 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c58:	4b30      	ldr	r3, [pc, #192]	; (8002d1c <HAL_RCC_ClockConfig+0x188>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	4393      	bics	r3, r2
 8002c60:	0019      	movs	r1, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <HAL_RCC_ClockConfig+0x188>)
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fbe2 	bl	8001434 <HAL_GetTick>
 8002c70:	0003      	movs	r3, r0
 8002c72:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c74:	e009      	b.n	8002c8a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c76:	f7fe fbdd 	bl	8001434 <HAL_GetTick>
 8002c7a:	0002      	movs	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <HAL_RCC_ClockConfig+0x18c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e042      	b.n	8002d10 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_ClockConfig+0x188>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	220c      	movs	r2, #12
 8002c90:	401a      	ands	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1ec      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <HAL_RCC_ClockConfig+0x184>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d211      	bcs.n	8002cce <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCC_ClockConfig+0x184>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4393      	bics	r3, r2
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <HAL_RCC_ClockConfig+0x184>)
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbc:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <HAL_RCC_ClockConfig+0x184>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e020      	b.n	8002d10 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d009      	beq.n	8002cec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <HAL_RCC_ClockConfig+0x188>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a11      	ldr	r2, [pc, #68]	; (8002d24 <HAL_RCC_ClockConfig+0x190>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	0019      	movs	r1, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <HAL_RCC_ClockConfig+0x188>)
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cec:	f000 f820 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cf0:	0001      	movs	r1, r0
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_RCC_ClockConfig+0x188>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	220f      	movs	r2, #15
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <HAL_RCC_ClockConfig+0x194>)
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	000a      	movs	r2, r1
 8002d02:	40da      	lsrs	r2, r3
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x198>)
 8002d06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7fe fb4d 	bl	80013a8 <HAL_InitTick>
  
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b004      	add	sp, #16
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40022000 	.word	0x40022000
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	00001388 	.word	0x00001388
 8002d24:	fffff8ff 	.word	0xfffff8ff
 8002d28:	080046f0 	.word	0x080046f0
 8002d2c:	20000008 	.word	0x20000008

08002d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b08f      	sub	sp, #60	; 0x3c
 8002d34:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002d36:	2314      	movs	r3, #20
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	4a2b      	ldr	r2, [pc, #172]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d3e:	c313      	stmia	r3!, {r0, r1, r4}
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	4a29      	ldr	r2, [pc, #164]	; (8002dec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d4a:	c313      	stmia	r3!, {r0, r1, r4}
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d54:	2300      	movs	r3, #0
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d58:	2300      	movs	r3, #0
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002d64:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	220c      	movs	r2, #12
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d002      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0x4a>
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d003      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x50>
 8002d78:	e02d      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d7e:	e02d      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	0c9b      	lsrs	r3, r3, #18
 8002d84:	220f      	movs	r2, #15
 8002d86:	4013      	ands	r3, r2
 8002d88:	2214      	movs	r2, #20
 8002d8a:	18ba      	adds	r2, r7, r2
 8002d8c:	5cd3      	ldrb	r3, [r2, r3]
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d90:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	220f      	movs	r2, #15
 8002d96:	4013      	ands	r3, r2
 8002d98:	1d3a      	adds	r2, r7, #4
 8002d9a:	5cd3      	ldrb	r3, [r2, r3]
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	025b      	lsls	r3, r3, #9
 8002da4:	4013      	ands	r3, r2
 8002da6:	d009      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002daa:	4812      	ldr	r0, [pc, #72]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dac:	f7fd f9ac 	bl	8000108 <__udivsi3>
 8002db0:	0003      	movs	r3, r0
 8002db2:	001a      	movs	r2, r3
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	4353      	muls	r3, r2
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dba:	e009      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dbe:	000a      	movs	r2, r1
 8002dc0:	0152      	lsls	r2, r2, #5
 8002dc2:	1a52      	subs	r2, r2, r1
 8002dc4:	0193      	lsls	r3, r2, #6
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	185b      	adds	r3, r3, r1
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dd4:	e002      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dd8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dda:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002dde:	0018      	movs	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b00f      	add	sp, #60	; 0x3c
 8002de4:	bd90      	pop	{r4, r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	0800466c 	.word	0x0800466c
 8002dec:	0800467c 	.word	0x0800467c
 8002df0:	40021000 	.word	0x40021000
 8002df4:	007a1200 	.word	0x007a1200

08002df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	025b      	lsls	r3, r3, #9
 8002e10:	4013      	ands	r3, r2
 8002e12:	d100      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002e14:	e08f      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2317      	movs	r3, #23
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b5f      	ldr	r3, [pc, #380]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	055b      	lsls	r3, r3, #21
 8002e26:	4013      	ands	r3, r2
 8002e28:	d111      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b5c      	ldr	r3, [pc, #368]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	4b5b      	ldr	r3, [pc, #364]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e30:	2180      	movs	r1, #128	; 0x80
 8002e32:	0549      	lsls	r1, r1, #21
 8002e34:	430a      	orrs	r2, r1
 8002e36:	61da      	str	r2, [r3, #28]
 8002e38:	4b58      	ldr	r3, [pc, #352]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	055b      	lsls	r3, r3, #21
 8002e40:	4013      	ands	r3, r2
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e46:	2317      	movs	r3, #23
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4e:	4b54      	ldr	r3, [pc, #336]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4013      	ands	r3, r2
 8002e58:	d11a      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e5a:	4b51      	ldr	r3, [pc, #324]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	0049      	lsls	r1, r1, #1
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e68:	f7fe fae4 	bl	8001434 <HAL_GetTick>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	e008      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e72:	f7fe fadf 	bl	8001434 <HAL_GetTick>
 8002e76:	0002      	movs	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b64      	cmp	r3, #100	; 0x64
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e087      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	4b46      	ldr	r3, [pc, #280]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e90:	4b42      	ldr	r3, [pc, #264]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	23c0      	movs	r3, #192	; 0xc0
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d034      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	23c0      	movs	r3, #192	; 0xc0
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d02c      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eb2:	4b3a      	ldr	r3, [pc, #232]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a3b      	ldr	r2, [pc, #236]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ebc:	4b37      	ldr	r3, [pc, #220]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ec2:	2180      	movs	r1, #128	; 0x80
 8002ec4:	0249      	lsls	r1, r1, #9
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eca:	4b34      	ldr	r3, [pc, #208]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
 8002ece:	4b33      	ldr	r3, [pc, #204]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ed0:	4935      	ldr	r1, [pc, #212]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ed2:	400a      	ands	r2, r1
 8002ed4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ed6:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d013      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fe faa6 	bl	8001434 <HAL_GetTick>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	e009      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fe faa1 	bl	8001434 <HAL_GetTick>
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	4a2c      	ldr	r2, [pc, #176]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e048      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f02:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	2202      	movs	r2, #2
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f0c:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4a24      	ldr	r2, [pc, #144]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f20:	2317      	movs	r3, #23
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d105      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f30:	491f      	ldr	r1, [pc, #124]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f32:	400a      	ands	r2, r1
 8002f34:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d009      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f40:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	2203      	movs	r2, #3
 8002f46:	4393      	bics	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f50:	430a      	orrs	r2, r1
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	2210      	movs	r2, #16
 8002f64:	4393      	bics	r3, r2
 8002f66:	0019      	movs	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d009      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f7e:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	2240      	movs	r2, #64	; 0x40
 8002f84:	4393      	bics	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b006      	add	sp, #24
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	fffffcff 	.word	0xfffffcff
 8002fa8:	fffeffff 	.word	0xfffeffff
 8002fac:	00001388 	.word	0x00001388
 8002fb0:	efffffff 	.word	0xefffffff

08002fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e01e      	b.n	8003004 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	223d      	movs	r2, #61	; 0x3d
 8002fca:	5c9b      	ldrb	r3, [r3, r2]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d107      	bne.n	8002fe2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	223c      	movs	r2, #60	; 0x3c
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7fd ff07 	bl	8000df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	223d      	movs	r2, #61	; 0x3d
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	0010      	movs	r0, r2
 8002ff6:	f000 fb9d 	bl	8003734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	223d      	movs	r2, #61	; 0x3d
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	0018      	movs	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	b002      	add	sp, #8
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2101      	movs	r1, #1
 8003020:	430a      	orrs	r2, r1
 8003022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2207      	movs	r2, #7
 800302c:	4013      	ands	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b06      	cmp	r3, #6
 8003034:	d007      	beq.n	8003046 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2101      	movs	r1, #1
 8003042:	430a      	orrs	r2, r1
 8003044:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	b004      	add	sp, #16
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e01e      	b.n	80030a0 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	223d      	movs	r2, #61	; 0x3d
 8003066:	5c9b      	ldrb	r3, [r3, r2]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	223c      	movs	r2, #60	; 0x3c
 8003072:	2100      	movs	r1, #0
 8003074:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0018      	movs	r0, r3
 800307a:	f7fd fef7 	bl	8000e6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	223d      	movs	r2, #61	; 0x3d
 8003082:	2102      	movs	r1, #2
 8003084:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3304      	adds	r3, #4
 800308e:	0019      	movs	r1, r3
 8003090:	0010      	movs	r0, r2
 8003092:	f000 fb4f 	bl	8003734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	223d      	movs	r2, #61	; 0x3d
 800309a:	2101      	movs	r1, #1
 800309c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6839      	ldr	r1, [r7, #0]
 80030b8:	2201      	movs	r2, #1
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 fe50 	bl	8003d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1a      	ldr	r2, [pc, #104]	; (8003130 <HAL_TIM_PWM_Start+0x88>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00e      	beq.n	80030e8 <HAL_TIM_PWM_Start+0x40>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a19      	ldr	r2, [pc, #100]	; (8003134 <HAL_TIM_PWM_Start+0x8c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d009      	beq.n	80030e8 <HAL_TIM_PWM_Start+0x40>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a17      	ldr	r2, [pc, #92]	; (8003138 <HAL_TIM_PWM_Start+0x90>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <HAL_TIM_PWM_Start+0x40>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a16      	ldr	r2, [pc, #88]	; (800313c <HAL_TIM_PWM_Start+0x94>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d101      	bne.n	80030ec <HAL_TIM_PWM_Start+0x44>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <HAL_TIM_PWM_Start+0x46>
 80030ec:	2300      	movs	r3, #0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2180      	movs	r1, #128	; 0x80
 80030fe:	0209      	lsls	r1, r1, #8
 8003100:	430a      	orrs	r2, r1
 8003102:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2207      	movs	r2, #7
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b06      	cmp	r3, #6
 8003114:	d007      	beq.n	8003126 <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2101      	movs	r1, #1
 8003122:	430a      	orrs	r2, r1
 8003124:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b004      	add	sp, #16
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40014000 	.word	0x40014000
 8003138:	40014400 	.word	0x40014400
 800313c:	40014800 	.word	0x40014800

08003140 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e02e      	b.n	80031b2 <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	223d      	movs	r2, #61	; 0x3d
 8003158:	5c9b      	ldrb	r3, [r3, r2]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	223c      	movs	r2, #60	; 0x3c
 8003164:	2100      	movs	r1, #0
 8003166:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	0018      	movs	r0, r3
 800316c:	f000 f825 	bl	80031ba <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	223d      	movs	r2, #61	; 0x3d
 8003174:	2102      	movs	r1, #2
 8003176:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	0019      	movs	r1, r3
 8003182:	0010      	movs	r0, r2
 8003184:	f000 fad6 	bl	8003734 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2108      	movs	r1, #8
 8003194:	438a      	bics	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6819      	ldr	r1, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	223d      	movs	r2, #61	; 0x3d
 80031ac:	2101      	movs	r1, #1
 80031ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b002      	add	sp, #8
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b002      	add	sp, #8
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	2202      	movs	r2, #2
 80031da:	4013      	ands	r3, r2
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d124      	bne.n	800322a <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2202      	movs	r2, #2
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d11d      	bne.n	800322a <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2203      	movs	r2, #3
 80031f4:	4252      	negs	r2, r2
 80031f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2203      	movs	r2, #3
 8003206:	4013      	ands	r3, r2
 8003208:	d004      	beq.n	8003214 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0018      	movs	r0, r3
 800320e:	f000 fa79 	bl	8003704 <HAL_TIM_IC_CaptureCallback>
 8003212:	e007      	b.n	8003224 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	0018      	movs	r0, r3
 8003218:	f000 fa6c 	bl	80036f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	0018      	movs	r0, r3
 8003220:	f000 fa78 	bl	8003714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2204      	movs	r2, #4
 8003232:	4013      	ands	r3, r2
 8003234:	2b04      	cmp	r3, #4
 8003236:	d125      	bne.n	8003284 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2204      	movs	r2, #4
 8003240:	4013      	ands	r3, r2
 8003242:	2b04      	cmp	r3, #4
 8003244:	d11e      	bne.n	8003284 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2205      	movs	r2, #5
 800324c:	4252      	negs	r2, r2
 800324e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699a      	ldr	r2, [r3, #24]
 800325c:	23c0      	movs	r3, #192	; 0xc0
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4013      	ands	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	0018      	movs	r0, r3
 8003268:	f000 fa4c 	bl	8003704 <HAL_TIM_IC_CaptureCallback>
 800326c:	e007      	b.n	800327e <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f000 fa3f 	bl	80036f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0018      	movs	r0, r3
 800327a:	f000 fa4b 	bl	8003714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2208      	movs	r2, #8
 800328c:	4013      	ands	r3, r2
 800328e:	2b08      	cmp	r3, #8
 8003290:	d124      	bne.n	80032dc <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2208      	movs	r2, #8
 800329a:	4013      	ands	r3, r2
 800329c:	2b08      	cmp	r3, #8
 800329e:	d11d      	bne.n	80032dc <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2209      	movs	r2, #9
 80032a6:	4252      	negs	r2, r2
 80032a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2204      	movs	r2, #4
 80032ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	2203      	movs	r2, #3
 80032b8:	4013      	ands	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	0018      	movs	r0, r3
 80032c0:	f000 fa20 	bl	8003704 <HAL_TIM_IC_CaptureCallback>
 80032c4:	e007      	b.n	80032d6 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 fa13 	bl	80036f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 fa1f 	bl	8003714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2210      	movs	r2, #16
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d125      	bne.n	8003336 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2210      	movs	r2, #16
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d11e      	bne.n	8003336 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2211      	movs	r2, #17
 80032fe:	4252      	negs	r2, r2
 8003300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2208      	movs	r2, #8
 8003306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	23c0      	movs	r3, #192	; 0xc0
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4013      	ands	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0018      	movs	r0, r3
 800331a:	f000 f9f3 	bl	8003704 <HAL_TIM_IC_CaptureCallback>
 800331e:	e007      	b.n	8003330 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	0018      	movs	r0, r3
 8003324:	f000 f9e6 	bl	80036f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	0018      	movs	r0, r3
 800332c:	f000 f9f2 	bl	8003714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2201      	movs	r2, #1
 800333e:	4013      	ands	r3, r2
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10f      	bne.n	8003364 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	4013      	ands	r3, r2
 800334e:	2b01      	cmp	r3, #1
 8003350:	d108      	bne.n	8003364 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2202      	movs	r2, #2
 8003358:	4252      	negs	r2, r2
 800335a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	0018      	movs	r0, r3
 8003360:	f000 f9c0 	bl	80036e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2280      	movs	r2, #128	; 0x80
 800336c:	4013      	ands	r3, r2
 800336e:	2b80      	cmp	r3, #128	; 0x80
 8003370:	d10f      	bne.n	8003392 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	4013      	ands	r3, r2
 800337c:	2b80      	cmp	r3, #128	; 0x80
 800337e:	d108      	bne.n	8003392 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2281      	movs	r2, #129	; 0x81
 8003386:	4252      	negs	r2, r2
 8003388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0018      	movs	r0, r3
 800338e:	f000 fdcf 	bl	8003f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2240      	movs	r2, #64	; 0x40
 800339a:	4013      	ands	r3, r2
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d10f      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2240      	movs	r2, #64	; 0x40
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d108      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2241      	movs	r2, #65	; 0x41
 80033b4:	4252      	negs	r2, r2
 80033b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 f9b2 	bl	8003724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	2220      	movs	r2, #32
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d10f      	bne.n	80033ee <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d108      	bne.n	80033ee <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2221      	movs	r2, #33	; 0x21
 80033e2:	4252      	negs	r2, r2
 80033e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f000 fd99 	bl	8003f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b002      	add	sp, #8
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	223c      	movs	r2, #60	; 0x3c
 8003408:	5c9b      	ldrb	r3, [r3, r2]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800340e:	2302      	movs	r3, #2
 8003410:	e0a4      	b.n	800355c <HAL_TIM_PWM_ConfigChannel+0x164>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	223c      	movs	r2, #60	; 0x3c
 8003416:	2101      	movs	r1, #1
 8003418:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	223d      	movs	r2, #61	; 0x3d
 800341e:	2102      	movs	r1, #2
 8003420:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b04      	cmp	r3, #4
 8003426:	d029      	beq.n	800347c <HAL_TIM_PWM_ConfigChannel+0x84>
 8003428:	d802      	bhi.n	8003430 <HAL_TIM_PWM_ConfigChannel+0x38>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800342e:	e08c      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8003430:	2b08      	cmp	r3, #8
 8003432:	d046      	beq.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8003434:	2b0c      	cmp	r3, #12
 8003436:	d065      	beq.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8003438:	e087      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	0011      	movs	r1, r2
 8003442:	0018      	movs	r0, r3
 8003444:	f000 f9f6 	bl	8003834 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2108      	movs	r1, #8
 8003454:	430a      	orrs	r2, r1
 8003456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2104      	movs	r1, #4
 8003464:	438a      	bics	r2, r1
 8003466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6999      	ldr	r1, [r3, #24]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	619a      	str	r2, [r3, #24]
      break;
 800347a:	e066      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	0011      	movs	r1, r2
 8003484:	0018      	movs	r0, r3
 8003486:	f000 fa5d 	bl	8003944 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	0109      	lsls	r1, r1, #4
 8003498:	430a      	orrs	r2, r1
 800349a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	492f      	ldr	r1, [pc, #188]	; (8003564 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80034a8:	400a      	ands	r2, r1
 80034aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6999      	ldr	r1, [r3, #24]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	021a      	lsls	r2, r3, #8
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	619a      	str	r2, [r3, #24]
      break;
 80034c0:	e043      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 fabe 	bl	8003a4c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2108      	movs	r1, #8
 80034dc:	430a      	orrs	r2, r1
 80034de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2104      	movs	r1, #4
 80034ec:	438a      	bics	r2, r1
 80034ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69d9      	ldr	r1, [r3, #28]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	61da      	str	r2, [r3, #28]
      break;
 8003502:	e022      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	0011      	movs	r1, r2
 800350c:	0018      	movs	r0, r3
 800350e:	f000 fb23 	bl	8003b58 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2180      	movs	r1, #128	; 0x80
 800351e:	0109      	lsls	r1, r1, #4
 8003520:	430a      	orrs	r2, r1
 8003522:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	490d      	ldr	r1, [pc, #52]	; (8003564 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003530:	400a      	ands	r2, r1
 8003532:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69d9      	ldr	r1, [r3, #28]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	021a      	lsls	r2, r3, #8
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	61da      	str	r2, [r3, #28]
      break;
 8003548:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	223d      	movs	r2, #61	; 0x3d
 800354e:	2101      	movs	r1, #1
 8003550:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	223c      	movs	r2, #60	; 0x3c
 8003556:	2100      	movs	r1, #0
 8003558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b004      	add	sp, #16
 8003562:	bd80      	pop	{r7, pc}
 8003564:	fffffbff 	.word	0xfffffbff

08003568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	223c      	movs	r2, #60	; 0x3c
 8003576:	5c9b      	ldrb	r3, [r3, r2]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_TIM_ConfigClockSource+0x18>
 800357c:	2302      	movs	r3, #2
 800357e:	e0ab      	b.n	80036d8 <HAL_TIM_ConfigClockSource+0x170>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	223c      	movs	r2, #60	; 0x3c
 8003584:	2101      	movs	r1, #1
 8003586:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	223d      	movs	r2, #61	; 0x3d
 800358c:	2102      	movs	r1, #2
 800358e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2277      	movs	r2, #119	; 0x77
 800359c:	4393      	bics	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4a4f      	ldr	r2, [pc, #316]	; (80036e0 <HAL_TIM_ConfigClockSource+0x178>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d100      	bne.n	80035ba <HAL_TIM_ConfigClockSource+0x52>
 80035b8:	e06b      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x12a>
 80035ba:	d80e      	bhi.n	80035da <HAL_TIM_ConfigClockSource+0x72>
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d100      	bne.n	80035c2 <HAL_TIM_ConfigClockSource+0x5a>
 80035c0:	e077      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x14a>
 80035c2:	d803      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x64>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d100      	bne.n	80035ca <HAL_TIM_ConfigClockSource+0x62>
 80035c8:	e073      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80035ca:	e07c      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d100      	bne.n	80035d2 <HAL_TIM_ConfigClockSource+0x6a>
 80035d0:	e06f      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x14a>
 80035d2:	2b30      	cmp	r3, #48	; 0x30
 80035d4:	d100      	bne.n	80035d8 <HAL_TIM_ConfigClockSource+0x70>
 80035d6:	e06c      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80035d8:	e075      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80035da:	2b70      	cmp	r3, #112	; 0x70
 80035dc:	d00e      	beq.n	80035fc <HAL_TIM_ConfigClockSource+0x94>
 80035de:	d804      	bhi.n	80035ea <HAL_TIM_ConfigClockSource+0x82>
 80035e0:	2b50      	cmp	r3, #80	; 0x50
 80035e2:	d036      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0xea>
 80035e4:	2b60      	cmp	r3, #96	; 0x60
 80035e6:	d044      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80035e8:	e06d      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80035ea:	2280      	movs	r2, #128	; 0x80
 80035ec:	0152      	lsls	r2, r2, #5
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d068      	beq.n	80036c4 <HAL_TIM_ConfigClockSource+0x15c>
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	0192      	lsls	r2, r2, #6
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d017      	beq.n	800362a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80035fa:	e064      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6899      	ldr	r1, [r3, #8]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f000 fb88 	bl	8003d20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2277      	movs	r2, #119	; 0x77
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	609a      	str	r2, [r3, #8]
      break;
 8003628:	e04d      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6899      	ldr	r1, [r3, #8]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f000 fb71 	bl	8003d20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2180      	movs	r1, #128	; 0x80
 800364a:	01c9      	lsls	r1, r1, #7
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
      break;
 8003650:	e039      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	001a      	movs	r2, r3
 8003660:	f000 fae4 	bl	8003c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2150      	movs	r1, #80	; 0x50
 800366a:	0018      	movs	r0, r3
 800366c:	f000 fb3e 	bl	8003cec <TIM_ITRx_SetConfig>
      break;
 8003670:	e029      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6859      	ldr	r1, [r3, #4]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	001a      	movs	r2, r3
 8003680:	f000 fb02 	bl	8003c88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2160      	movs	r1, #96	; 0x60
 800368a:	0018      	movs	r0, r3
 800368c:	f000 fb2e 	bl	8003cec <TIM_ITRx_SetConfig>
      break;
 8003690:	e019      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	001a      	movs	r2, r3
 80036a0:	f000 fac4 	bl	8003c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2140      	movs	r1, #64	; 0x40
 80036aa:	0018      	movs	r0, r3
 80036ac:	f000 fb1e 	bl	8003cec <TIM_ITRx_SetConfig>
      break;
 80036b0:	e009      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	0019      	movs	r1, r3
 80036bc:	0010      	movs	r0, r2
 80036be:	f000 fb15 	bl	8003cec <TIM_ITRx_SetConfig>
      break;
 80036c2:	e000      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80036c4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	223d      	movs	r2, #61	; 0x3d
 80036ca:	2101      	movs	r1, #1
 80036cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	223c      	movs	r2, #60	; 0x3c
 80036d2:	2100      	movs	r1, #0
 80036d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	0018      	movs	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	b004      	add	sp, #16
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	ffff00ff 	.word	0xffff00ff

080036e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b002      	add	sp, #8
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b002      	add	sp, #8
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800372c:	46c0      	nop			; (mov r8, r8)
 800372e:	46bd      	mov	sp, r7
 8003730:	b002      	add	sp, #8
 8003732:	bd80      	pop	{r7, pc}

08003734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a34      	ldr	r2, [pc, #208]	; (8003818 <TIM_Base_SetConfig+0xe4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d008      	beq.n	800375e <TIM_Base_SetConfig+0x2a>
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	05db      	lsls	r3, r3, #23
 8003752:	429a      	cmp	r2, r3
 8003754:	d003      	beq.n	800375e <TIM_Base_SetConfig+0x2a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a30      	ldr	r2, [pc, #192]	; (800381c <TIM_Base_SetConfig+0xe8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d108      	bne.n	8003770 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2270      	movs	r2, #112	; 0x70
 8003762:	4393      	bics	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a29      	ldr	r2, [pc, #164]	; (8003818 <TIM_Base_SetConfig+0xe4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d018      	beq.n	80037aa <TIM_Base_SetConfig+0x76>
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	05db      	lsls	r3, r3, #23
 800377e:	429a      	cmp	r2, r3
 8003780:	d013      	beq.n	80037aa <TIM_Base_SetConfig+0x76>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a25      	ldr	r2, [pc, #148]	; (800381c <TIM_Base_SetConfig+0xe8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00f      	beq.n	80037aa <TIM_Base_SetConfig+0x76>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a24      	ldr	r2, [pc, #144]	; (8003820 <TIM_Base_SetConfig+0xec>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00b      	beq.n	80037aa <TIM_Base_SetConfig+0x76>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a23      	ldr	r2, [pc, #140]	; (8003824 <TIM_Base_SetConfig+0xf0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d007      	beq.n	80037aa <TIM_Base_SetConfig+0x76>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a22      	ldr	r2, [pc, #136]	; (8003828 <TIM_Base_SetConfig+0xf4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d003      	beq.n	80037aa <TIM_Base_SetConfig+0x76>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a21      	ldr	r2, [pc, #132]	; (800382c <TIM_Base_SetConfig+0xf8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d108      	bne.n	80037bc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a20      	ldr	r2, [pc, #128]	; (8003830 <TIM_Base_SetConfig+0xfc>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2280      	movs	r2, #128	; 0x80
 80037c0:	4393      	bics	r3, r2
 80037c2:	001a      	movs	r2, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <TIM_Base_SetConfig+0xe4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00b      	beq.n	8003802 <TIM_Base_SetConfig+0xce>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <TIM_Base_SetConfig+0xf0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <TIM_Base_SetConfig+0xce>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a0c      	ldr	r2, [pc, #48]	; (8003828 <TIM_Base_SetConfig+0xf4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d003      	beq.n	8003802 <TIM_Base_SetConfig+0xce>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a0b      	ldr	r2, [pc, #44]	; (800382c <TIM_Base_SetConfig+0xf8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d103      	bne.n	800380a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	615a      	str	r2, [r3, #20]
}
 8003810:	46c0      	nop			; (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	b004      	add	sp, #16
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40000400 	.word	0x40000400
 8003820:	40002000 	.word	0x40002000
 8003824:	40014000 	.word	0x40014000
 8003828:	40014400 	.word	0x40014400
 800382c:	40014800 	.word	0x40014800
 8003830:	fffffcff 	.word	0xfffffcff

08003834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	2201      	movs	r2, #1
 8003844:	4393      	bics	r3, r2
 8003846:	001a      	movs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2270      	movs	r2, #112	; 0x70
 8003862:	4393      	bics	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2203      	movs	r2, #3
 800386a:	4393      	bics	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2202      	movs	r2, #2
 800387c:	4393      	bics	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a27      	ldr	r2, [pc, #156]	; (800392c <TIM_OC1_SetConfig+0xf8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00b      	beq.n	80038aa <TIM_OC1_SetConfig+0x76>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a26      	ldr	r2, [pc, #152]	; (8003930 <TIM_OC1_SetConfig+0xfc>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <TIM_OC1_SetConfig+0x76>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a25      	ldr	r2, [pc, #148]	; (8003934 <TIM_OC1_SetConfig+0x100>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <TIM_OC1_SetConfig+0x76>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a24      	ldr	r2, [pc, #144]	; (8003938 <TIM_OC1_SetConfig+0x104>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d10c      	bne.n	80038c4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2208      	movs	r2, #8
 80038ae:	4393      	bics	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2204      	movs	r2, #4
 80038c0:	4393      	bics	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a19      	ldr	r2, [pc, #100]	; (800392c <TIM_OC1_SetConfig+0xf8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <TIM_OC1_SetConfig+0xb0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a18      	ldr	r2, [pc, #96]	; (8003930 <TIM_OC1_SetConfig+0xfc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_OC1_SetConfig+0xb0>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a17      	ldr	r2, [pc, #92]	; (8003934 <TIM_OC1_SetConfig+0x100>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_OC1_SetConfig+0xb0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a16      	ldr	r2, [pc, #88]	; (8003938 <TIM_OC1_SetConfig+0x104>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d111      	bne.n	8003908 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4a15      	ldr	r2, [pc, #84]	; (800393c <TIM_OC1_SetConfig+0x108>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4a14      	ldr	r2, [pc, #80]	; (8003940 <TIM_OC1_SetConfig+0x10c>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b006      	add	sp, #24
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40014000 	.word	0x40014000
 8003934:	40014400 	.word	0x40014400
 8003938:	40014800 	.word	0x40014800
 800393c:	fffffeff 	.word	0xfffffeff
 8003940:	fffffdff 	.word	0xfffffdff

08003944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	2210      	movs	r2, #16
 8003954:	4393      	bics	r3, r2
 8003956:	001a      	movs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4a2e      	ldr	r2, [pc, #184]	; (8003a2c <TIM_OC2_SetConfig+0xe8>)
 8003972:	4013      	ands	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4a2d      	ldr	r2, [pc, #180]	; (8003a30 <TIM_OC2_SetConfig+0xec>)
 800397a:	4013      	ands	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2220      	movs	r2, #32
 800398e:	4393      	bics	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a24      	ldr	r2, [pc, #144]	; (8003a34 <TIM_OC2_SetConfig+0xf0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10d      	bne.n	80039c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2280      	movs	r2, #128	; 0x80
 80039aa:	4393      	bics	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2240      	movs	r2, #64	; 0x40
 80039be:	4393      	bics	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <TIM_OC2_SetConfig+0xf0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00b      	beq.n	80039e2 <TIM_OC2_SetConfig+0x9e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a1a      	ldr	r2, [pc, #104]	; (8003a38 <TIM_OC2_SetConfig+0xf4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <TIM_OC2_SetConfig+0x9e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a19      	ldr	r2, [pc, #100]	; (8003a3c <TIM_OC2_SetConfig+0xf8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <TIM_OC2_SetConfig+0x9e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <TIM_OC2_SetConfig+0xfc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d113      	bne.n	8003a0a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4a17      	ldr	r2, [pc, #92]	; (8003a44 <TIM_OC2_SetConfig+0x100>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4a16      	ldr	r2, [pc, #88]	; (8003a48 <TIM_OC2_SetConfig+0x104>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	621a      	str	r2, [r3, #32]
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b006      	add	sp, #24
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	ffff8fff 	.word	0xffff8fff
 8003a30:	fffffcff 	.word	0xfffffcff
 8003a34:	40012c00 	.word	0x40012c00
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800
 8003a44:	fffffbff 	.word	0xfffffbff
 8003a48:	fffff7ff 	.word	0xfffff7ff

08003a4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4a35      	ldr	r2, [pc, #212]	; (8003b30 <TIM_OC3_SetConfig+0xe4>)
 8003a5c:	401a      	ands	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2270      	movs	r2, #112	; 0x70
 8003a78:	4393      	bics	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2203      	movs	r2, #3
 8003a80:	4393      	bics	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	4a28      	ldr	r2, [pc, #160]	; (8003b34 <TIM_OC3_SetConfig+0xe8>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a24      	ldr	r2, [pc, #144]	; (8003b38 <TIM_OC3_SetConfig+0xec>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d10d      	bne.n	8003ac6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	4a23      	ldr	r2, [pc, #140]	; (8003b3c <TIM_OC3_SetConfig+0xf0>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	4a1f      	ldr	r2, [pc, #124]	; (8003b40 <TIM_OC3_SetConfig+0xf4>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <TIM_OC3_SetConfig+0xec>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <TIM_OC3_SetConfig+0x9a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <TIM_OC3_SetConfig+0xf8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_OC3_SetConfig+0x9a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <TIM_OC3_SetConfig+0xfc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_OC3_SetConfig+0x9a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <TIM_OC3_SetConfig+0x100>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d113      	bne.n	8003b0e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4a19      	ldr	r2, [pc, #100]	; (8003b50 <TIM_OC3_SetConfig+0x104>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <TIM_OC3_SetConfig+0x108>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	621a      	str	r2, [r3, #32]
}
 8003b28:	46c0      	nop			; (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b006      	add	sp, #24
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	fffffeff 	.word	0xfffffeff
 8003b34:	fffffdff 	.word	0xfffffdff
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	fffff7ff 	.word	0xfffff7ff
 8003b40:	fffffbff 	.word	0xfffffbff
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40014400 	.word	0x40014400
 8003b4c:	40014800 	.word	0x40014800
 8003b50:	ffffefff 	.word	0xffffefff
 8003b54:	ffffdfff 	.word	0xffffdfff

08003b58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	4a28      	ldr	r2, [pc, #160]	; (8003c08 <TIM_OC4_SetConfig+0xb0>)
 8003b68:	401a      	ands	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <TIM_OC4_SetConfig+0xb4>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <TIM_OC4_SetConfig+0xb8>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <TIM_OC4_SetConfig+0xbc>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	031b      	lsls	r3, r3, #12
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <TIM_OC4_SetConfig+0xc0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <TIM_OC4_SetConfig+0x78>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a18      	ldr	r2, [pc, #96]	; (8003c1c <TIM_OC4_SetConfig+0xc4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <TIM_OC4_SetConfig+0x78>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a17      	ldr	r2, [pc, #92]	; (8003c20 <TIM_OC4_SetConfig+0xc8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_OC4_SetConfig+0x78>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a16      	ldr	r2, [pc, #88]	; (8003c24 <TIM_OC4_SetConfig+0xcc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d109      	bne.n	8003be4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	4a15      	ldr	r2, [pc, #84]	; (8003c28 <TIM_OC4_SetConfig+0xd0>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	019b      	lsls	r3, r3, #6
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b006      	add	sp, #24
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	ffffefff 	.word	0xffffefff
 8003c0c:	ffff8fff 	.word	0xffff8fff
 8003c10:	fffffcff 	.word	0xfffffcff
 8003c14:	ffffdfff 	.word	0xffffdfff
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40014000 	.word	0x40014000
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800
 8003c28:	ffffbfff 	.word	0xffffbfff

08003c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	2201      	movs	r2, #1
 8003c44:	4393      	bics	r3, r2
 8003c46:	001a      	movs	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	22f0      	movs	r2, #240	; 0xf0
 8003c56:	4393      	bics	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	220a      	movs	r2, #10
 8003c68:	4393      	bics	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b006      	add	sp, #24
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	2210      	movs	r2, #16
 8003c9a:	4393      	bics	r3, r2
 8003c9c:	001a      	movs	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4a0d      	ldr	r2, [pc, #52]	; (8003ce8 <TIM_TI2_ConfigInputStage+0x60>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	031b      	lsls	r3, r3, #12
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	22a0      	movs	r2, #160	; 0xa0
 8003cc4:	4393      	bics	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	621a      	str	r2, [r3, #32]
}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b006      	add	sp, #24
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	ffff0fff 	.word	0xffff0fff

08003cec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2270      	movs	r2, #112	; 0x70
 8003d00:	4393      	bics	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	2207      	movs	r2, #7
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	609a      	str	r2, [r3, #8]
}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b004      	add	sp, #16
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <TIM_ETR_SetConfig+0x3c>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	021a      	lsls	r2, r3, #8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	609a      	str	r2, [r3, #8]
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b006      	add	sp, #24
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	ffff00ff 	.word	0xffff00ff

08003d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	221f      	movs	r2, #31
 8003d70:	4013      	ands	r3, r2
 8003d72:	2201      	movs	r2, #1
 8003d74:	409a      	lsls	r2, r3
 8003d76:	0013      	movs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	43d2      	mvns	r2, r2
 8003d82:	401a      	ands	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	211f      	movs	r1, #31
 8003d90:	400b      	ands	r3, r1
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4099      	lsls	r1, r3
 8003d96:	000b      	movs	r3, r1
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b006      	add	sp, #24
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	223c      	movs	r2, #60	; 0x3c
 8003db6:	5c9b      	ldrb	r3, [r3, r2]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e047      	b.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	223c      	movs	r2, #60	; 0x3c
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	223d      	movs	r2, #61	; 0x3d
 8003dcc:	2102      	movs	r1, #2
 8003dce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2270      	movs	r2, #112	; 0x70
 8003de4:	4393      	bics	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a16      	ldr	r2, [pc, #88]	; (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00f      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	2380      	movs	r3, #128	; 0x80
 8003e0a:	05db      	lsls	r3, r3, #23
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d009      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a11      	ldr	r2, [pc, #68]	; (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a10      	ldr	r2, [pc, #64]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10c      	bne.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2280      	movs	r2, #128	; 0x80
 8003e28:	4393      	bics	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	223d      	movs	r2, #61	; 0x3d
 8003e42:	2101      	movs	r1, #1
 8003e44:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	223c      	movs	r2, #60	; 0x3c
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	0018      	movs	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b004      	add	sp, #16
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40014000 	.word	0x40014000

08003e64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	223c      	movs	r2, #60	; 0x3c
 8003e76:	5c9b      	ldrb	r3, [r3, r2]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e03e      	b.n	8003efe <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	223c      	movs	r2, #60	; 0x3c
 8003e84:	2101      	movs	r1, #1
 8003e86:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	22ff      	movs	r2, #255	; 0xff
 8003e8c:	4393      	bics	r3, r2
 8003e8e:	001a      	movs	r2, r3
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003e9c:	401a      	ands	r2, r3
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a18      	ldr	r2, [pc, #96]	; (8003f0c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003eaa:	401a      	ands	r2, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003eb8:	401a      	ands	r2, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4a11      	ldr	r2, [pc, #68]	; (8003f18 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003ed4:	401a      	ands	r2, r3
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	223c      	movs	r2, #60	; 0x3c
 8003ef8:	2100      	movs	r1, #0
 8003efa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b004      	add	sp, #16
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	fffffcff 	.word	0xfffffcff
 8003f0c:	fffffbff 	.word	0xfffffbff
 8003f10:	fffff7ff 	.word	0xfffff7ff
 8003f14:	ffffefff 	.word	0xffffefff
 8003f18:	ffffdfff 	.word	0xffffdfff
 8003f1c:	ffffbfff 	.word	0xffffbfff

08003f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b002      	add	sp, #8
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b002      	add	sp, #8
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6819      	ldr	r1, [r3, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	435a      	muls	r2, r3
 8003f56:	0013      	movs	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	189b      	adds	r3, r3, r2
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	400b      	ands	r3, r1
 8003f60:	001a      	movs	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	434b      	muls	r3, r1
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	434b      	muls	r3, r1
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b004      	add	sp, #16
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	43d2      	mvns	r2, r2
 8003f8e:	401a      	ands	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	434b      	muls	r3, r1
 8003f96:	431a      	orrs	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	605a      	str	r2, [r3, #4]
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b004      	add	sp, #16
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6899      	ldr	r1, [r3, #8]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	435a      	muls	r2, r3
 8003fba:	0013      	movs	r3, r2
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	189b      	adds	r3, r3, r2
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	400b      	ands	r3, r1
 8003fc4:	001a      	movs	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	434b      	muls	r3, r1
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	434b      	muls	r3, r1
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	609a      	str	r2, [r3, #8]
}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b004      	add	sp, #16
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68d9      	ldr	r1, [r3, #12]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	435a      	muls	r2, r3
 8003ff4:	0013      	movs	r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	189b      	adds	r3, r3, r2
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	400b      	ands	r3, r1
 8003ffe:	001a      	movs	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	434b      	muls	r3, r1
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	434b      	muls	r3, r1
 800400a:	431a      	orrs	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	60da      	str	r2, [r3, #12]
}
 8004010:	46c0      	nop			; (mov r8, r8)
 8004012:	46bd      	mov	sp, r7
 8004014:	b004      	add	sp, #16
 8004016:	bd80      	pop	{r7, pc}

08004018 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a19      	ldr	r1, [r3, #32]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	4353      	muls	r3, r2
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4353      	muls	r3, r2
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	435a      	muls	r2, r3
 8004036:	0013      	movs	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	43db      	mvns	r3, r3
 800403e:	400b      	ands	r3, r1
 8004040:	001a      	movs	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	434b      	muls	r3, r1
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	434b      	muls	r3, r1
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	434b      	muls	r3, r1
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	434b      	muls	r3, r1
 8004054:	431a      	orrs	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	46bd      	mov	sp, r7
 800405e:	b004      	add	sp, #16
 8004060:	bd80      	pop	{r7, pc}

08004062 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	0a12      	lsrs	r2, r2, #8
 800407a:	4353      	muls	r3, r2
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	0a12      	lsrs	r2, r2, #8
 8004080:	4353      	muls	r3, r2
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	0a12      	lsrs	r2, r2, #8
 8004086:	435a      	muls	r2, r3
 8004088:	0013      	movs	r3, r2
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	43db      	mvns	r3, r3
 8004090:	400b      	ands	r3, r1
 8004092:	001a      	movs	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	0a09      	lsrs	r1, r1, #8
 800409c:	434b      	muls	r3, r1
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	0a09      	lsrs	r1, r1, #8
 80040a2:	434b      	muls	r3, r1
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	0a09      	lsrs	r1, r1, #8
 80040a8:	434b      	muls	r3, r1
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	434b      	muls	r3, r1
 80040ae:	431a      	orrs	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b004      	add	sp, #16
 80040ba:	bd80      	pop	{r7, pc}

080040bc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80040ca:	e040      	b.n	800414e <LL_GPIO_Init+0x92>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2101      	movs	r1, #1
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4091      	lsls	r1, r2
 80040d6:	000a      	movs	r2, r1
 80040d8:	4013      	ands	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d032      	beq.n	8004148 <LL_GPIO_Init+0x8c>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	0018      	movs	r0, r3
 80040ec:	f7ff ff28 	bl	8003f40 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d003      	beq.n	8004100 <LL_GPIO_Init+0x44>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d106      	bne.n	800410e <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	0018      	movs	r0, r3
 800410a:	f7ff ff4b 	bl	8003fa4 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	0018      	movs	r0, r3
 8004118:	f7ff ff61 	bl	8003fde <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d111      	bne.n	8004148 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2bff      	cmp	r3, #255	; 0xff
 8004128:	d807      	bhi.n	800413a <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	0018      	movs	r0, r3
 8004134:	f7ff ff70 	bl	8004018 <LL_GPIO_SetAFPin_0_7>
 8004138:	e006      	b.n	8004148 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	0018      	movs	r0, r3
 8004144:	f7ff ff8d 	bl	8004062 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3301      	adds	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	40da      	lsrs	r2, r3
 8004156:	1e13      	subs	r3, r2, #0
 8004158:	d1b8      	bne.n	80040cc <LL_GPIO_Init+0x10>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d003      	beq.n	800416a <LL_GPIO_Init+0xae>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d107      	bne.n	800417a <LL_GPIO_Init+0xbe>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	0018      	movs	r0, r3
 8004176:	f7ff ff00 	bl	8003f7a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800417a:	2300      	movs	r3, #0
}
 800417c:	0018      	movs	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	b004      	add	sp, #16
 8004182:	bd80      	pop	{r7, pc}

08004184 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <LL_RCC_HSI_IsReady+0x1c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2202      	movs	r2, #2
 800418e:	4013      	ands	r3, r2
 8004190:	3b02      	subs	r3, #2
 8004192:	425a      	negs	r2, r3
 8004194:	4153      	adcs	r3, r2
 8004196:	b2db      	uxtb	r3, r3
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	40021000 	.word	0x40021000

080041a4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <LL_RCC_LSE_IsReady+0x1c>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	2202      	movs	r2, #2
 80041ae:	4013      	ands	r3, r2
 80041b0:	3b02      	subs	r3, #2
 80041b2:	425a      	negs	r2, r3
 80041b4:	4153      	adcs	r3, r2
 80041b6:	b2db      	uxtb	r3, r3
}
 80041b8:	0018      	movs	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	40021000 	.word	0x40021000

080041c4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <LL_RCC_GetSysClkSource+0x14>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	220c      	movs	r2, #12
 80041ce:	4013      	ands	r3, r2
}
 80041d0:	0018      	movs	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	40021000 	.word	0x40021000

080041dc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80041e0:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <LL_RCC_GetAHBPrescaler+0x14>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	22f0      	movs	r2, #240	; 0xf0
 80041e6:	4013      	ands	r3, r2
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	40021000 	.word	0x40021000

080041f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <LL_RCC_GetAPB1Prescaler+0x14>)
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	23e0      	movs	r3, #224	; 0xe0
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4013      	ands	r3, r2
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000

0800420c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <LL_RCC_GetUSARTClockSource+0x24>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	2103      	movs	r1, #3
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	4091      	lsls	r1, r2
 800421e:	000a      	movs	r2, r1
 8004220:	401a      	ands	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	061b      	lsls	r3, r3, #24
 8004226:	4313      	orrs	r3, r2
}
 8004228:	0018      	movs	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	b002      	add	sp, #8
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40021000 	.word	0x40021000

08004234 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004238:	4b03      	ldr	r3, [pc, #12]	; (8004248 <LL_RCC_PLL_GetMainSource+0x14>)
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	025b      	lsls	r3, r3, #9
 8004240:	4013      	ands	r3, r2
}
 8004242:	0018      	movs	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000

0800424c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8004250:	4b03      	ldr	r3, [pc, #12]	; (8004260 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	23f0      	movs	r3, #240	; 0xf0
 8004256:	039b      	lsls	r3, r3, #14
 8004258:	4013      	ands	r3, r2
}
 800425a:	0018      	movs	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40021000 	.word	0x40021000

08004264 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <LL_RCC_PLL_GetPrediv+0x14>)
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	220f      	movs	r2, #15
 800426e:	4013      	ands	r3, r2
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	40021000 	.word	0x40021000

0800427c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004284:	f000 f85a 	bl	800433c <RCC_GetSystemClockFreq>
 8004288:	0002      	movs	r2, r0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	0018      	movs	r0, r3
 8004294:	f000 f876 	bl	8004384 <RCC_GetHCLKClockFreq>
 8004298:	0002      	movs	r2, r0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	0018      	movs	r0, r3
 80042a4:	f000 f884 	bl	80043b0 <RCC_GetPCLK1ClockFreq>
 80042a8:	0002      	movs	r2, r0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	609a      	str	r2, [r3, #8]
}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b002      	add	sp, #8
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d12b      	bne.n	8004322 <LL_RCC_GetUSARTClockFreq+0x6a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	0018      	movs	r0, r3
 80042ce:	f7ff ff9d 	bl	800420c <LL_RCC_GetUSARTClockSource>
 80042d2:	0003      	movs	r3, r0
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d00f      	beq.n	80042f8 <LL_RCC_GetUSARTClockFreq+0x40>
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d006      	beq.n	80042ea <LL_RCC_GetUSARTClockFreq+0x32>
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d113      	bne.n	8004308 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80042e0:	f000 f82c 	bl	800433c <RCC_GetSystemClockFreq>
 80042e4:	0003      	movs	r3, r0
 80042e6:	60fb      	str	r3, [r7, #12]
        break;
 80042e8:	e020      	b.n	800432c <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80042ea:	f7ff ff4b 	bl	8004184 <LL_RCC_HSI_IsReady>
 80042ee:	1e03      	subs	r3, r0, #0
 80042f0:	d019      	beq.n	8004326 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 80042f2:	4b11      	ldr	r3, [pc, #68]	; (8004338 <LL_RCC_GetUSARTClockFreq+0x80>)
 80042f4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80042f6:	e016      	b.n	8004326 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80042f8:	f7ff ff54 	bl	80041a4 <LL_RCC_LSE_IsReady>
 80042fc:	1e03      	subs	r3, r0, #0
 80042fe:	d014      	beq.n	800432a <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004306:	e010      	b.n	800432a <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004308:	f000 f818 	bl	800433c <RCC_GetSystemClockFreq>
 800430c:	0003      	movs	r3, r0
 800430e:	0018      	movs	r0, r3
 8004310:	f000 f838 	bl	8004384 <RCC_GetHCLKClockFreq>
 8004314:	0003      	movs	r3, r0
 8004316:	0018      	movs	r0, r3
 8004318:	f000 f84a 	bl	80043b0 <RCC_GetPCLK1ClockFreq>
 800431c:	0003      	movs	r3, r0
 800431e:	60fb      	str	r3, [r7, #12]
        break;
 8004320:	e004      	b.n	800432c <LL_RCC_GetUSARTClockFreq+0x74>
    }
  }
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	e002      	b.n	800432c <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	e000      	b.n	800432c <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800432a:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800432c:	68fb      	ldr	r3, [r7, #12]
}
 800432e:	0018      	movs	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	b004      	add	sp, #16
 8004334:	bd80      	pop	{r7, pc}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	007a1200 	.word	0x007a1200

0800433c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004346:	f7ff ff3d 	bl	80041c4 <LL_RCC_GetSysClkSource>
 800434a:	0003      	movs	r3, r0
 800434c:	2b04      	cmp	r3, #4
 800434e:	d006      	beq.n	800435e <RCC_GetSystemClockFreq+0x22>
 8004350:	2b08      	cmp	r3, #8
 8004352:	d007      	beq.n	8004364 <RCC_GetSystemClockFreq+0x28>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <RCC_GetSystemClockFreq+0x44>)
 800435a:	607b      	str	r3, [r7, #4]
      break;
 800435c:	e00a      	b.n	8004374 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <RCC_GetSystemClockFreq+0x44>)
 8004360:	607b      	str	r3, [r7, #4]
      break;
 8004362:	e007      	b.n	8004374 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004364:	f000 f838 	bl	80043d8 <RCC_PLL_GetFreqDomain_SYS>
 8004368:	0003      	movs	r3, r0
 800436a:	607b      	str	r3, [r7, #4]
      break;
 800436c:	e002      	b.n	8004374 <RCC_GetSystemClockFreq+0x38>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800436e:	4b04      	ldr	r3, [pc, #16]	; (8004380 <RCC_GetSystemClockFreq+0x44>)
 8004370:	607b      	str	r3, [r7, #4]
      break;
 8004372:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8004374:	687b      	ldr	r3, [r7, #4]
}
 8004376:	0018      	movs	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	b002      	add	sp, #8
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	007a1200 	.word	0x007a1200

08004384 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800438c:	f7ff ff26 	bl	80041dc <LL_RCC_GetAHBPrescaler>
 8004390:	0003      	movs	r3, r0
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	220f      	movs	r2, #15
 8004396:	4013      	ands	r3, r2
 8004398:	4a04      	ldr	r2, [pc, #16]	; (80043ac <RCC_GetHCLKClockFreq+0x28>)
 800439a:	5cd3      	ldrb	r3, [r2, r3]
 800439c:	001a      	movs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	40d3      	lsrs	r3, r2
}
 80043a2:	0018      	movs	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b002      	add	sp, #8
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	080046f0 	.word	0x080046f0

080043b0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80043b8:	f7ff ff1c 	bl	80041f4 <LL_RCC_GetAPB1Prescaler>
 80043bc:	0003      	movs	r3, r0
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	4a04      	ldr	r2, [pc, #16]	; (80043d4 <RCC_GetPCLK1ClockFreq+0x24>)
 80043c2:	5cd3      	ldrb	r3, [r2, r3]
 80043c4:	001a      	movs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	40d3      	lsrs	r3, r2
}
 80043ca:	0018      	movs	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b002      	add	sp, #8
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	08004700 	.word	0x08004700

080043d8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	607b      	str	r3, [r7, #4]
 80043e2:	2300      	movs	r3, #0
 80043e4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80043e6:	f7ff ff25 	bl	8004234 <LL_RCC_PLL_GetMainSource>
 80043ea:	0003      	movs	r3, r0
 80043ec:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <RCC_PLL_GetFreqDomain_SYS+0x26>
 80043f4:	2280      	movs	r2, #128	; 0x80
 80043f6:	0252      	lsls	r2, r2, #9
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <RCC_PLL_GetFreqDomain_SYS+0x2c>
 80043fc:	e005      	b.n	800440a <RCC_PLL_GetFreqDomain_SYS+0x32>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80043fe:	4b0f      	ldr	r3, [pc, #60]	; (800443c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8004400:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8004402:	e005      	b.n	8004410 <RCC_PLL_GetFreqDomain_SYS+0x38>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004404:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8004406:	607b      	str	r3, [r7, #4]
      break;
 8004408:	e002      	b.n	8004410 <RCC_PLL_GetFreqDomain_SYS+0x38>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800440c:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800440e:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8004410:	f7ff ff28 	bl	8004264 <LL_RCC_PLL_GetPrediv>
 8004414:	0003      	movs	r3, r0
 8004416:	3301      	adds	r3, #1
 8004418:	0019      	movs	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fb fe74 	bl	8000108 <__udivsi3>
 8004420:	0003      	movs	r3, r0
 8004422:	001c      	movs	r4, r3
 8004424:	f7ff ff12 	bl	800424c <LL_RCC_PLL_GetMultiplicator>
 8004428:	0003      	movs	r3, r0
 800442a:	0c9b      	lsrs	r3, r3, #18
 800442c:	220f      	movs	r2, #15
 800442e:	4013      	ands	r3, r2
 8004430:	3302      	adds	r3, #2
 8004432:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8004434:	0018      	movs	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	b003      	add	sp, #12
 800443a:	bd90      	pop	{r4, r7, pc}
 800443c:	003d0900 	.word	0x003d0900
 8004440:	007a1200 	.word	0x007a1200

08004444 <LL_USART_IsEnabled>:
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2201      	movs	r2, #1
 8004452:	4013      	ands	r3, r2
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <LL_USART_IsEnabled+0x18>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <LL_USART_IsEnabled+0x1a>
 800445c:	2300      	movs	r3, #0
}
 800445e:	0018      	movs	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	b002      	add	sp, #8
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <LL_USART_SetStopBitsLength>:
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4a05      	ldr	r2, [pc, #20]	; (800448c <LL_USART_SetStopBitsLength+0x24>)
 8004478:	401a      	ands	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	605a      	str	r2, [r3, #4]
}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	46bd      	mov	sp, r7
 8004486:	b002      	add	sp, #8
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	ffffcfff 	.word	0xffffcfff

08004490 <LL_USART_SetHWFlowCtrl>:
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	4a05      	ldr	r2, [pc, #20]	; (80044b4 <LL_USART_SetHWFlowCtrl+0x24>)
 80044a0:	401a      	ands	r2, r3
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	609a      	str	r2, [r3, #8]
}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b002      	add	sp, #8
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	fffffcff 	.word	0xfffffcff

080044b8 <LL_USART_SetBaudRate>:
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d119      	bne.n	8004504 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	005a      	lsls	r2, r3, #1
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	18d3      	adds	r3, r2, r3
 80044da:	6839      	ldr	r1, [r7, #0]
 80044dc:	0018      	movs	r0, r3
 80044de:	f7fb fe13 	bl	8000108 <__udivsi3>
 80044e2:	0003      	movs	r3, r0
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4a0f      	ldr	r2, [pc, #60]	; (8004528 <LL_USART_SetBaudRate+0x70>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	001c      	movs	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	001a      	movs	r2, r3
 80044f8:	2307      	movs	r3, #7
 80044fa:	4013      	ands	r3, r2
 80044fc:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	60dc      	str	r4, [r3, #12]
}
 8004502:	e00c      	b.n	800451e <LL_USART_SetBaudRate+0x66>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	085a      	lsrs	r2, r3, #1
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	18d3      	adds	r3, r2, r3
 800450c:	6839      	ldr	r1, [r7, #0]
 800450e:	0018      	movs	r0, r3
 8004510:	f7fb fdfa 	bl	8000108 <__udivsi3>
 8004514:	0003      	movs	r3, r0
 8004516:	b29b      	uxth	r3, r3
 8004518:	001a      	movs	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	60da      	str	r2, [r3, #12]
}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	46bd      	mov	sp, r7
 8004522:	b007      	add	sp, #28
 8004524:	bd90      	pop	{r4, r7, pc}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	0000fff0 	.word	0x0000fff0

0800452c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800452c:	b590      	push	{r4, r7, lr}
 800452e:	b089      	sub	sp, #36	; 0x24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004536:	231f      	movs	r3, #31
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	2201      	movs	r2, #1
 800453c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800453e:	2300      	movs	r3, #0
 8004540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	0018      	movs	r0, r3
 8004546:	f7ff ff7d 	bl	8004444 <LL_USART_IsEnabled>
 800454a:	1e03      	subs	r3, r0, #0
 800454c:	d148      	bne.n	80045e0 <LL_USART_Init+0xb4>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a27      	ldr	r2, [pc, #156]	; (80045f0 <LL_USART_Init+0xc4>)
 8004554:	401a      	ands	r2, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6859      	ldr	r1, [r3, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	4319      	orrs	r1, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	4319      	orrs	r1, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	430b      	orrs	r3, r1
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	0011      	movs	r1, r2
 800457a:	0018      	movs	r0, r3
 800457c:	f7ff ff74 	bl	8004468 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	695a      	ldr	r2, [r3, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0011      	movs	r1, r2
 8004588:	0018      	movs	r0, r3
 800458a:	f7ff ff81 	bl	8004490 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <LL_USART_Init+0xc8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d105      	bne.n	80045a2 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004596:	2000      	movs	r0, #0
 8004598:	f7ff fe8e 	bl	80042b8 <LL_RCC_GetUSARTClockFreq>
 800459c:	0003      	movs	r3, r0
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	e00b      	b.n	80045ba <LL_USART_Init+0x8e>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <LL_USART_Init+0xcc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d107      	bne.n	80045ba <LL_USART_Init+0x8e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80045aa:	240c      	movs	r4, #12
 80045ac:	193b      	adds	r3, r7, r4
 80045ae:	0018      	movs	r0, r3
 80045b0:	f7ff fe64 	bl	800427c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80045b4:	193b      	adds	r3, r7, r4
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00f      	beq.n	80045e0 <LL_USART_Init+0xb4>
        && (USART_InitStruct->BaudRate != 0U))
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00b      	beq.n	80045e0 <LL_USART_Init+0xb4>
    {
      status = SUCCESS;
 80045c8:	231f      	movs	r3, #31
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69b9      	ldr	r1, [r7, #24]
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff ff6c 	bl	80044b8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80045e0:	231f      	movs	r3, #31
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	781b      	ldrb	r3, [r3, #0]
}
 80045e6:	0018      	movs	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	b009      	add	sp, #36	; 0x24
 80045ec:	bd90      	pop	{r4, r7, pc}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	ffff69f3 	.word	0xffff69f3
 80045f4:	40013800 	.word	0x40013800
 80045f8:	40004400 	.word	0x40004400

080045fc <__libc_init_array>:
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	2600      	movs	r6, #0
 8004600:	4d0c      	ldr	r5, [pc, #48]	; (8004634 <__libc_init_array+0x38>)
 8004602:	4c0d      	ldr	r4, [pc, #52]	; (8004638 <__libc_init_array+0x3c>)
 8004604:	1b64      	subs	r4, r4, r5
 8004606:	10a4      	asrs	r4, r4, #2
 8004608:	42a6      	cmp	r6, r4
 800460a:	d109      	bne.n	8004620 <__libc_init_array+0x24>
 800460c:	2600      	movs	r6, #0
 800460e:	f000 f821 	bl	8004654 <_init>
 8004612:	4d0a      	ldr	r5, [pc, #40]	; (800463c <__libc_init_array+0x40>)
 8004614:	4c0a      	ldr	r4, [pc, #40]	; (8004640 <__libc_init_array+0x44>)
 8004616:	1b64      	subs	r4, r4, r5
 8004618:	10a4      	asrs	r4, r4, #2
 800461a:	42a6      	cmp	r6, r4
 800461c:	d105      	bne.n	800462a <__libc_init_array+0x2e>
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	00b3      	lsls	r3, r6, #2
 8004622:	58eb      	ldr	r3, [r5, r3]
 8004624:	4798      	blx	r3
 8004626:	3601      	adds	r6, #1
 8004628:	e7ee      	b.n	8004608 <__libc_init_array+0xc>
 800462a:	00b3      	lsls	r3, r6, #2
 800462c:	58eb      	ldr	r3, [r5, r3]
 800462e:	4798      	blx	r3
 8004630:	3601      	adds	r6, #1
 8004632:	e7f2      	b.n	800461a <__libc_init_array+0x1e>
 8004634:	08004708 	.word	0x08004708
 8004638:	08004708 	.word	0x08004708
 800463c:	08004708 	.word	0x08004708
 8004640:	0800470c 	.word	0x0800470c

08004644 <memset>:
 8004644:	0003      	movs	r3, r0
 8004646:	1812      	adds	r2, r2, r0
 8004648:	4293      	cmp	r3, r2
 800464a:	d100      	bne.n	800464e <memset+0xa>
 800464c:	4770      	bx	lr
 800464e:	7019      	strb	r1, [r3, #0]
 8004650:	3301      	adds	r3, #1
 8004652:	e7f9      	b.n	8004648 <memset+0x4>

08004654 <_init>:
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465a:	bc08      	pop	{r3}
 800465c:	469e      	mov	lr, r3
 800465e:	4770      	bx	lr

08004660 <_fini>:
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004666:	bc08      	pop	{r3}
 8004668:	469e      	mov	lr, r3
 800466a:	4770      	bx	lr
