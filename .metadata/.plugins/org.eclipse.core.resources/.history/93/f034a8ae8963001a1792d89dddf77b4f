/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
#include "stm32f0xx_it.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

// TIMER/PWM
uint32_t pwm_on_duty = 0;
int pwm_fade_up = 1;

uint16_t pwm_duty = 8192;
int pwm_arr = 64;
int pwm_delay = 200;

// ADC
uint32_t adc_data_in[ADC_MAX_DATA_POINTS];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void pwm_fade_test()
{
	  uint32_t rootpwm = sqrt(pwm_on_duty);
	  TIM2->CCR1 = rootpwm;
	  TIM2->CCR2 = rootpwm;

	  TIM3->CCR1 = rootpwm;
	  TIM3->CCR2 = rootpwm;
	  TIM3->CCR3 = rootpwm;
	  TIM3->CCR4 = rootpwm;

	  TIM1->CCR1 = rootpwm;
	  TIM1->CCR2 = rootpwm;
	  TIM1->CCR3 = rootpwm;

	  //HAL_Delay(5);
	  if(pwm_fade_up)
	  {
		  HAL_Delay(pwm_delay);
		  pwm_on_duty++;
	  }
	  else
	  {
		  HAL_Delay(pwm_delay);
		  pwm_on_duty--;
	  }

	  //(pwm_on_duty++);
	  if(pwm_on_duty > pwm_duty)
	  {
		  pwm_fade_up = 0;
	  }
	  if(pwm_on_duty < 1)
	  {
		  HAL_Delay(100);
		  pwm_fade_up = 1;
	  }
}

void setMidiChannel(int pChannel)
{
	// discover config dip switch settings
	if(HAL_GPIO_ReadPin(GPIOA, CONFIG1_Pin))
	{
	  bootconfig |= (1 << 0);
	}
	if(HAL_GPIO_ReadPin(GPIOA, CONFIG2_Pin))
	{
	  bootconfig |= (1 << 1);
	}
	if(HAL_GPIO_ReadPin(GPIOA, CONFIG3_Pin))
	{
	  bootconfig |= (1 << 2);
	}
	if(HAL_GPIO_ReadPin(GPIOA, CONFIG4_Pin))
	{
	  bootconfig |= (1 << 3);
	}

	// set MIDI channel
	switch(pChannel)
	{
		case 0:
			enabledNoteOnCmd = CH1_NOTE_ON;
			break;
		case 1:
			enabledNoteOnCmd = CH2_NOTE_ON;
			break;
		case 2:
			enabledNoteOnCmd = CH3_NOTE_ON;
			break;
		case 3:
			enabledNoteOnCmd = CH4_NOTE_ON;
			break;
		case 4:
			enabledNoteOnCmd = CH5_NOTE_ON;
			break;
		case 5:
			enabledNoteOnCmd = CH6_NOTE_ON;
			break;
		case 6:
			enabledNoteOnCmd = CH7_NOTE_ON;
			break;
		case 7:
			enabledNoteOnCmd = CH8_NOTE_ON;
			break;
		case 8:
			enabledNoteOnCmd = CH9_NOTE_ON;
			break;
		case 9:
			enabledNoteOnCmd = CH10_NOTE_ON;
			break;
		case 10:
			enabledNoteOnCmd = CH11_NOTE_ON;
			break;
		case 11:
			enabledNoteOnCmd = CH12_NOTE_ON;
			break;
		case 12:
			enabledNoteOnCmd = CH13_NOTE_ON;
			break;
		case 13:
			enabledNoteOnCmd = CH14_NOTE_ON;
			break;
		case 14:
			enabledNoteOnCmd = CH15_NOTE_ON;
			break;
		case 15:
			enabledNoteOnCmd = CH16_NOTE_ON;
			break;

	}

}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_TIM2_Init();
  MX_ADC_Init();
  MX_USART1_UART_Init();
  MX_TIM16_Init();
  /* USER CODE BEGIN 2 */

  // discover boot config flags (set using onboard DIP4)
  setMidiChannel(bootconfig);

  // setup all output channel timer PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);		// #1
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);		// #2
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		// #3
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);		// #4
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);		// #5
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);		// #6
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);		// #7
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);		// #8
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// #9

  // Capture/Compare output enable
  TIM2->CCER |= TIM_CCER_CC1E;
  TIM2->CCER |= TIM_CCER_CC2E;

  TIM3->CCER |= TIM_CCER_CC1E;
  TIM3->CCER |= TIM_CCER_CC2E;
  TIM3->CCER |= TIM_CCER_CC3E;
  TIM3->CCER |= TIM_CCER_CC4E;

  TIM1->CCER |= TIM_CCER_CC1E;
  TIM1->CCER |= TIM_CCER_CC2E;
  TIM1->CCER |= TIM_CCER_CC3E;

  // set the counter reset
  TIM1->ARR = pwm_arr;
  TIM2->ARR = pwm_arr;
  TIM3->ARR = pwm_arr;

  HAL_ADCEx_Calibration_Start(&hadc);
  HAL_ADC_Start_DMA(&hadc, adc_data_in, ADC_MAX_DATA_POINTS);

  // enable USART receive and interrupt
  USART1->CR1 |= USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
