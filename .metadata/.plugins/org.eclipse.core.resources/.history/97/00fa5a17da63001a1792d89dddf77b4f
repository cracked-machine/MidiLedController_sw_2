/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    stm32f0xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f0xx_it.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */

/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
 
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */



int enabledNoteOnCmd = CH1_NOTE_ON;				// default to MIDI Channel 1
int newMidiByte = 0;
int lastMidiCmd = 0;
int runningStatus = 0;
char midiData[2] = {0};

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/
extern DMA_HandleTypeDef hdma_adc;
extern TIM_HandleTypeDef htim16;
/* USER CODE BEGIN EV */


void pwm_switch_on()
{

	// prevent TIM16 (the output channel reset timer) from premature fire
	TIM16->SR |= TIM_SR_UIF;

	if ((USART1->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
	{
		newMidiByte = (uint8_t)(USART1->RDR); 	// grab first MIDI byte from USART

		if(newMidiByte > MIDI_MAX_NOTE) 		// catch initial MIDI command e.g. Note On
		{
			if(newMidiByte == enabledNoteOnCmd)
			{
				lastMidiCmd = enabledNoteOnCmd;		// remember note on cmd for next iteration
													// to support MIDI "Running Status"
				runningStatus = 0;
			}
		}
		else 										// catch MIDI note/velocity data
		{
			if(lastMidiCmd == enabledNoteOnCmd)
			{
				for(int m=0; m < 2; m++)			// grab second and third MIDI byte from USART
				{
					while((USART1->ISR & USART_ISR_RXNE) != USART_ISR_RXNE){  }
					midiData[m] = (uint8_t)(USART1->RDR);
				}

				// gamma correction for ext. pot analog value
				//uint32_t rootpwm = sqrt(adc_data_in[0]/16);
				uint32_t rootpwm = 256;
				// make sure its not zero/off
				if(rootpwm == 0) { rootpwm = 1; }

				switch(newMidiByte)					// switch on out chan for the MIDI note
				{
					case MIDI_NOTEC2:
						TIM2->CCR1 = rootpwm;
						break;
					case MIDI_NOTECSHARP2:
						TIM2->CCR2 = rootpwm;
						break;
					case MIDI_NOTED2:
						TIM3->CCR1 = rootpwm;
						break;
					case MIDI_NOTEDSHARP2:
						TIM3->CCR2 = rootpwm;
						break;
					case MIDI_NOTEE2:
						TIM3->CCR3 = rootpwm;
						break;
					case MIDI_NOTEF2:
						TIM3->CCR4 = rootpwm;
						break;
					case NIDI_NOTEFSHARP2:
						TIM1->CCR1 = rootpwm;
						break;
					case MIDI_NOTEG2:
						TIM1->CCR2 = rootpwm;
						break;
					case MIDI_NOTEGSHARP2:
						TIM1->CCR3 = rootpwm;
						break;

				}

				runningStatus = 1;
				HAL_TIM_Base_Start_IT(&htim16);
			}
		}
	}

}


void pwm_switch_off()
{
	  TIM2->CCR1 = 0;
	  TIM2->CCR2 = 0;

	  TIM3->CCR1 = 0;
	  TIM3->CCR2 = 0;
	  TIM3->CCR3 = 0;
	  TIM3->CCR4 = 0;

	  TIM1->CCR1 = 0;
	  TIM1->CCR2 = 0;
	  TIM1->CCR3 = 0;
}

/* USER CODE END EV */

/******************************************************************************/
/*           Cortex-M0 Processor Interruption and Exception Handlers          */ 
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVC_IRQn 0 */

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32F0xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f0xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM16_IRQn 0 */
	pwm_switch_off();
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	pwm_switch_on();

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
